{"html":"<article><div class=\"textblock\"><h1>SPIDRV - SPI Driver<span id=\"spidrv-spi-driver\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-spi-driver\">#<\/a><\/span><\/h1><p style=\"color:inherit\">Serial Peripheral Interface Driver. <\/p><p style=\"color:inherit\">The spidrv.c and spidrv.h source files for the SPI driver library are in the emdrv/spidrv folder.<\/p><h2>Introduction<span id=\"introduction\" class=\"self-anchor\"><a class=\"perm\" href=\"#introduction\">#<\/a><\/span><\/h2><p style=\"color:inherit\">The SPI driver supports the SPI capabilities of EFM32/EZR32/EFR32 USARTs. The driver is fully reentrant, supports several driver instances, and does not buffer or queue data. Both synchronous and asynchronous transfer functions are included for both master and slave SPI mode. Synchronous transfer functions are blocking and do not return before the transfer is complete. Asynchronous transfer functions report transfer completion with callback functions. Transfers are handled using DMA.<\/p><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Transfer completion callback functions are called from within the DMA interrupt handler with interrupts disabled.<\/p><\/li><\/ul><h2>Configuration Options<span id=\"configuration-options\" class=\"self-anchor\"><a class=\"perm\" href=\"#configuration-options\">#<\/a><\/span><\/h2><p style=\"color:inherit\">Some properties of the SPIDRV driver are compile-time configurable. These properties are stored in a file named spidrv_config.h. A template for this file, containing default values, is in the emdrv/config folder. Currently the configuration options are as follows: <\/p><ul><li><p style=\"color:inherit\">Inclusion of slave API transfer functions.<\/p><\/li><\/ul><p style=\"color:inherit\">\nTo configure SPIDRV, provide a custom configuration file. This is a sample spidrv_config.h file: <\/p><pre class=\"language-clike\"><code class=\"language-clike\">#ifndef __SILICON_LABS_SPIDRV_CONFIG_H__\n#define __SILICON_LABS_SPIDRV_CONFIG_H__\n\n<span class=\"token comment\">// SPIDRV configuration option. Use this define to include the<\/span>\n<span class=\"token comment\">// slave part of the SPIDRV API.<\/span>\n#define EMDRV_SPIDRV_INCLUDE_SLAVE\n\n#endif<\/code><\/pre><p style=\"color:inherit\">The properties of each SPI driver instance are set at run-time using the <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-init\" target=\"_blank\" rel=\"\">SPIDRV_Init<\/a> data structure input parameter to the <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-init\" target=\"_blank\" rel=\"\">SPIDRV_Init()<\/a> function.<\/p><h2>The API<span id=\"the-api\" class=\"self-anchor\"><a class=\"perm\" href=\"#the-api\">#<\/a><\/span><\/h2><p style=\"color:inherit\">This section contains brief descriptions of the API functions. For detailed information on input and output parameters and return values, click on the hyperlinked function names. Most functions return an error code, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> is returned on success, see ecode.h and spidrv.h for other error codes.<\/p><p style=\"color:inherit\">The application code must include <strong>spidrv.h<\/strong>.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-init\" target=\"_blank\" rel=\"\">SPIDRV_Init()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-de-init\" target=\"_blank\" rel=\"\">SPIDRV_DeInit()<\/a>\n These functions initialize or deinitializes the SPIDRV driver. Typically, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-init\" target=\"_blank\" rel=\"\">SPIDRV_Init()<\/a> is called once in the startup code.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-get-transfer-status\" target=\"_blank\" rel=\"\">SPIDRV_GetTransferStatus()<\/a>\n Query the status of a transfer. Reports number of items (frames) transmitted and remaining.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-abort-transfer\" target=\"_blank\" rel=\"\">SPIDRV_AbortTransfer()<\/a>\n Stop an ongoing transfer.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-set-bitrate\" target=\"_blank\" rel=\"\">SPIDRV_SetBitrate()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-get-bitrate\" target=\"_blank\" rel=\"\">SPIDRV_GetBitrate()<\/a>\n Set or query the SPI bus bitrate.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-set-framelength\" target=\"_blank\" rel=\"\">SPIDRV_SetFramelength()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-get-framelength\" target=\"_blank\" rel=\"\">SPIDRV_GetFramelength()<\/a>\n Set or query SPI the bus frame length.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-m-receive\" target=\"_blank\" rel=\"\">SPIDRV_MReceive()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-m-receive-b\" target=\"_blank\" rel=\"\">SPIDRV_MReceiveB()<\/a><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-m-transfer\" target=\"_blank\" rel=\"\">SPIDRV_MTransfer()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-m-transfer-b\" target=\"_blank\" rel=\"\">SPIDRV_MTransferB()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-m-transfer-single-item-b\" target=\"_blank\" rel=\"\">SPIDRV_MTransferSingleItemB()<\/a><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-m-transmit\" target=\"_blank\" rel=\"\">SPIDRV_MTransmit()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-m-transmit-b\" target=\"_blank\" rel=\"\">SPIDRV_MTransmitB()<\/a><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-s-receive\" target=\"_blank\" rel=\"\">SPIDRV_SReceive()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-s-receive-b\" target=\"_blank\" rel=\"\">SPIDRV_SReceiveB()<\/a><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-s-transfer\" target=\"_blank\" rel=\"\">SPIDRV_STransfer()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-s-transfer-b\" target=\"_blank\" rel=\"\">SPIDRV_STransferB()<\/a><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-s-transmit\" target=\"_blank\" rel=\"\">SPIDRV_STransmit()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-s-transmit-b\" target=\"_blank\" rel=\"\">SPIDRV_STransmitB()<\/a>\n SPI transfer functions for SPI masters have an uppercase M in their name, the slave counterparts have an S.<\/p><p style=\"color:inherit\">As previously mentioned, transfer functions are synchronous and asynchronous. The synchronous versions have an uppercase B (for Blocking) at the end of their function name.<\/p><p style=\"color:inherit\"><strong>Transmit<\/strong> functions discard received data, <strong>receive<\/strong> functions transmit a fixed data pattern set when the driver is initialized (SPIDRV_Init.dummyTxValue). <strong>Transfer<\/strong> functions both receive and transmit data.<\/p><p style=\"color:inherit\">All slave transfer functions have a millisecond timeout parameter. Use 0 for no (infinite) timeout.<\/p><h2>Example<span id=\"example\" class=\"self-anchor\"><a class=\"perm\" href=\"#example\">#<\/a><\/span><\/h2><pre class=\"language-clike\"><code class=\"language-clike\">#include <span class=\"token string\">\"spidrv.h\"<\/span>\n\nSPIDRV_HandleData_t handleData<span class=\"token punctuation\">;<\/span>\nSPIDRV_Handle_t handle <span class=\"token operator\">=<\/span> <span class=\"token operator\">&amp;<\/span>handleData<span class=\"token punctuation\">;<\/span>\n\nvoid <span class=\"token function\">TransferComplete<\/span><span class=\"token punctuation\">(<\/span>SPIDRV_Handle_t handle<span class=\"token punctuation\">,<\/span>\n                      Ecode_t transferStatus<span class=\"token punctuation\">,<\/span>\n                      int itemsTransferred<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">{<\/span>\n  <span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>transferStatus <span class=\"token operator\">==<\/span> ECODE_EMDRV_SPIDRV_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n   <span class=\"token comment\">// Success !<\/span>\n  <span class=\"token punctuation\">}<\/span>\n<span class=\"token punctuation\">}<\/span>\n\nint <span class=\"token function\">main<\/span><span class=\"token punctuation\">(<\/span>void<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">{<\/span>\n  uint8_t buffer<span class=\"token punctuation\">[<\/span><span class=\"token number\">10<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">;<\/span>\n  SPIDRV_Init_t initData <span class=\"token operator\">=<\/span> SPIDRV_MASTER_USART2<span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token comment\">// Initialize an SPI driver instance.<\/span>\n  <span class=\"token function\">SPIDRV_Init<\/span><span class=\"token punctuation\">(<\/span>handle<span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>initData<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token comment\">// Transmit data using a blocking transmit function.<\/span>\n  <span class=\"token function\">SPIDRV_MTransmitB<\/span><span class=\"token punctuation\">(<\/span>handle<span class=\"token punctuation\">,<\/span> buffer<span class=\"token punctuation\">,<\/span> <span class=\"token number\">10<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token comment\">// Transmit data using a callback to catch transfer completion.<\/span>\n  <span class=\"token function\">SPIDRV_MTransmit<\/span><span class=\"token punctuation\">(<\/span>handle<span class=\"token punctuation\">,<\/span> buffer<span class=\"token punctuation\">,<\/span> <span class=\"token number\">10<\/span><span class=\"token punctuation\">,<\/span> TransferComplete<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span><\/code><\/pre><h2>Modules<span id=\"modules\" class=\"self-anchor\"><a class=\"perm\" href=\"#modules\">#<\/a><\/span><\/h2><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-init-t\" target=\"_blank\" rel=\"\">SPIDRV_Init_t<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-handle-data-t\" target=\"_blank\" rel=\"\">SPIDRV_HandleData_t<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-init\" target=\"_blank\" rel=\"\">SPIDRV_Init<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes\" target=\"_blank\" rel=\"\">Error Codes<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-init-structs\" target=\"_blank\" rel=\"\">Init Configuration Data<\/a><\/p><div class=\"decl-class-section\"><h2>Enumerations<span id=\"enum-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#enum-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-type-t\">SPIDRV_Type_t<\/a> {<\/div><div class=\"enum\">spidrvMaster = 0<\/div><div class=\"enum\">spidrvSlave = 1<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">SPI driver instance type. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-bit-order-t\">SPIDRV_BitOrder_t<\/a> {<\/div><div class=\"enum\">spidrvBitOrderLsbFirst = 0<\/div><div class=\"enum\">spidrvBitOrderMsbFirst = 1<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">SPI bus bit order. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-clock-mode-t\">SPIDRV_ClockMode_t<\/a> {<\/div><div class=\"enum\">spidrvClockMode0 = 0<\/div><div class=\"enum\">spidrvClockMode1 = 1<\/div><div class=\"enum\">spidrvClockMode2 = 2<\/div><div class=\"enum\">spidrvClockMode3 = 3<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">SPI clock mode (clock polarity and phase). <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-cs-control-t\">SPIDRV_CsControl_t<\/a> {<\/div><div class=\"enum\">spidrvCsControlAuto = 0<\/div><div class=\"enum\">spidrvCsControlApplication = 1<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">SPI master chip select (CS) control scheme. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-slave-start-t\">SPIDRV_SlaveStart_t<\/a> {<\/div><div class=\"enum\">spidrvSlaveStartImmediate = 0<\/div><div class=\"enum\">spidrvSlaveStartDelayed = 1<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">SPI slave transfer start scheme. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"decl-class-section\"><h2>Typedefs<span id=\"typedef-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#typedef-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">typedef void(*<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-callback-t\">SPIDRV_Callback_t<\/a>)(struct SPIDRV_HandleData *handle, Ecode_t transferStatus, int itemsTransferred)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">SPIDRV transfer completion callback function. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">typedef <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-handle-data-t\" target=\"_blank\" rel=\"\">SPIDRV_HandleData_t<\/a> *<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-handle-t\">SPIDRV_Handle_t<\/a><\/div><div class=\"classdescription\"><p style=\"color:inherit\">An SPI driver instance handle. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"decl-class-section\"><h2>Functions<span id=\"func-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#func-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-abort-transfer\">SPIDRV_AbortTransfer<\/a>(SPIDRV_Handle_t handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Abort an ongoing SPI transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-de-init\">SPIDRV_DeInit<\/a>(SPIDRV_Handle_t handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Deinitialize an SPI driver instance. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-get-bitrate\">SPIDRV_GetBitrate<\/a>(SPIDRV_Handle_t handle, uint32_t *bitRate)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Get current SPI bus bitrate. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-get-framelength\">SPIDRV_GetFramelength<\/a>(SPIDRV_Handle_t handle, uint32_t *frameLength)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Get current SPI framelength. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-get-transfer-status\">SPIDRV_GetTransferStatus<\/a>(SPIDRV_Handle_t handle, int *itemsTransferred, int *itemsRemaining)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Get the status of an SPI transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-init\">SPIDRV_Init<\/a>(SPIDRV_Handle_t handle, SPIDRV_Init_t *initData)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Initialize an SPI driver instance. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-m-receive\">SPIDRV_MReceive<\/a>(SPIDRV_Handle_t handle, void *buffer, int count, SPIDRV_Callback_t callback)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start an SPI master receive transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-m-receive-b\">SPIDRV_MReceiveB<\/a>(SPIDRV_Handle_t handle, void *buffer, int count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start an SPI master blocking receive transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-m-transfer\">SPIDRV_MTransfer<\/a>(SPIDRV_Handle_t handle, const void *txBuffer, void *rxBuffer, int count, SPIDRV_Callback_t callback)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start an SPI master transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-m-transfer-b\">SPIDRV_MTransferB<\/a>(SPIDRV_Handle_t handle, const void *txBuffer, void *rxBuffer, int count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start an SPI master blocking transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-m-transfer-single-item-b\">SPIDRV_MTransferSingleItemB<\/a>(SPIDRV_Handle_t handle, uint32_t txValue, void *rxValue)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start an SPI master blocking single item (frame) transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-m-transmit\">SPIDRV_MTransmit<\/a>(SPIDRV_Handle_t handle, const void *buffer, int count, SPIDRV_Callback_t callback)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start an SPI master transmit transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-m-transmit-b\">SPIDRV_MTransmitB<\/a>(SPIDRV_Handle_t handle, const void *buffer, int count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start an SPI master blocking transmit transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-set-bitrate\">SPIDRV_SetBitrate<\/a>(SPIDRV_Handle_t handle, uint32_t bitRate)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Set SPI bus bitrate. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-set-framelength\">SPIDRV_SetFramelength<\/a>(SPIDRV_Handle_t handle, uint32_t frameLength)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Set SPI framelength. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-s-receive\">SPIDRV_SReceive<\/a>(SPIDRV_Handle_t handle, void *buffer, int count, SPIDRV_Callback_t callback, int timeoutMs)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start an SPI slave receive transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-s-receive-b\">SPIDRV_SReceiveB<\/a>(SPIDRV_Handle_t handle, void *buffer, int count, int timeoutMs)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start an SPI slave blocking receive transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-s-transfer\">SPIDRV_STransfer<\/a>(SPIDRV_Handle_t handle, const void *txBuffer, void *rxBuffer, int count, SPIDRV_Callback_t callback, int timeoutMs)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start an SPI slave transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-s-transfer-b\">SPIDRV_STransferB<\/a>(SPIDRV_Handle_t handle, const void *txBuffer, void *rxBuffer, int count, int timeoutMs)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start an SPI slave blocking transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-s-transmit\">SPIDRV_STransmit<\/a>(SPIDRV_Handle_t handle, const void *buffer, int count, SPIDRV_Callback_t callback, int timeoutMs)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start an SPI slave transmit transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#spidrv-s-transmit-b\">SPIDRV_STransmitB<\/a>(SPIDRV_Handle_t handle, const void *buffer, int count, int timeoutMs)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start an SPI slave blocking transmit transfer. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"def-class-section\"><h2>Enumeration Documentation<span id=\"enum-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#enum-definition\">#<\/a><\/span><\/h2><div><h3>SPIDRV_Type_t<span id=\"spidrv-type-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-type-t\">#<\/a><\/span><\/h3><blockquote>SPIDRV_Type_t<\/blockquote><p style=\"color:inherit\">SPI driver instance type. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">spidrvMaster<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Act as an SPI master. <\/p><\/td><\/tr><tr><td class=\"fieldname\">spidrvSlave<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Act as an SPI slave. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>71<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_BitOrder_t<span id=\"spidrv-bit-order-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-bit-order-t\">#<\/a><\/span><\/h3><blockquote>SPIDRV_BitOrder_t<\/blockquote><p style=\"color:inherit\">SPI bus bit order. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">spidrvBitOrderLsbFirst<\/td><td class=\"fieldname\"><p style=\"color:inherit\">LSB bit is transmitted first. <\/p><\/td><\/tr><tr><td class=\"fieldname\">spidrvBitOrderMsbFirst<\/td><td class=\"fieldname\"><p style=\"color:inherit\">MSB bit is transmitted first. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>77<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_ClockMode_t<span id=\"spidrv-clock-mode-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-clock-mode-t\">#<\/a><\/span><\/h3><blockquote>SPIDRV_ClockMode_t<\/blockquote><p style=\"color:inherit\">SPI clock mode (clock polarity and phase). <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">spidrvClockMode0<\/td><td class=\"fieldname\"><p style=\"color:inherit\">SPI mode 0: CLKPOL=0, CLKPHA=0. <\/p><\/td><\/tr><tr><td class=\"fieldname\">spidrvClockMode1<\/td><td class=\"fieldname\"><p style=\"color:inherit\">SPI mode 1: CLKPOL=0, CLKPHA=1. <\/p><\/td><\/tr><tr><td class=\"fieldname\">spidrvClockMode2<\/td><td class=\"fieldname\"><p style=\"color:inherit\">SPI mode 2: CLKPOL=1, CLKPHA=0. <\/p><\/td><\/tr><tr><td class=\"fieldname\">spidrvClockMode3<\/td><td class=\"fieldname\"><p style=\"color:inherit\">SPI mode 3: CLKPOL=1, CLKPHA=1. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>83<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_CsControl_t<span id=\"spidrv-cs-control-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-cs-control-t\">#<\/a><\/span><\/h3><blockquote>SPIDRV_CsControl_t<\/blockquote><p style=\"color:inherit\">SPI master chip select (CS) control scheme. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">spidrvCsControlAuto<\/td><td class=\"fieldname\"><p style=\"color:inherit\">CS controlled by the SPI driver. <\/p><\/td><\/tr><tr><td class=\"fieldname\">spidrvCsControlApplication<\/td><td class=\"fieldname\"><p style=\"color:inherit\">CS controlled by the application. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>91<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_SlaveStart_t<span id=\"spidrv-slave-start-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-slave-start-t\">#<\/a><\/span><\/h3><blockquote>SPIDRV_SlaveStart_t<\/blockquote><p style=\"color:inherit\">SPI slave transfer start scheme. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">spidrvSlaveStartImmediate<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Transfer starts immediately. <\/p><\/td><\/tr><tr><td class=\"fieldname\">spidrvSlaveStartDelayed<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Transfer starts when the bus is idle (CS deasserted). <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>97<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><\/div><div class=\"def-class-section\"><h2>Typedef Documentation<span id=\"typedef-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#typedef-definition\">#<\/a><\/span><\/h2><div><h3>SPIDRV_Callback_t<span id=\"spidrv-callback-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-callback-t\">#<\/a><\/span><\/h3><blockquote>typedef void(* SPIDRV_Callback_t) (struct SPIDRV_HandleData *handle, Ecode_t transferStatus, int itemsTransferred) )(struct SPIDRV_HandleData *handle, Ecode_t transferStatus, int itemsTransferred)<\/blockquote><p style=\"color:inherit\">SPIDRV transfer completion callback function. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">The SPIDRV device handle used to start the transfer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">transferStatus<\/td><td><p style=\"color:inherit\">A number of bytes actually transferred.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">itemsTransferred<\/td><td><p style=\"color:inherit\">A number of bytes transferred.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Called when a transfer is complete. An application should check the transferStatus and itemsTransferred values.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-timeout\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_TIMEOUT<\/a> on timeout. Timeouts are only relevant for slave mode transfers. <\/p><\/li><\/ul><br><div>Definition at line <code>139<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_Handle_t<span id=\"spidrv-handle-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-handle-t\">#<\/a><\/span><\/h3><blockquote>typedef SPIDRV_HandleData_t* SPIDRV_Handle_t <\/blockquote><p style=\"color:inherit\">An SPI driver instance handle. <\/p><br><div>Definition at line <code>218<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><\/div><div class=\"def-class-section\"><h2>Function Documentation<span id=\"func-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#func-definition\">#<\/a><\/span><\/h2><div><h3>SPIDRV_AbortTransfer<span id=\"spidrv-abort-transfer\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-abort-transfer\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_AbortTransfer (SPIDRV_Handle_t handle)<\/blockquote><p style=\"color:inherit\">Abort an ongoing SPI transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-idle\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_IDLE<\/a> if SPI is idle. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1011<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_DeInit<span id=\"spidrv-de-init\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-de-init\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_DeInit (SPIDRV_Handle_t handle)<\/blockquote><p style=\"color:inherit\">Deinitialize an SPI driver instance. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Warnings<\/strong><\/p><ul><li><p style=\"color:inherit\">This function should only be called with an initialized spidrv instance handle.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1013<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_GetBitrate<span id=\"spidrv-get-bitrate\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-get-bitrate\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_GetBitrate (SPIDRV_Handle_t handle, uint32_t *bitRate)<\/blockquote><p style=\"color:inherit\">Get current SPI bus bitrate. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">bitRate<\/td><td><p style=\"color:inherit\">Current SPI bus bitrate.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1015<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_GetFramelength<span id=\"spidrv-get-framelength\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-get-framelength\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_GetFramelength (SPIDRV_Handle_t handle, uint32_t *frameLength)<\/blockquote><p style=\"color:inherit\">Get current SPI framelength. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">frameLength<\/td><td><p style=\"color:inherit\">Current SPI bus framelength.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1018<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_GetTransferStatus<span id=\"spidrv-get-transfer-status\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-get-transfer-status\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_GetTransferStatus (SPIDRV_Handle_t handle, int *itemsTransferred, int *itemsRemaining)<\/blockquote><p style=\"color:inherit\">Get the status of an SPI transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">itemsTransferred<\/td><td><p style=\"color:inherit\">Number of items (frames) transferred.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">itemsRemaining<\/td><td><p style=\"color:inherit\">Number of items (frames) remaining.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Returns status of an ongoing transfer. If no transfer is in progress, the status of the last transfer is reported.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1021<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_Init<span id=\"spidrv-init\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-init\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_Init (SPIDRV_Handle_t handle, SPIDRV_Init_t *initData)<\/blockquote><p style=\"color:inherit\">Initialize an SPI driver instance. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[out]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle; refer to <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-handle-t\" target=\"_blank\" rel=\"\">SPIDRV_Handle_t<\/a>.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">initData<\/td><td><p style=\"color:inherit\">Pointer to an initialization data structure; refer to <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-init\" target=\"_blank\" rel=\"\">SPIDRV_Init<\/a>.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1025<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_MReceive<span id=\"spidrv-m-receive\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-m-receive\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_MReceive (SPIDRV_Handle_t handle, void *buffer, int count, SPIDRV_Callback_t callback)<\/blockquote><p style=\"color:inherit\">Start an SPI master receive transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">buffer<\/td><td><p style=\"color:inherit\">Receive data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">Number of bytes in transfer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">Transfer completion callback.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The MOSI wire will transmit SPIDRV_Init.dummyTxValue.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1028<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_MReceiveB<span id=\"spidrv-m-receive-b\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-m-receive-b\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_MReceiveB (SPIDRV_Handle_t handle, void *buffer, int count)<\/blockquote><p style=\"color:inherit\">Start an SPI master blocking receive transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">buffer<\/td><td><p style=\"color:inherit\">Receive data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">Number of bytes in transfer.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The MOSI wire will transmit SPIDRV_Init.dummyTxValue. \n This function is blocking and returns when the transfer is complete or when <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-abort-transfer\" target=\"_blank\" rel=\"\">SPIDRV_AbortTransfer()<\/a> is called.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success or <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-aborted\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_ABORTED<\/a> if <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-abort-transfer\" target=\"_blank\" rel=\"\">SPIDRV_AbortTransfer()<\/a> has been called. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1033<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_MTransfer<span id=\"spidrv-m-transfer\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-m-transfer\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_MTransfer (SPIDRV_Handle_t handle, const void *txBuffer, void *rxBuffer, int count, SPIDRV_Callback_t callback)<\/blockquote><p style=\"color:inherit\">Start an SPI master transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">txBuffer<\/td><td><p style=\"color:inherit\">Transmit data buffer.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">rxBuffer<\/td><td><p style=\"color:inherit\">Receive data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">Number of bytes in transfer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">Transfer completion callback.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1037<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_MTransferB<span id=\"spidrv-m-transfer-b\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-m-transfer-b\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_MTransferB (SPIDRV_Handle_t handle, const void *txBuffer, void *rxBuffer, int count)<\/blockquote><p style=\"color:inherit\">Start an SPI master blocking transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">txBuffer<\/td><td><p style=\"color:inherit\">Transmit data buffer.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">rxBuffer<\/td><td><p style=\"color:inherit\">Receive data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">Number of bytes in transfer.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">This function is blocking and returns when the transfer is complete or when <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-abort-transfer\" target=\"_blank\" rel=\"\">SPIDRV_AbortTransfer()<\/a> is called.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success or <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-aborted\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_ABORTED<\/a> if <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-abort-transfer\" target=\"_blank\" rel=\"\">SPIDRV_AbortTransfer()<\/a> has been called. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1043<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_MTransferSingleItemB<span id=\"spidrv-m-transfer-single-item-b\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-m-transfer-single-item-b\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_MTransferSingleItemB (SPIDRV_Handle_t handle, uint32_t txValue, void *rxValue)<\/blockquote><p style=\"color:inherit\">Start an SPI master blocking single item (frame) transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">txValue<\/td><td><p style=\"color:inherit\">Value to transmit.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">rxValue<\/td><td><p style=\"color:inherit\">Value received.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">This function is blocking and returns when the transfer is complete or when <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-abort-transfer\" target=\"_blank\" rel=\"\">SPIDRV_AbortTransfer()<\/a> is called.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success or <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-aborted\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_ABORTED<\/a> if <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-abort-transfer\" target=\"_blank\" rel=\"\">SPIDRV_AbortTransfer()<\/a> has been called. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1048<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_MTransmit<span id=\"spidrv-m-transmit\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-m-transmit\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_MTransmit (SPIDRV_Handle_t handle, const void *buffer, int count, SPIDRV_Callback_t callback)<\/blockquote><p style=\"color:inherit\">Start an SPI master transmit transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">buffer<\/td><td><p style=\"color:inherit\">Transmit data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">Number of bytes in transfer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">Transfer completion callback.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The data received on the MISO wire is discarded.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1052<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_MTransmitB<span id=\"spidrv-m-transmit-b\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-m-transmit-b\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_MTransmitB (SPIDRV_Handle_t handle, const void *buffer, int count)<\/blockquote><p style=\"color:inherit\">Start an SPI master blocking transmit transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">buffer<\/td><td><p style=\"color:inherit\">Transmit data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">Number of bytes in transfer.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The data received on the MISO wire is discarded. \n This function is blocking and returns when the transfer is complete.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success or <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-aborted\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_ABORTED<\/a> if <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-abort-transfer\" target=\"_blank\" rel=\"\">SPIDRV_AbortTransfer()<\/a> has been called. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1057<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_SetBitrate<span id=\"spidrv-set-bitrate\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-set-bitrate\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_SetBitrate (SPIDRV_Handle_t handle, uint32_t bitRate)<\/blockquote><p style=\"color:inherit\">Set SPI bus bitrate. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">bitRate<\/td><td><p style=\"color:inherit\">New SPI bus bitrate.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1061<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_SetFramelength<span id=\"spidrv-set-framelength\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-set-framelength\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_SetFramelength (SPIDRV_Handle_t handle, uint32_t frameLength)<\/blockquote><p style=\"color:inherit\">Set SPI framelength. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">frameLength<\/td><td><p style=\"color:inherit\">New SPI bus framelength.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1064<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_SReceive<span id=\"spidrv-s-receive\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-s-receive\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_SReceive (SPIDRV_Handle_t handle, void *buffer, int count, SPIDRV_Callback_t callback, int timeoutMs)<\/blockquote><p style=\"color:inherit\">Start an SPI slave receive transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">buffer<\/td><td><p style=\"color:inherit\">Receive data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">Number of bytes in transfer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">Transfer completion callback.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">timeoutMs<\/td><td><p style=\"color:inherit\">Transfer timeout in milliseconds.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The MISO wire will transmit SPIDRV_Init.dummyTxValue.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1067<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_SReceiveB<span id=\"spidrv-s-receive-b\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-s-receive-b\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_SReceiveB (SPIDRV_Handle_t handle, void *buffer, int count, int timeoutMs)<\/blockquote><p style=\"color:inherit\">Start an SPI slave blocking receive transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">buffer<\/td><td><p style=\"color:inherit\">Receive data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">Number of bytes in transfer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">timeoutMs<\/td><td><p style=\"color:inherit\">Transfer timeout in milliseconds.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The MISO wire will transmit SPIDRV_Init.dummyTxValue. \n This function is blocking and returns when the transfer is complete, on timeout, or when <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-abort-transfer\" target=\"_blank\" rel=\"\">SPIDRV_AbortTransfer()<\/a> is called.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-timeout\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_TIMEOUT<\/a> on timeout or <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-aborted\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_ABORTED<\/a> if <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-abort-transfer\" target=\"_blank\" rel=\"\">SPIDRV_AbortTransfer()<\/a> has been called. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1073<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_STransfer<span id=\"spidrv-s-transfer\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-s-transfer\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_STransfer (SPIDRV_Handle_t handle, const void *txBuffer, void *rxBuffer, int count, SPIDRV_Callback_t callback, int timeoutMs)<\/blockquote><p style=\"color:inherit\">Start an SPI slave transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">txBuffer<\/td><td><p style=\"color:inherit\">Transmit data buffer.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">rxBuffer<\/td><td><p style=\"color:inherit\">Receive data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">Number of bytes in transfer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">Transfer completion callback.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">timeoutMs<\/td><td><p style=\"color:inherit\">Transfer timeout in milliseconds.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1078<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_STransferB<span id=\"spidrv-s-transfer-b\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-s-transfer-b\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_STransferB (SPIDRV_Handle_t handle, const void *txBuffer, void *rxBuffer, int count, int timeoutMs)<\/blockquote><p style=\"color:inherit\">Start an SPI slave blocking transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">txBuffer<\/td><td><p style=\"color:inherit\">Transmit data buffer.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">rxBuffer<\/td><td><p style=\"color:inherit\">Receive data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">Number of bytes in transfer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">timeoutMs<\/td><td><p style=\"color:inherit\">Transfer timeout in milliseconds.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">\n This function is blocking and returns when the transfer is complete, on timeout, or when <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-abort-transfer\" target=\"_blank\" rel=\"\">SPIDRV_AbortTransfer()<\/a> is called.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-timeout\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_TIMEOUT<\/a> on timeout or <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-aborted\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_ABORTED<\/a> if <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-abort-transfer\" target=\"_blank\" rel=\"\">SPIDRV_AbortTransfer()<\/a> has been called. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1085<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_STransmit<span id=\"spidrv-s-transmit\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-s-transmit\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_STransmit (SPIDRV_Handle_t handle, const void *buffer, int count, SPIDRV_Callback_t callback, int timeoutMs)<\/blockquote><p style=\"color:inherit\">Start an SPI slave transmit transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">buffer<\/td><td><p style=\"color:inherit\">Transmit data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">Number of bytes in transfer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">Transfer completion callback.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">timeoutMs<\/td><td><p style=\"color:inherit\">Transfer timeout in milliseconds.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The data received on the MOSI wire is discarded.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1091<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><div><h3>SPIDRV_STransmitB<span id=\"spidrv-s-transmit-b\" class=\"self-anchor\"><a class=\"perm\" href=\"#spidrv-s-transmit-b\">#<\/a><\/span><\/h3><blockquote>Ecode_t SPIDRV_STransmitB (SPIDRV_Handle_t handle, const void *buffer, int count, int timeoutMs)<\/blockquote><p style=\"color:inherit\">Start an SPI slave blocking transmit transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to an SPI driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">buffer<\/td><td><p style=\"color:inherit\">Transmit data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">Number of bytes in transfer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">timeoutMs<\/td><td><p style=\"color:inherit\">Transfer timeout in milliseconds.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The data received on the MOSI wire is discarded. \n This function is blocking and returns when the transfer is complete, on timeout, or when <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-abort-transfer\" target=\"_blank\" rel=\"\">SPIDRV_AbortTransfer()<\/a> is called.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_OK<\/a> on success, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-timeout\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_TIMEOUT<\/a> on timeout or <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv-error-codes#ecode-emdrv-spidrv-aborted\" target=\"_blank\" rel=\"\">ECODE_EMDRV_SPIDRV_ABORTED<\/a> if <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv#spidrv-abort-transfer\" target=\"_blank\" rel=\"\">SPIDRV_AbortTransfer()<\/a> has been called. On failure, an appropriate SPIDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>1097<\/code> of file <code>platform/emdrv/spidrv/inc/spidrv.h<\/code><\/div><br><\/div><\/div><\/div><\/article><footer class=\"footer-commons-msg\"><\/footer><div ub-in-page=\"6062051aebaf71079a7b414b\" class=\"hidden-lg\"><\/div>","url":"http://docs.silabs.com/gecko-platform/4.3/platform-driver/spidrv","status":"success"}
