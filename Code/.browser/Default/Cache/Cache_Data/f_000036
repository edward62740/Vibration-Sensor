{"html":"<article><div class=\"textblock\"><h1>UARTDRV - UART Driver<span id=\"uartdrv-uart-driver\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-uart-driver\">#<\/a><\/span><\/h1><p style=\"color:inherit\">Universal Asynchronous Receiver/Transmitter Driver. <\/p><p style=\"color:inherit\">The source files for the UART driver library, uartdrv.c and uartdrv.h, are in the emdrv/uartdrv folder.<\/p><h2>Introduction<span id=\"introduction\" class=\"self-anchor\"><a class=\"perm\" href=\"#introduction\">#<\/a><\/span><\/h2><p style=\"color:inherit\">The UART driver supports the UART capabilities of the USART, UART, and LEUART peripherals. The driver is fully reentrant and supports multiple driver instances. The driver does not buffer or queue data. However, it queues UART transmit and receive operations. Both blocking and non-blocking transfer functions are available. Non-blocking transfer functions report transfer completion with callback functions. Transfers are done using DMA. Simple direct/forced transmit and receive functions are also available. Note that these functions are blocking and not suitable for low energy applications because they use CPU polling.<\/p><p style=\"color:inherit\">UART hardware flow control (CTS/RTS) is fully supported by the driver. UART software flow control (XON/XOFF) is partially supported by the driver. For more information about flow control support, see <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/group-uartdrv#group-uartdrv-1uartdrv-fc\" target=\"_blank\" rel=\"\">Flow Control Support<\/a>.<\/p><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Transfer completion callback functions are called from within the DMA interrupt handler with interrupts disabled.<\/p><\/li><\/ul><h2>Configuration Options<span id=\"configuration-options\" class=\"self-anchor\"><a class=\"perm\" href=\"#configuration-options\">#<\/a><\/span><\/h2><p style=\"color:inherit\">Some properties of the UARTDRV driver are compile-time configurable. These properties are set in a uartdrv_config.h file. A template for this file, containing default values, is in the emdrv/config folder. To configure UARTDRV for your application, provide a custom configuration file, or override the defines on the compiler command line. These are the available configuration parameters with default values defined. <\/p><pre class=\"language-clike\"><code class=\"language-clike\">  <span class=\"token comment\">// Set to 1 to enable hardware flow control.<\/span>\n#define EMDRV_UARTDRV_FLOW_CONTROL_ENABLE       <span class=\"token number\">1<\/span>\n\n  <span class=\"token comment\">// Maximum number of driver instances.<\/span>\n#define EMDRV_UARTDRV_MAX_DRIVER_INSTANCES      <span class=\"token number\">4<\/span>\n\n  <span class=\"token comment\">// UART software flow control code: request peer to start Tx.<\/span>\n#define UARTDRV_FC_SW_XON                       <span class=\"token number\">0x11<\/span>\n\n  <span class=\"token comment\">// UART software flow control code: request peer to stop Tx.<\/span>\n#define UARTDRV_FC_SW_XOFF                      <span class=\"token number\">0x13<\/span>\n<\/code><\/pre><p style=\"color:inherit\">The properties of each UART driver instance are set at run-time via the UARTDRV_InitUart_t data structure input parameter to the UARTDRV_InitUart() function for UART and USART peripherals, and the <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-init-leuart-t\" target=\"_blank\" rel=\"\">UARTDRV_InitLeuart_t<\/a> data structure input parameter to the <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-init-leuart\" target=\"_blank\" rel=\"\">UARTDRV_InitLeuart()<\/a> function for LEUART peripherals.<\/p><h2>The API<span id=\"the-api\" class=\"self-anchor\"><a class=\"perm\" href=\"#the-api\">#<\/a><\/span><\/h2><p style=\"color:inherit\">This section contains brief descriptions of the functions in the API. For more information on input and output parameters and return values, click on the hyperlinked function names. Most functions return an error code, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> is returned on success, see ecode.h and uartdrv.h for other error codes.<\/p><p style=\"color:inherit\">The application code must include <strong>uartdrv.h<\/strong> header file.<\/p><p style=\"color:inherit\">UARTDRV_InitUart(), <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-init-leuart\" target=\"_blank\" rel=\"\">UARTDRV_InitLeuart()<\/a> and <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-de-init\" target=\"_blank\" rel=\"\">UARTDRV_DeInit()<\/a>\n These functions initialize and deinitialize the UARTDRV driver. Typically, UARTDRV_InitUart() (for UART/USART) or <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-init-leuart\" target=\"_blank\" rel=\"\">UARTDRV_InitLeuart()<\/a> (for LEUART) are called once in the startup code.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-get-receive-status\" target=\"_blank\" rel=\"\">UARTDRV_GetReceiveStatus()<\/a> and <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-get-transmit-status\" target=\"_blank\" rel=\"\">UARTDRV_GetTransmitStatus()<\/a>\n Query the status of a current transmit or receive operations. Reports number of items (frames) transmitted and remaining.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-get-receive-depth\" target=\"_blank\" rel=\"\">UARTDRV_GetReceiveDepth()<\/a> and <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-get-transmit-depth\" target=\"_blank\" rel=\"\">UARTDRV_GetTransmitDepth()<\/a>\n Get the number of queued receive or transmit operations.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-transmit\" target=\"_blank\" rel=\"\">UARTDRV_Transmit()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-receive\" target=\"_blank\" rel=\"\">UARTDRV_Receive()<\/a><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-transmit-b\" target=\"_blank\" rel=\"\">UARTDRV_TransmitB()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-receive-b\" target=\"_blank\" rel=\"\">UARTDRV_ReceiveB()<\/a><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-force-transmit\" target=\"_blank\" rel=\"\">UARTDRV_ForceTransmit()<\/a> and <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-force-receive\" target=\"_blank\" rel=\"\">UARTDRV_ForceReceive()<\/a>\n Blocking and non-blocking transfer functions are included. The blocking versions have an uppercase B (for Blocking) at the end of their function name. Blocking functions do not return before the transfer is complete. The non-blocking functions signal a transfer completion with a callback function. <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-force-transmit\" target=\"_blank\" rel=\"\">UARTDRV_ForceTransmit()<\/a> and <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-force-receive\" target=\"_blank\" rel=\"\">UARTDRV_ForceReceive()<\/a> are also blocking. These two functions access the UART peripheral directly without using DMA or interrupts. <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-force-transmit\" target=\"_blank\" rel=\"\">UARTDRV_ForceTransmit()<\/a> does not respect flow control. <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-force-receive\" target=\"_blank\" rel=\"\">UARTDRV_ForceReceive()<\/a> forces RTS low.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-abort\" target=\"_blank\" rel=\"\">UARTDRV_Abort()<\/a>\n Abort current transmit or receive operations and remove all queued operations.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-flow-control-set\" target=\"_blank\" rel=\"\">UARTDRV_FlowControlSet()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-flow-control-get-self-status\" target=\"_blank\" rel=\"\">UARTDRV_FlowControlGetSelfStatus()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-flow-control-set-peer-status\" target=\"_blank\" rel=\"\">UARTDRV_FlowControlSetPeerStatus()<\/a> and <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-flow-control-get-peer-status\" target=\"_blank\" rel=\"\">UARTDRV_FlowControlGetPeerStatus()<\/a>\n Set and get flow control status of self or peer device. Note that the return value from these two functions depends on the flow control mode set by <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-flow-control-set\" target=\"_blank\" rel=\"\">UARTDRV_FlowControlSet()<\/a>, UARTDRV_InitUart(), or <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-init-leuart\" target=\"_blank\" rel=\"\">UARTDRV_InitLeuart()<\/a>.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-flow-control-ignore-restrain\" target=\"_blank\" rel=\"\">UARTDRV_FlowControlIgnoreRestrain()<\/a>\n Enables transmission when restrained by flow control.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-pause-transmit\" target=\"_blank\" rel=\"\">UARTDRV_PauseTransmit()<\/a> and <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-resume-transmit\" target=\"_blank\" rel=\"\">UARTDRV_ResumeTransmit()<\/a>\n Pause a currently active transmit operation by preventing the DMA from loading the UART FIFO. Will not override HW flow control state (if applicable), but can be used in conjunction.<\/p><h2>Flow Control Support<span id=\"flow-control-support\" class=\"self-anchor\"><a class=\"perm\" href=\"#flow-control-support\">#<\/a><\/span><\/h2><p style=\"color:inherit\">If UART flow control is not required, make sure that EMDRV_UARTDRV_FLOW_CONTROL_ENABLE is set to 0. This reduces the code size and complexity of the driver.<\/p><p style=\"color:inherit\">Both hardware and software flow control are supported. To enable either of these, set EMDRV_UARTDRV_FLOW_CONTROL_ENABLE to 1 in uartdrv_config.h.<\/p><h3>Hardware Flow Control<span id=\"hardware-flow-control\" class=\"self-anchor\"><a class=\"perm\" href=\"#hardware-flow-control\">#<\/a><\/span><\/h3><p style=\"color:inherit\">UART hardware flow control uses two additional pins for flow control handshaking, the clear-to-send (CTS) and ready-to-send (RTS) pins. RTS is an output and CTS is an input. These are active-low signals. When CTS is high, the UART transmitter should stop sending frames. A receiver should set RTS high when it is no longer capable of receiving data.<\/p><ul><li><h1>Peripheral Hardware Flow Control<span id=\"peripheral-hardware-flow-control\" class=\"self-anchor\"><a class=\"perm\" href=\"#peripheral-hardware-flow-control\">#<\/a><\/span><\/h1><\/li><\/ul><p style=\"color:inherit\">\nNewer devices natively support CTS/RTS in the USART peripheral hardware. To enable hardware flow control, perform the following steps:<\/p><ul><li><p style=\"color:inherit\">Set EMDRV_UARTDRV_FLOW_CONTROL_ENABLE to 1.<\/p><\/li><li><p style=\"color:inherit\">In the UARTDRV_InitUart_t struct passed to UARTDRV_InitUart(), set UARTDRV_InitUart_t.fcType = uartdrvFlowControlHwUart.<\/p><\/li><li><p style=\"color:inherit\">Define the pins for CTS and RTS by setting ctsPort, ctsPin, rtsPort and rtsPin in the init struct.<\/p><\/li><li><p style=\"color:inherit\">Also define the CTS and RTS locations by setting portLocationCts and portLocationRts in the init struct.<\/p><\/li><\/ul><ul><li><h1>GPIO Hardware Flow Control<span id=\"gpio-hardware-flow-control\" class=\"self-anchor\"><a class=\"perm\" href=\"#gpio-hardware-flow-control\">#<\/a><\/span><\/h1><\/li><\/ul><p style=\"color:inherit\">\nTo support hardware flow control on devices that don't have UART CTS/RTS hardware support, the driver includes the GPIOINT driver to emulate a hardware implementation of UART CTS/RTS flow control on these devices.<\/p><p style=\"color:inherit\">To enable hardware flow control, perform the following steps:<\/p><ul><li><p style=\"color:inherit\">Set EMDRV_UARTDRV_FLOW_CONTROL_ENABLE to 1.<\/p><\/li><li><p style=\"color:inherit\">UART/USART: In the UARTDRV_InitUart_t struct passed to UARTDRV_InitUart(), set UARTDRV_InitUart_t.fcType = uartdrvFlowControlHw.<\/p><\/li><li><p style=\"color:inherit\">LEUART: In the <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-init-leuart-t\" target=\"_blank\" rel=\"\">UARTDRV_InitLeuart_t<\/a> struct passed to <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-init-leuart\" target=\"_blank\" rel=\"\">UARTDRV_InitLeuart()<\/a>, set <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-init-leuart-t#fc-type\" target=\"_blank\" rel=\"\">UARTDRV_InitLeuart_t::fcType<\/a> = uartdrvFlowControlHw.<\/p><\/li><li><p style=\"color:inherit\">Define the pins for CTS and RTS by setting ctsPort, ctsPin, rtsPort and rtsPin in the same init struct.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Because of the limitations in GPIO interrupt hardware, you cannot select CTS pins in multiple driver instances with the same pin number. For example, pin A0 and B0 cannot serve as CTS pins in two concurrent driver instances.<\/p><\/li><\/ul><p style=\"color:inherit\">\nRTS is set high whenever there are no Rx operations queued. The UART transmitter is halted when the CTS pin goes high. The transmitter completes the current frame before halting. DMA transfers are also halted.<\/p><h3>Software Flow Control<span id=\"software-flow-control\" class=\"self-anchor\"><a class=\"perm\" href=\"#software-flow-control\">#<\/a><\/span><\/h3><p style=\"color:inherit\">UART software flow control uses in-band signaling, meaning the receiver sends special flow control characters to the transmitter and thereby removes the need for dedicated wires for flow control. The two symbols UARTDRV_FC_SW_XON and UARTDRV_FC_SW_XOFF are defined in uartdrv_config.h.<\/p><p style=\"color:inherit\">To enable support for software flow control, perform the following steps:<\/p><ul><li><p style=\"color:inherit\">Set EMDRV_UARTDRV_FLOW_CONTROL_ENABLE to 1.<\/p><\/li><li><p style=\"color:inherit\">UART/USART: In the UARTDRV_InitUart_t structure passed to UARTDRV_InitUart(), set UARTDRV_InitUart_t.fcType = uartdrvFlowControlSw.<\/p><\/li><li><p style=\"color:inherit\">LEUART: In the <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-init-leuart-t\" target=\"_blank\" rel=\"\">UARTDRV_InitLeuart_t<\/a> structure passed to <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-init-leuart\" target=\"_blank\" rel=\"\">UARTDRV_InitLeuart()<\/a>, set <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-init-leuart-t#fc-type\" target=\"_blank\" rel=\"\">UARTDRV_InitLeuart_t::fcType<\/a> = uartdrvFlowControlSw.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Software flow control is partial only.<\/p><\/li><\/ul><p style=\"color:inherit\">\nThe application must monitor buffers and make decisions on when to send XON/ XOFF. XON/XOFF can be sent to the peer using <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-flow-control-set\" target=\"_blank\" rel=\"\">UARTDRV_FlowControlSet()<\/a>. Though <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-flow-control-set\" target=\"_blank\" rel=\"\">UARTDRV_FlowControlSet()<\/a> will pause the active transmit operation to send a flow control character, there is no way to guarantee the order. If the application implements a specific packet format where the flow control codes may appear only in fixed positions, the application should not use <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-flow-control-set\" target=\"_blank\" rel=\"\">UARTDRV_FlowControlSet()<\/a> but implement read and write of XON/XOFF into packet buffers. If the application code fully implements all the flow control logic, EMDRV_UARTDRV_FLOW_CONTROL_ENABLE should be set to 0 to reduce code space.<\/p><h2>Example<span id=\"example\" class=\"self-anchor\"><a class=\"perm\" href=\"#example\">#<\/a><\/span><\/h2><h2>Modules<span id=\"modules\" class=\"self-anchor\"><a class=\"perm\" href=\"#modules\">#<\/a><\/span><\/h2><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-buffer-t\" target=\"_blank\" rel=\"\">UARTDRV_Buffer_t<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-buffer-fifo-queue-t\" target=\"_blank\" rel=\"\">UARTDRV_Buffer_FifoQueue_t<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-init-leuart-t\" target=\"_blank\" rel=\"\">UARTDRV_InitLeuart_t<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-init-euart-t\" target=\"_blank\" rel=\"\">UARTDRV_InitEuart_t<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-handle-data-t\" target=\"_blank\" rel=\"\">UARTDRV_HandleData_t<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes\" target=\"_blank\" rel=\"\">Error Codes<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-status-codes\" target=\"_blank\" rel=\"\">Status Codes<\/a><\/p><div class=\"decl-class-section\"><h2>Enumerations<span id=\"enum-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#enum-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-flow-control-type-t\">UARTDRV_FlowControlType_t<\/a> {<\/div><div class=\"enum\">uartdrvFlowControlNone = 0<\/div><div class=\"enum\">uartdrvFlowControlSw = 1<\/div><div class=\"enum\">uartdrvFlowControlHw = 2<\/div><div class=\"enum\">uartdrvFlowControlHwUart = 3<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">UARTDRV Flow Control method. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-flow-control-state-t\">UARTDRV_FlowControlState_t<\/a> {<\/div><div class=\"enum\">uartdrvFlowControlOn = 0<\/div><div class=\"enum\">uartdrvFlowControlOff = 1<\/div><div class=\"enum\">uartdrvFlowControlAuto = 2<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Flow Control state. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-abort-type-t\">UARTDRV_AbortType_t<\/a> {<\/div><div class=\"enum\">uartdrvAbortTransmit = 1<\/div><div class=\"enum\">uartdrvAbortReceive = 2<\/div><div class=\"enum\">uartdrvAbortAll = 3<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Transfer abort type. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"decl-class-section\"><h2>Typedefs<span id=\"typedef-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#typedef-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">typedef uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-count-t\">UARTDRV_Count_t<\/a><\/div><div class=\"classdescription\"><p style=\"color:inherit\">A UART transfer count. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">typedef uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-status-t\">UARTDRV_Status_t<\/a><\/div><div class=\"classdescription\"><p style=\"color:inherit\">A UART status return type. Bitfield of UARTDRV_STATUS_* values. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">typedef void(*<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-callback-t\">UARTDRV_Callback_t<\/a>)(struct UARTDRV_HandleData *handle, Ecode_t transferStatus, uint8_t *data, UARTDRV_Count_t transferCount)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">UARTDRV transfer completion callback function. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">typedef <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-handle-data-t\" target=\"_blank\" rel=\"\">UARTDRV_HandleData_t<\/a> *<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-handle-t\">UARTDRV_Handle_t<\/a><\/div><div class=\"classdescription\"><p style=\"color:inherit\">Handle pointer. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"decl-class-section\"><h2>Functions<span id=\"func-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#func-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-init-leuart\">UARTDRV_InitLeuart<\/a>(UARTDRV_Handle_t handle, const UARTDRV_InitLeuart_t *initData)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Initialize a LEUART driver instance. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-init-euart\">UARTDRV_InitEuart<\/a>(UARTDRV_Handle_t handle, const UARTDRV_InitEuart_t *initData)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Initialize a EUART driver instance. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-de-init\">UARTDRV_DeInit<\/a>(UARTDRV_Handle_t handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Deinitialize a UART driver instance. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-status-t\" target=\"_blank\" rel=\"\">UARTDRV_Status_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-get-peripheral-status\">UARTDRV_GetPeripheralStatus<\/a>(UARTDRV_Handle_t handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Return the status of the UART peripheral associated with a given handle. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-status-t\" target=\"_blank\" rel=\"\">UARTDRV_Status_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-get-receive-status\">UARTDRV_GetReceiveStatus<\/a>(UARTDRV_Handle_t handle, uint8_t **buffer, UARTDRV_Count_t *bytesReceived, UARTDRV_Count_t *bytesRemaining)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Check the status of the UART and gather information about any ongoing receive operations. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-status-t\" target=\"_blank\" rel=\"\">UARTDRV_Status_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-get-transmit-status\">UARTDRV_GetTransmitStatus<\/a>(UARTDRV_Handle_t handle, uint8_t **buffer, UARTDRV_Count_t *bytesSent, UARTDRV_Count_t *bytesRemaining)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Check the status of the UART and gather information about any ongoing transmit operations. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint8_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-get-receive-depth\">UARTDRV_GetReceiveDepth<\/a>(UARTDRV_Handle_t handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Return the number of queued receive operations. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint8_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-get-transmit-depth\">UARTDRV_GetTransmitDepth<\/a>(UARTDRV_Handle_t handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Returns the number of queued transmit operations. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-transmit\">UARTDRV_Transmit<\/a>(UARTDRV_Handle_t handle, uint8_t *data, UARTDRV_Count_t count, UARTDRV_Callback_t callback)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start a non-blocking transmit. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-receive\">UARTDRV_Receive<\/a>(UARTDRV_Handle_t handle, uint8_t *data, UARTDRV_Count_t count, UARTDRV_Callback_t callback)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start a non-blocking receive. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-transmit-b\">UARTDRV_TransmitB<\/a>(UARTDRV_Handle_t handle, uint8_t *data, UARTDRV_Count_t count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start a blocking transmit. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-receive-b\">UARTDRV_ReceiveB<\/a>(UARTDRV_Handle_t handle, uint8_t *data, UARTDRV_Count_t count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start a blocking receive. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-force-transmit\">UARTDRV_ForceTransmit<\/a>(UARTDRV_Handle_t handle, uint8_t *data, UARTDRV_Count_t count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Direct transmit without interrupts or callback. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-count-t\" target=\"_blank\" rel=\"\">UARTDRV_Count_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-force-receive\">UARTDRV_ForceReceive<\/a>(UARTDRV_Handle_t handle, uint8_t *data, UARTDRV_Count_t maxLength)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Direct receive without interrupts or callback. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-abort\">UARTDRV_Abort<\/a>(UARTDRV_Handle_t handle, UARTDRV_AbortType_t type)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Abort ongoing UART transfers. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-pause-transmit\">UARTDRV_PauseTransmit<\/a>(UARTDRV_Handle_t handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Pause an ongoing transmit operation. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-resume-transmit\">UARTDRV_ResumeTransmit<\/a>(UARTDRV_Handle_t handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Resume a paused transmit operation. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-flow-control-state-t\" target=\"_blank\" rel=\"\">UARTDRV_FlowControlState_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-flow-control-get-self-status\">UARTDRV_FlowControlGetSelfStatus<\/a>(UARTDRV_Handle_t handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Check the self flow control status. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-flow-control-state-t\" target=\"_blank\" rel=\"\">UARTDRV_FlowControlState_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-flow-control-get-peer-status\">UARTDRV_FlowControlGetPeerStatus<\/a>(UARTDRV_Handle_t handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Check the peer's flow control status. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-flow-control-set\">UARTDRV_FlowControlSet<\/a>(UARTDRV_Handle_t handle, UARTDRV_FlowControlState_t state)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Set UART flow control state. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-flow-control-set-peer-status\">UARTDRV_FlowControlSetPeerStatus<\/a>(UARTDRV_Handle_t handle, UARTDRV_FlowControlState_t state)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Set peer UART flow control state. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#uartdrv-flow-control-ignore-restrain\">UARTDRV_FlowControlIgnoreRestrain<\/a>(UARTDRV_Handle_t handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Enable transmission when restrained by flow control. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"decl-class-section\"><h2>Macros<span id=\"define-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#define-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#define-buf-queue\">DEFINE_BUF_QUEUE<\/a> (qSize, qName)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Macros to define FIFO and buffer queues. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"def-class-section\"><h2>Enumeration Documentation<span id=\"enum-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#enum-definition\">#<\/a><\/span><\/h2><div><h3>UARTDRV_FlowControlType_t<span id=\"uartdrv-flow-control-type-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-flow-control-type-t\">#<\/a><\/span><\/h3><blockquote>UARTDRV_FlowControlType_t<\/blockquote><p style=\"color:inherit\">UARTDRV Flow Control method. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">uartdrvFlowControlNone<\/td><td class=\"fieldname\"><p style=\"color:inherit\">None. <\/p><\/td><\/tr><tr><td class=\"fieldname\">uartdrvFlowControlSw<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Software XON/XOFF. <\/p><\/td><\/tr><tr><td class=\"fieldname\">uartdrvFlowControlHw<\/td><td class=\"fieldname\"><p style=\"color:inherit\">nRTS/nCTS hardware handshake <\/p><\/td><\/tr><tr><td class=\"fieldname\">uartdrvFlowControlHwUart<\/td><td class=\"fieldname\"><p style=\"color:inherit\">UART peripheral controls nRTS/nCTS. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>112<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_FlowControlState_t<span id=\"uartdrv-flow-control-state-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-flow-control-state-t\">#<\/a><\/span><\/h3><blockquote>UARTDRV_FlowControlState_t<\/blockquote><p style=\"color:inherit\">Flow Control state. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">uartdrvFlowControlOn<\/td><td class=\"fieldname\"><p style=\"color:inherit\">XON or nRTS/nCTS low. <\/p><\/td><\/tr><tr><td class=\"fieldname\">uartdrvFlowControlOff<\/td><td class=\"fieldname\"><p style=\"color:inherit\">XOFF or nRTS/nCTS high. <\/p><\/td><\/tr><tr><td class=\"fieldname\">uartdrvFlowControlAuto<\/td><td class=\"fieldname\"><p style=\"color:inherit\">This driver controls the state. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>120<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_AbortType_t<span id=\"uartdrv-abort-type-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-abort-type-t\">#<\/a><\/span><\/h3><blockquote>UARTDRV_AbortType_t<\/blockquote><p style=\"color:inherit\">Transfer abort type. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">uartdrvAbortTransmit<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Abort current and queued transmit operations. <\/p><\/td><\/tr><tr><td class=\"fieldname\">uartdrvAbortReceive<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Abort current and queued receive operations. <\/p><\/td><\/tr><tr><td class=\"fieldname\">uartdrvAbortAll<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Abort all current and queued operations. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>127<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><\/div><div class=\"def-class-section\"><h2>Typedef Documentation<span id=\"typedef-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#typedef-definition\">#<\/a><\/span><\/h2><div><h3>UARTDRV_Count_t<span id=\"uartdrv-count-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-count-t\">#<\/a><\/span><\/h3><blockquote>typedef uint32_t UARTDRV_Count_t <\/blockquote><p style=\"color:inherit\">A UART transfer count. <\/p><br><div>Definition at line <code>105<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_Status_t<span id=\"uartdrv-status-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-status-t\">#<\/a><\/span><\/h3><blockquote>typedef uint32_t UARTDRV_Status_t <\/blockquote><p style=\"color:inherit\">A UART status return type. Bitfield of UARTDRV_STATUS_* values. <\/p><br><div>Definition at line <code>106<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_Callback_t<span id=\"uartdrv-callback-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-callback-t\">#<\/a><\/span><\/h3><blockquote>typedef void(* UARTDRV_Callback_t) (struct UARTDRV_HandleData *handle, Ecode_t transferStatus, uint8_t *data, UARTDRV_Count_t transferCount) )(struct UARTDRV_HandleData *handle, Ecode_t transferStatus, uint8_t *data, UARTDRV_Count_t transferCount)<\/blockquote><p style=\"color:inherit\">UARTDRV transfer completion callback function. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">The UARTDRV device handle used to start the transfer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">transferStatus<\/td><td><p style=\"color:inherit\">Completion status of the transfer operation.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">data<\/td><td><p style=\"color:inherit\">A pointer to the transfer data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">transferCount<\/td><td><p style=\"color:inherit\">A number of bytes transferred. <\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Called when a transfer is complete. An application should check the transferStatus and itemsTransferred values.<\/p><br><div>Definition at line <code>169<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_Handle_t<span id=\"uartdrv-handle-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-handle-t\">#<\/a><\/span><\/h3><blockquote>typedef UARTDRV_HandleData_t* UARTDRV_Handle_t <\/blockquote><p style=\"color:inherit\">Handle pointer. <\/p><br><div>Definition at line <code>371<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><\/div><div class=\"def-class-section\"><h2>Function Documentation<span id=\"func-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#func-definition\">#<\/a><\/span><\/h2><div><h3>UARTDRV_InitLeuart<span id=\"uartdrv-init-leuart\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-init-leuart\">#<\/a><\/span><\/h3><blockquote>Ecode_t UARTDRV_InitLeuart (UARTDRV_Handle_t handle, const UARTDRV_InitLeuart_t *initData)<\/blockquote><p style=\"color:inherit\">Initialize a LEUART driver instance. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[out]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UARTDRV handle, refer to <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-handle-t\" target=\"_blank\" rel=\"\">UARTDRV_Handle_t<\/a>.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">initData<\/td><td><p style=\"color:inherit\">Pointer to an initialization data structure, refer to <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-init-leuart-t\" target=\"_blank\" rel=\"\">UARTDRV_InitLeuart_t<\/a>.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> on success. On failure, an appropriate UARTDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>379<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_InitEuart<span id=\"uartdrv-init-euart\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-init-euart\">#<\/a><\/span><\/h3><blockquote>Ecode_t UARTDRV_InitEuart (UARTDRV_Handle_t handle, const UARTDRV_InitEuart_t *initData)<\/blockquote><p style=\"color:inherit\">Initialize a EUART driver instance. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[out]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UARTDRV handle, refer to <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv#uartdrv-handle-t\" target=\"_blank\" rel=\"\">UARTDRV_Handle_t<\/a>.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">initData<\/td><td><p style=\"color:inherit\">Pointer to an initialization data structure, refer to <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-init-euart-t\" target=\"_blank\" rel=\"\">UARTDRV_InitEuart_t<\/a>.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> on success. On failure an appropriate UARTDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>384<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_DeInit<span id=\"uartdrv-de-init\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-de-init\">#<\/a><\/span><\/h3><blockquote>Ecode_t UARTDRV_DeInit (UARTDRV_Handle_t handle)<\/blockquote><p style=\"color:inherit\">Deinitialize a UART driver instance. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> on success. On failure, an appropriate UARTDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>387<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_GetPeripheralStatus<span id=\"uartdrv-get-peripheral-status\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-get-peripheral-status\">#<\/a><\/span><\/h3><blockquote>UARTDRV_Status_t UARTDRV_GetPeripheralStatus (UARTDRV_Handle_t handle)<\/blockquote><p style=\"color:inherit\">Return the status of the UART peripheral associated with a given handle. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">UART status value <\/p><\/li><\/ul><br><div>Definition at line <code>389<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_GetReceiveStatus<span id=\"uartdrv-get-receive-status\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-get-receive-status\">#<\/a><\/span><\/h3><blockquote>UARTDRV_Status_t UARTDRV_GetReceiveStatus (UARTDRV_Handle_t handle, uint8_t **buffer, UARTDRV_Count_t *bytesReceived, UARTDRV_Count_t *bytesRemaining)<\/blockquote><p style=\"color:inherit\">Check the status of the UART and gather information about any ongoing receive operations. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">buffer<\/td><td><p style=\"color:inherit\">Pointer to the current data buffer.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">itemsReceived<\/td><td><p style=\"color:inherit\">Current bytes received count.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">itemsRemaining<\/td><td><p style=\"color:inherit\">Current bytes remaining count.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">UART status. <\/p><\/li><\/ul><br><div>Definition at line <code>391<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_GetTransmitStatus<span id=\"uartdrv-get-transmit-status\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-get-transmit-status\">#<\/a><\/span><\/h3><blockquote>UARTDRV_Status_t UARTDRV_GetTransmitStatus (UARTDRV_Handle_t handle, uint8_t **buffer, UARTDRV_Count_t *bytesSent, UARTDRV_Count_t *bytesRemaining)<\/blockquote><p style=\"color:inherit\">Check the status of the UART and gather information about any ongoing transmit operations. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">buffer<\/td><td><p style=\"color:inherit\">Pointer to the current data buffer.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">itemsSent<\/td><td><p style=\"color:inherit\">Current bytes sent count.<\/p><\/td><\/tr><tr><td>[out]<\/td><td class=\"paramname\">itemsRemaining<\/td><td><p style=\"color:inherit\">Current bytes remaining count.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">UART status. <\/p><\/li><\/ul><br><div>Definition at line <code>396<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_GetReceiveDepth<span id=\"uartdrv-get-receive-depth\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-get-receive-depth\">#<\/a><\/span><\/h3><blockquote>uint8_t UARTDRV_GetReceiveDepth (UARTDRV_Handle_t handle)<\/blockquote><p style=\"color:inherit\">Return the number of queued receive operations. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">The number of queued operations. <\/p><\/li><\/ul><br><div>Definition at line <code>401<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_GetTransmitDepth<span id=\"uartdrv-get-transmit-depth\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-get-transmit-depth\">#<\/a><\/span><\/h3><blockquote>uint8_t UARTDRV_GetTransmitDepth (UARTDRV_Handle_t handle)<\/blockquote><p style=\"color:inherit\">Returns the number of queued transmit operations. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">The number of queued operations. <\/p><\/li><\/ul><br><div>Definition at line <code>403<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_Transmit<span id=\"uartdrv-transmit\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-transmit\">#<\/a><\/span><\/h3><blockquote>Ecode_t UARTDRV_Transmit (UARTDRV_Handle_t handle, uint8_t *data, UARTDRV_Count_t count, UARTDRV_Callback_t callback)<\/blockquote><p style=\"color:inherit\">Start a non-blocking transmit. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">data<\/td><td><p style=\"color:inherit\">A transmit data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">A number of bytes to transmit.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">A transfer completion callback.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> on success. <\/p><\/li><\/ul><br><div>Definition at line <code>405<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_Receive<span id=\"uartdrv-receive\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-receive\">#<\/a><\/span><\/h3><blockquote>Ecode_t UARTDRV_Receive (UARTDRV_Handle_t handle, uint8_t *data, UARTDRV_Count_t count, UARTDRV_Callback_t callback)<\/blockquote><p style=\"color:inherit\">Start a non-blocking receive. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">data<\/td><td><p style=\"color:inherit\">A receive data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">A number of bytes received.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">A transfer completion callback.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> on success. <\/p><\/li><\/ul><br><div>Definition at line <code>410<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_TransmitB<span id=\"uartdrv-transmit-b\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-transmit-b\">#<\/a><\/span><\/h3><blockquote>Ecode_t UARTDRV_TransmitB (UARTDRV_Handle_t handle, uint8_t *data, UARTDRV_Count_t count)<\/blockquote><p style=\"color:inherit\">Start a blocking transmit. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">data<\/td><td><p style=\"color:inherit\">A transmit data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">A number of bytes to transmit.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> on success. <\/p><\/li><\/ul><br><div>Definition at line <code>415<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_ReceiveB<span id=\"uartdrv-receive-b\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-receive-b\">#<\/a><\/span><\/h3><blockquote>Ecode_t UARTDRV_ReceiveB (UARTDRV_Handle_t handle, uint8_t *data, UARTDRV_Count_t count)<\/blockquote><p style=\"color:inherit\">Start a blocking receive. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">data<\/td><td><p style=\"color:inherit\">A receive data buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">A number of bytes received.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> on success. <\/p><\/li><\/ul><br><div>Definition at line <code>419<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_ForceTransmit<span id=\"uartdrv-force-transmit\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-force-transmit\">#<\/a><\/span><\/h3><blockquote>Ecode_t UARTDRV_ForceTransmit (UARTDRV_Handle_t handle, uint8_t *data, UARTDRV_Count_t count)<\/blockquote><p style=\"color:inherit\">Direct transmit without interrupts or callback. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">data<\/td><td><p style=\"color:inherit\">Pointer to the buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">count<\/td><td><p style=\"color:inherit\">A number of bytes to transmit.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">This is a blocking function. that ignores flow control if enabled.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> on success. <\/p><\/li><\/ul><br><div>Definition at line <code>423<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_ForceReceive<span id=\"uartdrv-force-receive\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-force-receive\">#<\/a><\/span><\/h3><blockquote>UARTDRV_Count_t UARTDRV_ForceReceive (UARTDRV_Handle_t handle, uint8_t *data, UARTDRV_Count_t maxLength)<\/blockquote><p style=\"color:inherit\">Direct receive without interrupts or callback. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">data<\/td><td><p style=\"color:inherit\">pointer to buffer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">maxCount<\/td><td><p style=\"color:inherit\">Maximum number of bytes to receive.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">This is a blocking function.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">Number of bytes received. <\/p><\/li><\/ul><br><div>Definition at line <code>427<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_Abort<span id=\"uartdrv-abort\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-abort\">#<\/a><\/span><\/h3><blockquote>Ecode_t UARTDRV_Abort (UARTDRV_Handle_t handle, UARTDRV_AbortType_t type)<\/blockquote><p style=\"color:inherit\">Abort ongoing UART transfers. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">type<\/td><td><p style=\"color:inherit\">Abort type \u2013 whether to abort only Tx, only Rx, or both.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">All ongoing or queued operations of the given abort type will be aborted.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> on success, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-idle\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_IDLE<\/a> if the UART is idle. On failure, an appropriate UARTDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>431<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_PauseTransmit<span id=\"uartdrv-pause-transmit\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-pause-transmit\">#<\/a><\/span><\/h3><blockquote>Ecode_t UARTDRV_PauseTransmit (UARTDRV_Handle_t handle)<\/blockquote><p style=\"color:inherit\">Pause an ongoing transmit operation. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> on success. On failure, an appropriate UARTDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>433<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_ResumeTransmit<span id=\"uartdrv-resume-transmit\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-resume-transmit\">#<\/a><\/span><\/h3><blockquote>Ecode_t UARTDRV_ResumeTransmit (UARTDRV_Handle_t handle)<\/blockquote><p style=\"color:inherit\">Resume a paused transmit operation. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> on success. On failure, an appropriate UARTDRV <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/ecode#ecode-t\" target=\"_blank\" rel=\"\">Ecode_t<\/a> is returned. <\/p><\/li><\/ul><br><div>Definition at line <code>435<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_FlowControlGetSelfStatus<span id=\"uartdrv-flow-control-get-self-status\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-flow-control-get-self-status\">#<\/a><\/span><\/h3><blockquote>UARTDRV_FlowControlState_t UARTDRV_FlowControlGetSelfStatus (UARTDRV_Handle_t handle)<\/blockquote><p style=\"color:inherit\">Check the self flow control status. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">Returns uartdrvFlowControlOn if requesting to send. <\/p><\/li><\/ul><br><div>Definition at line <code>437<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_FlowControlGetPeerStatus<span id=\"uartdrv-flow-control-get-peer-status\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-flow-control-get-peer-status\">#<\/a><\/span><\/h3><blockquote>UARTDRV_FlowControlState_t UARTDRV_FlowControlGetPeerStatus (UARTDRV_Handle_t handle)<\/blockquote><p style=\"color:inherit\">Check the peer's flow control status. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">Returns uartdrvFlowControlOn if clear to send. <\/p><\/li><\/ul><br><div>Definition at line <code>439<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_FlowControlSet<span id=\"uartdrv-flow-control-set\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-flow-control-set\">#<\/a><\/span><\/h3><blockquote>Ecode_t UARTDRV_FlowControlSet (UARTDRV_Handle_t handle, UARTDRV_FlowControlState_t state)<\/blockquote><p style=\"color:inherit\">Set UART flow control state. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">state<\/td><td><p style=\"color:inherit\">Flow control state.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Set nRTS pin if hardware flow control is enabled. Send XON/XOFF if software flow control is enabled.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> on success. <\/p><\/li><\/ul><br><div>Definition at line <code>441<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_FlowControlSetPeerStatus<span id=\"uartdrv-flow-control-set-peer-status\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-flow-control-set-peer-status\">#<\/a><\/span><\/h3><blockquote>Ecode_t UARTDRV_FlowControlSetPeerStatus (UARTDRV_Handle_t handle, UARTDRV_FlowControlState_t state)<\/blockquote><p style=\"color:inherit\">Set peer UART flow control state. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">state<\/td><td><p style=\"color:inherit\">Flow control state.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Pause/resume transmit accordingly. Only for manual software flow control.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> on success. <\/p><\/li><\/ul><br><div>Definition at line <code>443<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><div><h3>UARTDRV_FlowControlIgnoreRestrain<span id=\"uartdrv-flow-control-ignore-restrain\" class=\"self-anchor\"><a class=\"perm\" href=\"#uartdrv-flow-control-ignore-restrain\">#<\/a><\/span><\/h3><blockquote>Ecode_t UARTDRV_FlowControlIgnoreRestrain (UARTDRV_Handle_t handle)<\/blockquote><p style=\"color:inherit\">Enable transmission when restrained by flow control. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to a UART driver handle.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv-error-codes#ecode-emdrv-uartdrv-ok\" target=\"_blank\" rel=\"\">ECODE_EMDRV_UARTDRV_OK<\/a> on success. <\/p><\/li><\/ul><br><div>Definition at line <code>445<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><\/div><div class=\"def-class-section\"><h2>Macro Definition Documentation<span id=\"define-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#define-definition\">#<\/a><\/span><\/h2><div><h3>DEFINE_BUF_QUEUE<span id=\"define-buf-queue\" class=\"self-anchor\"><a class=\"perm\" href=\"#define-buf-queue\">#<\/a><\/span><\/h3><blockquote>#define DEFINE_BUF_QUEUE<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  typedef struct {                     \\<\/div><div class=\"macro\">    uint16_t head;                     \\<\/div><div class=\"macro\">    uint16_t tail;                     \\<\/div><div class=\"macro\">    volatile uint16_t used;            \\<\/div><div class=\"macro\">    const uint16_t size;               \\<\/div><div class=\"macro\">    UARTDRV_Buffer_t fifo[qSize];      \\<\/div><div class=\"macro\">  } _##qName;                          \\<\/div><div class=\"macro\">  static volatile _##qName qName =     \\<\/div><div class=\"macro\">  {                                    \\<\/div><div class=\"macro\">    .head = 0,                         \\<\/div><div class=\"macro\">    .tail = 0,                         \\<\/div><div class=\"macro\">    .used = 0,                         \\<\/div><div class=\"macro\">    .size = qSize,                     \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">Macros to define FIFO and buffer queues. <\/p><p style=\"color:inherit\">typedef can't be used because the size of the FIFO array in the queues can change. <\/p><br><div>Definition at line <code>194<\/code> of file <code>platform/emdrv/uartdrv/inc/uartdrv.h<\/code><\/div><br><\/div><\/div><\/div><\/article><footer class=\"footer-commons-msg\"><\/footer><div ub-in-page=\"6062051aebaf71079a7b414b\" class=\"hidden-lg\"><\/div>","url":"http://docs.silabs.com/gecko-platform/4.3/platform-driver/uartdrv","status":"success"}
