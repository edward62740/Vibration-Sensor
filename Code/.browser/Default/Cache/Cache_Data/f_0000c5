{"html":"<article><div class=\"textblock\"><h1>LDMA - Linked DMA<span id=\"ldma-linked-dma\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-linked-dma\">#<\/a><\/span><\/h1><p style=\"color:inherit\">Linked Direct Memory Access (LDMA) Peripheral API. <\/p><p style=\"color:inherit\">LDMA API functions provide full support for the LDMA peripheral.<\/p><p style=\"color:inherit\">LDMA supports these DMA transfer types:<\/p><ul><li><p style=\"color:inherit\">Memory to memory. <\/p><\/li><li><p style=\"color:inherit\">Memory to peripheral. <\/p><\/li><li><p style=\"color:inherit\">Peripheral to memory. <\/p><\/li><li><p style=\"color:inherit\">Peripheral to peripheral. <\/p><\/li><li><p style=\"color:inherit\">Constant value to memory.<\/p><\/li><\/ul><p style=\"color:inherit\">\nLDMA supports linked lists of DMA descriptors allowing:<\/p><ul><li><p style=\"color:inherit\">Circular and ping-pong buffer transfers. <\/p><\/li><li><p style=\"color:inherit\">Scatter-gather transfers. <\/p><\/li><li><p style=\"color:inherit\">Looped transfers.<\/p><\/li><\/ul><p style=\"color:inherit\">\nLDMA has some advanced features:<\/p><ul><li><p style=\"color:inherit\">Intra-channel synchronization (SYNC), allowing hardware events to pause and restart a DMA sequence. <\/p><\/li><li><p style=\"color:inherit\">Immediate-write (WRI), allowing DMA to write a constant anywhere in the memory map. <\/p><\/li><li><p style=\"color:inherit\">Complex flow control allowing if-else constructs.<\/p><\/li><\/ul><p style=\"color:inherit\">\nBasic understanding of LDMA controller is assumed. Please refer to the reference manual for further details. The LDMA examples described in the reference manual are particularly helpful in understanding LDMA operations.<\/p><p style=\"color:inherit\">In order to use the DMA controller, the initialization function <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-emlib-efr32xg24/ldma#ldma-init\" target=\"_blank\" rel=\"\">LDMA_Init()<\/a> must have been executed once (normally during system initialization).<\/p><p style=\"color:inherit\">DMA transfers are initiated by a call to <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-emlib-efr32xg24/ldma#ldma-start-transfer\" target=\"_blank\" rel=\"\">LDMA_StartTransfer()<\/a>, transfer properties are controlled by the contents of <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-emlib-efr32xg24/ldma-transfer-cfg-t\" target=\"_blank\" rel=\"\">LDMA_TransferCfg_t<\/a> and <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-emlib-efr32xg24/ldma-descriptor-t\" target=\"_blank\" rel=\"\">LDMA_Descriptor_t<\/a> structure parameters. The <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-emlib-efr32xg24/ldma-descriptor-t\" target=\"_blank\" rel=\"\">LDMA_Descriptor_t<\/a> structure parameter may be a pointer to an array of descriptors, descriptors in array should be linked together as needed.<\/p><p style=\"color:inherit\">Transfer and descriptor initialization macros are provided for the most common transfer types. Due to the flexibility of LDMA peripheral, only a small subset of all possible initializer macros are provided, users should create new ones when needed.<\/p><p style=\"color:inherit\"><strong> Examples of LDMA usage: <\/strong><\/p><p style=\"color:inherit\">A simple memory to memory transfer:<\/p><pre class=\"language-clike\"><code class=\"language-clike\"><span class=\"token comment\">/* A single transfer of 4 half words. */<\/span>\nstatic const LDMA_TransferCfg_t transferCfg <span class=\"token operator\">=<\/span> <span class=\"token function\">LDMA_TRANSFER_CFG_MEMORY<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\nstatic const LDMA_Descriptor_t desc <span class=\"token operator\">=<\/span> <span class=\"token function\">LDMA_DESCRIPTOR_SINGLE_M2M_HALF<\/span><span class=\"token punctuation\">(<\/span>src<span class=\"token punctuation\">,<\/span> dst<span class=\"token punctuation\">,<\/span> <span class=\"token number\">4<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\nvoid <span class=\"token function\">ldmaTransfer<\/span><span class=\"token punctuation\">(<\/span>void<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">/* Initialize the LDMA with default values. */<\/span>\n  LDMA_Init_t init <span class=\"token operator\">=<\/span> LDMA_INIT_DEFAULT<span class=\"token punctuation\">;<\/span>\n  <span class=\"token function\">LDMA_Init<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>init<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token comment\">/* Start the memory transfer */<\/span>\n  <span class=\"token function\">LDMA_StartTransfer<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>transferCfg<span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>desc<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre><p style=\"color:inherit\">\n A linked list of three memory to memory transfers:<\/p><pre class=\"language-clike\"><code class=\"language-clike\"><span class=\"token comment\">/* A transfer consisting of 3 descriptors linked together and each descriptor\n * transfers 4 words from the source to the destination. */<\/span>\nstatic const LDMA_TransferCfg_t transferCfg1 <span class=\"token operator\">=<\/span> <span class=\"token function\">LDMA_TRANSFER_CFG_MEMORY<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\nstatic const LDMA_Descriptor_t descList<span class=\"token punctuation\">[<\/span><span class=\"token punctuation\">]<\/span> <span class=\"token operator\">=<\/span>\n<span class=\"token punctuation\">{<\/span>\n  <span class=\"token function\">LDMA_DESCRIPTOR_LINKREL_M2M_WORD<\/span><span class=\"token punctuation\">(<\/span>src<span class=\"token punctuation\">,<\/span> dst<span class=\"token punctuation\">,<\/span> <span class=\"token number\">4<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span>\n  <span class=\"token function\">LDMA_DESCRIPTOR_LINKREL_M2M_WORD<\/span><span class=\"token punctuation\">(<\/span>src <span class=\"token operator\">+<\/span> <span class=\"token number\">4<\/span><span class=\"token punctuation\">,<\/span> dst <span class=\"token operator\">+<\/span> <span class=\"token number\">4<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">4<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span>\n  <span class=\"token function\">LDMA_DESCRIPTOR_SINGLE_M2M_WORD<\/span><span class=\"token punctuation\">(<\/span>src <span class=\"token operator\">+<\/span> <span class=\"token number\">8<\/span><span class=\"token punctuation\">,<\/span> dst <span class=\"token operator\">+<\/span> <span class=\"token number\">8<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">4<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n\nvoid <span class=\"token function\">ldmaLinkedTransfer<\/span><span class=\"token punctuation\">(<\/span>void<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">/* Initialize the LDMA with default values. */<\/span>\n  LDMA_Init_t init <span class=\"token operator\">=<\/span> LDMA_INIT_DEFAULT<span class=\"token punctuation\">;<\/span>\n  <span class=\"token function\">LDMA_Init<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>init<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token comment\">/* Start the linked memory transfer */<\/span>\n  <span class=\"token function\">LDMA_StartTransfer<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>transferCfg1<span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>descList<span class=\"token punctuation\">[<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre><p style=\"color:inherit\">\n DMA from serial port peripheral to memory:<\/p><pre class=\"language-clike\"><code class=\"language-clike\">#<span class=\"token keyword\">if<\/span> <span class=\"token operator\">!<\/span><span class=\"token function\">defined<\/span><span class=\"token punctuation\">(<\/span>USART1<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">&amp;&amp;<\/span> <span class=\"token function\">defined<\/span><span class=\"token punctuation\">(<\/span>USART0<span class=\"token punctuation\">)<\/span>\n<span class=\"token comment\">/* The LDMA transfer should be triggered by the USART0 RX data available signal. */<\/span>\nstatic const LDMA_TransferCfg_t usart0RxTransfer <span class=\"token operator\">=<\/span>\n  <span class=\"token function\">LDMA_TRANSFER_CFG_PERIPHERAL<\/span><span class=\"token punctuation\">(<\/span>ldmaPeripheralSignal_USART0_RXDATAV<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">/* Transfer 4 bytes from the USART0 RX FIFO to memory. */<\/span>\nstatic const LDMA_Descriptor_t usart0RxDesc <span class=\"token operator\">=<\/span>\n  <span class=\"token function\">LDMA_DESCRIPTOR_SINGLE_P2M_BYTE<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>USART0<span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span>RXDATA<span class=\"token punctuation\">,<\/span>  <span class=\"token comment\">// Peripheral address<\/span>\n                                  dst<span class=\"token punctuation\">,<\/span>              <span class=\"token comment\">// Destination (SRAM)<\/span>\n                                  <span class=\"token number\">4<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>               <span class=\"token comment\">// Number of byte transfers<\/span>\n\nvoid <span class=\"token function\">ldmaPeripheralTransfer<\/span><span class=\"token punctuation\">(<\/span>void<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">/* Initialize the LDMA with default values. */<\/span>\n  LDMA_Init_t init <span class=\"token operator\">=<\/span> LDMA_INIT_DEFAULT<span class=\"token punctuation\">;<\/span>\n  <span class=\"token function\">LDMA_Init<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>init<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token comment\">/* Start the peripheral transfer which is triggered by the USART0\n   * peripheral RXDATAV signal. */<\/span>\n  <span class=\"token function\">LDMA_StartTransfer<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>usart0RxTransfer<span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>usart0RxDesc<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n#elif <span class=\"token function\">defined<\/span><span class=\"token punctuation\">(<\/span>USART1<span class=\"token punctuation\">)<\/span>\n<span class=\"token comment\">/* The LDMA transfer should be triggered by the USART1 RX data available signal. */<\/span>\nstatic const LDMA_TransferCfg_t usart1RxTransfer <span class=\"token operator\">=<\/span>\n  <span class=\"token function\">LDMA_TRANSFER_CFG_PERIPHERAL<\/span><span class=\"token punctuation\">(<\/span>ldmaPeripheralSignal_USART1_RXDATAV<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">/* Transfer 4 bytes from the USART1 RX FIFO to memory. */<\/span>\nstatic const LDMA_Descriptor_t usart1RxDesc <span class=\"token operator\">=<\/span>\n  <span class=\"token function\">LDMA_DESCRIPTOR_SINGLE_P2M_BYTE<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>USART1<span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span>RXDATA<span class=\"token punctuation\">,<\/span>  <span class=\"token comment\">// Peripheral address<\/span>\n                                  dst<span class=\"token punctuation\">,<\/span>              <span class=\"token comment\">// Destination (SRAM)<\/span>\n                                  <span class=\"token number\">4<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>               <span class=\"token comment\">// Number of byte transfers<\/span>\n\nvoid <span class=\"token function\">ldmaPeripheralTransfer<\/span><span class=\"token punctuation\">(<\/span>void<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">/* Initialize the LDMA with default values. */<\/span>\n  LDMA_Init_t init <span class=\"token operator\">=<\/span> LDMA_INIT_DEFAULT<span class=\"token punctuation\">;<\/span>\n  <span class=\"token function\">LDMA_Init<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>init<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token comment\">/* Start the peripheral transfer which is triggered by the USART1\n   * peripheral RXDATAV signal. */<\/span>\n  <span class=\"token function\">LDMA_StartTransfer<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>usart1RxTransfer<span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>usart1RxDesc<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n#elif <span class=\"token function\">defined<\/span><span class=\"token punctuation\">(<\/span>EUSART0<span class=\"token punctuation\">)<\/span>\n<span class=\"token comment\">/* The LDMA transfer should be triggered by the EUSART0 RX data available signal. */<\/span>\nstatic const LDMA_TransferCfg_t eusart0RxTransfer <span class=\"token operator\">=<\/span>\n  <span class=\"token function\">LDMA_TRANSFER_CFG_PERIPHERAL<\/span><span class=\"token punctuation\">(<\/span>ldmaPeripheralSignal_EUSART0_RXFL<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">/* Transfer 4 bytes from the EUSART0 RX FIFO to memory. */<\/span>\nstatic const LDMA_Descriptor_t eusart0RxDesc <span class=\"token operator\">=<\/span>\n  <span class=\"token function\">LDMA_DESCRIPTOR_SINGLE_P2M_BYTE<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>EUSART0<span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span>RXDATA<span class=\"token punctuation\">,<\/span>  <span class=\"token comment\">// Peripheral address<\/span>\n                                  dst<span class=\"token punctuation\">,<\/span>               <span class=\"token comment\">// Destination (SRAM)<\/span>\n                                  <span class=\"token number\">4<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>                <span class=\"token comment\">// Number of byte transfers<\/span>\n\nvoid <span class=\"token function\">ldmaPeripheralTransfer<\/span><span class=\"token punctuation\">(<\/span>void<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">/* Initialize the LDMA with default values. */<\/span>\n  LDMA_Init_t init <span class=\"token operator\">=<\/span> LDMA_INIT_DEFAULT<span class=\"token punctuation\">;<\/span>\n  <span class=\"token function\">LDMA_Init<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>init<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token comment\">/* Start the peripheral transfer which is triggered by the EUSART0\n   * peripheral RXFL signal. */<\/span>\n  <span class=\"token function\">LDMA_StartTransfer<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>eusart0RxTransfer<span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>eusart0RxDesc<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n\n#endif\n<\/code><\/pre><p style=\"color:inherit\">\n Ping-pong DMA from serial port peripheral to memory:<\/p><pre class=\"language-clike\"><code class=\"language-clike\">#<span class=\"token keyword\">if<\/span> <span class=\"token operator\">!<\/span><span class=\"token function\">defined<\/span><span class=\"token punctuation\">(<\/span>USART1<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">&amp;&amp;<\/span> <span class=\"token function\">defined<\/span><span class=\"token punctuation\">(<\/span>USART0<span class=\"token punctuation\">)<\/span>\n<span class=\"token comment\">/* Two buffers used in the ping-pong transfer from USART0. */<\/span>\nstatic volatile uint8_t buffer0<span class=\"token punctuation\">[<\/span><span class=\"token number\">5<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">;<\/span>\nstatic volatile uint8_t buffer1<span class=\"token punctuation\">[<\/span><span class=\"token number\">5<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">/* The LDMA transfer should be triggered by the USART0 RX data available signal. */<\/span>\nstatic const LDMA_TransferCfg_t usart0Transfer <span class=\"token operator\">=<\/span>\n  <span class=\"token function\">LDMA_TRANSFER_CFG_PERIPHERAL<\/span><span class=\"token punctuation\">(<\/span>ldmaPeripheralSignal_USART0_RXDATAV<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">/* Both descriptors transfer 5 bytes from the USART0 rx data register into\n * one of the buffers. Note that the first descriptor uses a relative address\n * of 1 to link to the next descriptor, while the last descriptor uses a\n * relative address of -1 to link to the first descriptor. */<\/span>\nstatic const LDMA_Descriptor_t rxLoop<span class=\"token punctuation\">[<\/span><span class=\"token punctuation\">]<\/span> <span class=\"token operator\">=<\/span>\n<span class=\"token punctuation\">{<\/span>\n  <span class=\"token function\">LDMA_DESCRIPTOR_LINKREL_P2M_BYTE<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>USART0<span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span>RXDATA<span class=\"token punctuation\">,<\/span> buffer0<span class=\"token punctuation\">,<\/span> <span class=\"token number\">5<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span>\n  <span class=\"token function\">LDMA_DESCRIPTOR_LINKREL_P2M_BYTE<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>USART0<span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span>RXDATA<span class=\"token punctuation\">,<\/span> buffer1<span class=\"token punctuation\">,<\/span> <span class=\"token number\">5<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token operator\">-<\/span><span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n\nvoid <span class=\"token function\">ldmaPingPongTransfer<\/span><span class=\"token punctuation\">(<\/span>void<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">/* Initialize the LDMA with default values. */<\/span>\n  LDMA_Init_t init <span class=\"token operator\">=<\/span> LDMA_INIT_DEFAULT<span class=\"token punctuation\">;<\/span>\n  <span class=\"token function\">LDMA_Init<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>init<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token comment\">/* Start the peripheral transfer which is triggered by the USART0\n   * peripheral RXDATAV signal. */<\/span>\n  <span class=\"token function\">LDMA_StartTransfer<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>usart0Transfer<span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>rxLoop<span class=\"token punctuation\">[<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n#elif <span class=\"token function\">defined<\/span><span class=\"token punctuation\">(<\/span>USART1<span class=\"token punctuation\">)<\/span>\n<span class=\"token comment\">/* Two buffers used in the ping-pong transfer from USART1. */<\/span>\nstatic volatile uint8_t buffer0<span class=\"token punctuation\">[<\/span><span class=\"token number\">5<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">;<\/span>\nstatic volatile uint8_t buffer1<span class=\"token punctuation\">[<\/span><span class=\"token number\">5<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">/* The LDMA transfer should be triggered by the USART1 RX data available signal. */<\/span>\nstatic const LDMA_TransferCfg_t usart1Transfer <span class=\"token operator\">=<\/span>\n  <span class=\"token function\">LDMA_TRANSFER_CFG_PERIPHERAL<\/span><span class=\"token punctuation\">(<\/span>ldmaPeripheralSignal_USART1_RXDATAV<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">/* Both descriptors transfer 5 bytes from the USART1 rx data register into\n * one of the buffers. Note that the first descriptor uses a relative address\n * of 1 to link to the next descriptor, while the last descriptor uses a\n * relative address of -1 to link to the first descriptor. */<\/span>\nstatic const LDMA_Descriptor_t rxLoop<span class=\"token punctuation\">[<\/span><span class=\"token punctuation\">]<\/span> <span class=\"token operator\">=<\/span>\n<span class=\"token punctuation\">{<\/span>\n  <span class=\"token function\">LDMA_DESCRIPTOR_LINKREL_P2M_BYTE<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>USART1<span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span>RXDATA<span class=\"token punctuation\">,<\/span> buffer0<span class=\"token punctuation\">,<\/span> <span class=\"token number\">5<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span>\n  <span class=\"token function\">LDMA_DESCRIPTOR_LINKREL_P2M_BYTE<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>USART1<span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span>RXDATA<span class=\"token punctuation\">,<\/span> buffer1<span class=\"token punctuation\">,<\/span> <span class=\"token number\">5<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token operator\">-<\/span><span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n\nvoid <span class=\"token function\">ldmaPingPongTransfer<\/span><span class=\"token punctuation\">(<\/span>void<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">/* Initialize the LDMA with default values. */<\/span>\n  LDMA_Init_t init <span class=\"token operator\">=<\/span> LDMA_INIT_DEFAULT<span class=\"token punctuation\">;<\/span>\n  <span class=\"token function\">LDMA_Init<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>init<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token comment\">/* Start the peripheral transfer which is triggered by the USART1\n   * peripheral RXDATAV signal. */<\/span>\n  <span class=\"token function\">LDMA_StartTransfer<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>usart1Transfer<span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>rxLoop<span class=\"token punctuation\">[<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n#elif <span class=\"token function\">defined<\/span><span class=\"token punctuation\">(<\/span>EUSART0<span class=\"token punctuation\">)<\/span>\n<span class=\"token comment\">/* Two buffers used in the ping-pong transfer from EUSART0. */<\/span>\nstatic volatile uint8_t buffer0<span class=\"token punctuation\">[<\/span><span class=\"token number\">5<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">;<\/span>\nstatic volatile uint8_t buffer1<span class=\"token punctuation\">[<\/span><span class=\"token number\">5<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">/* The LDMA transfer should be triggered by the EUSART0 RX data available signal. */<\/span>\nstatic const LDMA_TransferCfg_t eusart0Transfer <span class=\"token operator\">=<\/span>\n  <span class=\"token function\">LDMA_TRANSFER_CFG_PERIPHERAL<\/span><span class=\"token punctuation\">(<\/span>ldmaPeripheralSignal_EUSART0_RXFL<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n<span class=\"token comment\">/* Both descriptors transfer 5 bytes from the EUSART0 rx data register into\n * one of the buffers. Note that the first descriptor uses a relative address\n * of 1 to link to the next descriptor, while the last descriptor uses a\n * relative address of -1 to link to the first descriptor. */<\/span>\nstatic const LDMA_Descriptor_t rxLoop<span class=\"token punctuation\">[<\/span><span class=\"token punctuation\">]<\/span> <span class=\"token operator\">=<\/span>\n<span class=\"token punctuation\">{<\/span>\n  <span class=\"token function\">LDMA_DESCRIPTOR_LINKREL_P2M_BYTE<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>EUSART0<span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span>RXDATA<span class=\"token punctuation\">,<\/span> buffer0<span class=\"token punctuation\">,<\/span> <span class=\"token number\">5<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">,<\/span>\n  <span class=\"token function\">LDMA_DESCRIPTOR_LINKREL_P2M_BYTE<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>EUSART0<span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span>RXDATA<span class=\"token punctuation\">,<\/span> buffer1<span class=\"token punctuation\">,<\/span> <span class=\"token number\">5<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token operator\">-<\/span><span class=\"token number\">1<\/span><span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">}<\/span><span class=\"token punctuation\">;<\/span>\n\nvoid <span class=\"token function\">ldmaPingPongTransfer<\/span><span class=\"token punctuation\">(<\/span>void<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">/* Initialize the LDMA with default values. */<\/span>\n  LDMA_Init_t init <span class=\"token operator\">=<\/span> LDMA_INIT_DEFAULT<span class=\"token punctuation\">;<\/span>\n  <span class=\"token function\">LDMA_Init<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>init<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token comment\">/* Start the peripheral transfer which is triggered by the EUSART0\n   * peripheral RXFL signal. */<\/span>\n  <span class=\"token function\">LDMA_StartTransfer<\/span><span class=\"token punctuation\">(<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>eusart0Transfer<span class=\"token punctuation\">,<\/span> <span class=\"token operator\">&amp;<\/span>rxLoop<span class=\"token punctuation\">[<\/span><span class=\"token number\">0<\/span><span class=\"token punctuation\">]<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n#endif\n<\/code><\/pre><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">LDMA module does not implement LDMA interrupt handler. A template for an LDMA IRQ handler is included here as an example.<\/p><\/li><\/ul><pre class=\"language-clike\"><code class=\"language-clike\"><span class=\"token comment\">/* Template for an LDMA IRQ handler. */<\/span>\nvoid <span class=\"token function\">LDMA_IRQHandler<\/span><span class=\"token punctuation\">(<\/span>void<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">{<\/span>\n  uint32_t ch<span class=\"token punctuation\">;<\/span>\n  <span class=\"token comment\">/* Get all pending and enabled interrupts. */<\/span>\n  uint32_t pending <span class=\"token operator\">=<\/span> <span class=\"token function\">LDMA_IntGetEnabled<\/span><span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token comment\">/* Loop here on an LDMA error to enable debugging. */<\/span>\n  <span class=\"token keyword\">while<\/span> <span class=\"token punctuation\">(<\/span>pending <span class=\"token operator\">&amp;<\/span> LDMA_IF_ERROR<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n  <span class=\"token punctuation\">}<\/span>\n\n  <span class=\"token comment\">/* Iterate over all LDMA channels. */<\/span>\n  <span class=\"token keyword\">for<\/span> <span class=\"token punctuation\">(<\/span>ch <span class=\"token operator\">=<\/span> <span class=\"token number\">0<\/span><span class=\"token punctuation\">;<\/span> ch <span class=\"token operator\">&lt;<\/span> DMA_CHAN_COUNT<span class=\"token punctuation\">;<\/span> ch<span class=\"token operator\">++<\/span><span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    uint32_t mask <span class=\"token operator\">=<\/span> <span class=\"token number\">0x1<\/span> <span class=\"token operator\">&lt;<\/span><span class=\"token operator\">&lt;<\/span> ch<span class=\"token punctuation\">;<\/span>\n    <span class=\"token keyword\">if<\/span> <span class=\"token punctuation\">(<\/span>pending <span class=\"token operator\">&amp;<\/span> mask<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n      <span class=\"token comment\">/* Clear interrupt flag. */<\/span>\n\n#<span class=\"token keyword\">if<\/span> defined <span class=\"token punctuation\">(<\/span>LDMA_HAS_SET_CLEAR<span class=\"token punctuation\">)<\/span>\n      LDMA<span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span>IF_CLR <span class=\"token operator\">=<\/span> mask<span class=\"token punctuation\">;<\/span>\n#<span class=\"token keyword\">else<\/span>\n      LDMA<span class=\"token operator\">-<\/span><span class=\"token operator\">&gt;<\/span>IFC <span class=\"token operator\">=<\/span> mask<span class=\"token punctuation\">;<\/span>\n#endif\n\n      <span class=\"token comment\">/* Do more stuff here, execute callbacks etc. */<\/span>\n    <span class=\"token punctuation\">}<\/span>\n  <span class=\"token punctuation\">}<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre><h2>Modules<span id=\"modules\" class=\"self-anchor\"><a class=\"perm\" href=\"#modules\">#<\/a><\/span><\/h2><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-emlib-efr32xg24/ldma-descriptor-t\" target=\"_blank\" rel=\"\">LDMA_Descriptor_t<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-emlib-efr32xg24/ldma-init-t\" target=\"_blank\" rel=\"\">LDMA_Init_t<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-emlib-efr32xg24/ldma-transfer-cfg-t\" target=\"_blank\" rel=\"\">LDMA_TransferCfg_t<\/a><\/p><div class=\"decl-class-section\"><h2>Enumerations<span id=\"enum-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#enum-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-ctrl-block-size-t\">LDMA_CtrlBlockSize_t<\/a> {<\/div><div class=\"enum\">ldmaCtrlBlockSizeUnit1 = _LDMA_CH_CTRL_BLOCKSIZE_UNIT1<\/div><div class=\"enum\">ldmaCtrlBlockSizeUnit2 = _LDMA_CH_CTRL_BLOCKSIZE_UNIT2<\/div><div class=\"enum\">ldmaCtrlBlockSizeUnit3 = _LDMA_CH_CTRL_BLOCKSIZE_UNIT3<\/div><div class=\"enum\">ldmaCtrlBlockSizeUnit4 = _LDMA_CH_CTRL_BLOCKSIZE_UNIT4<\/div><div class=\"enum\">ldmaCtrlBlockSizeUnit6 = _LDMA_CH_CTRL_BLOCKSIZE_UNIT6<\/div><div class=\"enum\">ldmaCtrlBlockSizeUnit8 = _LDMA_CH_CTRL_BLOCKSIZE_UNIT8<\/div><div class=\"enum\">ldmaCtrlBlockSizeUnit16 = _LDMA_CH_CTRL_BLOCKSIZE_UNIT16<\/div><div class=\"enum\">ldmaCtrlBlockSizeUnit32 = _LDMA_CH_CTRL_BLOCKSIZE_UNIT32<\/div><div class=\"enum\">ldmaCtrlBlockSizeUnit64 = _LDMA_CH_CTRL_BLOCKSIZE_UNIT64<\/div><div class=\"enum\">ldmaCtrlBlockSizeUnit128 = _LDMA_CH_CTRL_BLOCKSIZE_UNIT128<\/div><div class=\"enum\">ldmaCtrlBlockSizeUnit256 = _LDMA_CH_CTRL_BLOCKSIZE_UNIT256<\/div><div class=\"enum\">ldmaCtrlBlockSizeUnit512 = _LDMA_CH_CTRL_BLOCKSIZE_UNIT512<\/div><div class=\"enum\">ldmaCtrlBlockSizeUnit1024 = _LDMA_CH_CTRL_BLOCKSIZE_UNIT1024<\/div><div class=\"enum\">ldmaCtrlBlockSizeAll = _LDMA_CH_CTRL_BLOCKSIZE_ALL<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Controls the number of unit data transfers per arbitration cycle, providing a means to balance DMA channels' load on the controller. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-ctrl-struct-type-t\">LDMA_CtrlStructType_t<\/a> {<\/div><div class=\"enum\">ldmaCtrlStructTypeXfer = _LDMA_CH_CTRL_STRUCTTYPE_TRANSFER<\/div><div class=\"enum\">ldmaCtrlStructTypeSync = _LDMA_CH_CTRL_STRUCTTYPE_SYNCHRONIZE<\/div><div class=\"enum\">ldmaCtrlStructTypeWrite = _LDMA_CH_CTRL_STRUCTTYPE_WRITE<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA structure type. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-ctrl-req-mode-t\">LDMA_CtrlReqMode_t<\/a> {<\/div><div class=\"enum\">ldmaCtrlReqModeBlock = _LDMA_CH_CTRL_REQMODE_BLOCK<\/div><div class=\"enum\">ldmaCtrlReqModeAll = _LDMA_CH_CTRL_REQMODE_ALL<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA transfer block or cycle selector. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-ctrl-src-inc-t\">LDMA_CtrlSrcInc_t<\/a> {<\/div><div class=\"enum\">ldmaCtrlSrcIncOne = _LDMA_CH_CTRL_SRCINC_ONE<\/div><div class=\"enum\">ldmaCtrlSrcIncTwo = _LDMA_CH_CTRL_SRCINC_TWO<\/div><div class=\"enum\">ldmaCtrlSrcIncFour = _LDMA_CH_CTRL_SRCINC_FOUR<\/div><div class=\"enum\">ldmaCtrlSrcIncNone = _LDMA_CH_CTRL_SRCINC_NONE<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Source address increment unit size. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-ctrl-size-t\">LDMA_CtrlSize_t<\/a> {<\/div><div class=\"enum\">ldmaCtrlSizeByte = _LDMA_CH_CTRL_SIZE_BYTE<\/div><div class=\"enum\">ldmaCtrlSizeHalf = _LDMA_CH_CTRL_SIZE_HALFWORD<\/div><div class=\"enum\">ldmaCtrlSizeWord = _LDMA_CH_CTRL_SIZE_WORD<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA transfer unit size. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-ctrl-dst-inc-t\">LDMA_CtrlDstInc_t<\/a> {<\/div><div class=\"enum\">ldmaCtrlDstIncOne = _LDMA_CH_CTRL_DSTINC_ONE<\/div><div class=\"enum\">ldmaCtrlDstIncTwo = _LDMA_CH_CTRL_DSTINC_TWO<\/div><div class=\"enum\">ldmaCtrlDstIncFour = _LDMA_CH_CTRL_DSTINC_FOUR<\/div><div class=\"enum\">ldmaCtrlDstIncNone = _LDMA_CH_CTRL_DSTINC_NONE<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Destination address increment unit size. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-ctrl-src-addr-mode-t\">LDMA_CtrlSrcAddrMode_t<\/a> {<\/div><div class=\"enum\">ldmaCtrlSrcAddrModeAbs = _LDMA_CH_CTRL_SRCMODE_ABSOLUTE<\/div><div class=\"enum\">ldmaCtrlSrcAddrModeRel = _LDMA_CH_CTRL_SRCMODE_RELATIVE<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Source addressing mode. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-ctrl-dst-addr-mode-t\">LDMA_CtrlDstAddrMode_t<\/a> {<\/div><div class=\"enum\">ldmaCtrlDstAddrModeAbs = _LDMA_CH_CTRL_DSTMODE_ABSOLUTE<\/div><div class=\"enum\">ldmaCtrlDstAddrModeRel = _LDMA_CH_CTRL_DSTMODE_RELATIVE<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Destination addressing mode. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-link-mode-t\">LDMA_LinkMode_t<\/a> {<\/div><div class=\"enum\">ldmaLinkModeAbs = _LDMA_CH_LINK_LINKMODE_ABSOLUTE<\/div><div class=\"enum\">ldmaLinkModeRel = _LDMA_CH_LINK_LINKMODE_RELATIVE<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA link load address mode. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-cfg-arb-slots-t\">LDMA_CfgArbSlots_t<\/a> {<\/div><div class=\"enum\">ldmaCfgArbSlotsAs1 = _LDMA_CH_CFG_ARBSLOTS_ONE<\/div><div class=\"enum\">ldmaCfgArbSlotsAs2 = _LDMA_CH_CFG_ARBSLOTS_TWO<\/div><div class=\"enum\">ldmaCfgArbSlotsAs4 = _LDMA_CH_CFG_ARBSLOTS_FOUR<\/div><div class=\"enum\">ldmaCfgArbSlotsAs8 = _LDMA_CH_CFG_ARBSLOTS_EIGHT<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Insert extra arbitration slots to increase channel arbitration priority. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-cfg-src-inc-sign-t\">LDMA_CfgSrcIncSign_t<\/a> {<\/div><div class=\"enum\">ldmaCfgSrcIncSignPos = _LDMA_CH_CFG_SRCINCSIGN_POSITIVE<\/div><div class=\"enum\">ldmaCfgSrcIncSignNeg = _LDMA_CH_CFG_SRCINCSIGN_NEGATIVE<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Source address increment sign. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-cfg-dst-inc-sign-t\">LDMA_CfgDstIncSign_t<\/a> {<\/div><div class=\"enum\">ldmaCfgDstIncSignPos = _LDMA_CH_CFG_DSTINCSIGN_POSITIVE<\/div><div class=\"enum\">ldmaCfgDstIncSignNeg = _LDMA_CH_CFG_DSTINCSIGN_NEGATIVE<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Destination address increment sign. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-peripheral-signal-t\">LDMA_PeripheralSignal_t<\/a> {<\/div><div class=\"enum\">ldmaPeripheralSignal_NONE = LDMAXBAR_CH_REQSEL_SOURCESEL_NONE<\/div><div class=\"enum\">ldmaPeripheralSignal_LDMAXBAR_PRSREQ0 = LDMAXBAR_CH_REQSEL_SIGSEL_LDMAXBARPRSREQ0 | LDMAXBAR_CH_REQSEL_SOURCESEL_LDMAXBAR<\/div><div class=\"enum\">ldmaPeripheralSignal_LDMAXBAR_PRSREQ1 = LDMAXBAR_CH_REQSEL_SIGSEL_LDMAXBARPRSREQ1 | LDMAXBAR_CH_REQSEL_SOURCESEL_LDMAXBAR<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER0_CC0 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER0CC0 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER0<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER0_CC1 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER0CC1 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER0<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER0_CC2 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER0CC2 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER0<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER0_UFOF = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER0UFOF | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER0<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER1_CC0 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER1CC0 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER1<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER1_CC1 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER1CC1 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER1<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER1_CC2 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER1CC2 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER1<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER1_UFOF = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER1UFOF | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER1<\/div><div class=\"enum\">ldmaPeripheralSignal_USART0_RXDATAV = LDMAXBAR_CH_REQSEL_SIGSEL_USART0RXDATAV | LDMAXBAR_CH_REQSEL_SOURCESEL_USART0<\/div><div class=\"enum\">ldmaPeripheralSignal_USART0_RXDATAVRIGHT = LDMAXBAR_CH_REQSEL_SIGSEL_USART0RXDATAVRIGHT | LDMAXBAR_CH_REQSEL_SOURCESEL_USART0<\/div><div class=\"enum\">ldmaPeripheralSignal_USART0_TXBL = LDMAXBAR_CH_REQSEL_SIGSEL_USART0TXBL | LDMAXBAR_CH_REQSEL_SOURCESEL_USART0<\/div><div class=\"enum\">ldmaPeripheralSignal_USART0_TXBLRIGHT = LDMAXBAR_CH_REQSEL_SIGSEL_USART0TXBLRIGHT | LDMAXBAR_CH_REQSEL_SOURCESEL_USART0<\/div><div class=\"enum\">ldmaPeripheralSignal_USART0_TXEMPTY = LDMAXBAR_CH_REQSEL_SIGSEL_USART0TXEMPTY | LDMAXBAR_CH_REQSEL_SOURCESEL_USART0<\/div><div class=\"enum\">ldmaPeripheralSignal_I2C0_RXDATAV = LDMAXBAR_CH_REQSEL_SIGSEL_I2C0RXDATAV | LDMAXBAR_CH_REQSEL_SOURCESEL_I2C0<\/div><div class=\"enum\">ldmaPeripheralSignal_I2C0_TXBL = LDMAXBAR_CH_REQSEL_SIGSEL_I2C0TXBL | LDMAXBAR_CH_REQSEL_SOURCESEL_I2C0<\/div><div class=\"enum\">ldmaPeripheralSignal_I2C1_RXDATAV = LDMAXBAR_CH_REQSEL_SIGSEL_I2C1RXDATAV | LDMAXBAR_CH_REQSEL_SOURCESEL_I2C1<\/div><div class=\"enum\">ldmaPeripheralSignal_I2C1_TXBL = LDMAXBAR_CH_REQSEL_SIGSEL_I2C1TXBL | LDMAXBAR_CH_REQSEL_SOURCESEL_I2C1<\/div><div class=\"enum\">ldmaPeripheralSignal_IADC0_IADC_SCAN = LDMAXBAR_CH_REQSEL_SIGSEL_IADC0IADC_SCAN | LDMAXBAR_CH_REQSEL_SOURCESEL_IADC0<\/div><div class=\"enum\">ldmaPeripheralSignal_IADC0_IADC_SINGLE = LDMAXBAR_CH_REQSEL_SIGSEL_IADC0IADC_SINGLE | LDMAXBAR_CH_REQSEL_SOURCESEL_IADC0<\/div><div class=\"enum\">ldmaPeripheralSignal_MSC_WDATA = LDMAXBAR_CH_REQSEL_SIGSEL_MSCWDATA | LDMAXBAR_CH_REQSEL_SOURCESEL_MSC<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER2_CC0 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER2CC0 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER2<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER2_CC1 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER2CC1 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER2<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER2_CC2 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER2CC2 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER2<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER2_UFOF = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER2UFOF | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER2<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER3_CC0 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER3CC0 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER3<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER3_CC1 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER3CC1 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER3<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER3_CC2 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER3CC2 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER3<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER3_UFOF = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER3UFOF | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER3<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER4_CC0 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER4CC0 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER4<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER4_CC1 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER4CC1 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER4<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER4_CC2 = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER4CC2 | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER4<\/div><div class=\"enum\">ldmaPeripheralSignal_TIMER4_UFOF = LDMAXBAR_CH_REQSEL_SIGSEL_TIMER4UFOF | LDMAXBAR_CH_REQSEL_SOURCESEL_TIMER4<\/div><div class=\"enum\">ldmaPeripheralSignal_VDAC0CH0REQ = LDMAXBAR_CH_REQSEL_SIGSEL_VDAC0CH0_REQ | LDMAXBAR_CH_REQSEL_SOURCESEL_VDAC0<\/div><div class=\"enum\">ldmaPeripheralSignal_VDAC0CH1REQ = LDMAXBAR_CH_REQSEL_SIGSEL_VDAC0CH1_REQ | LDMAXBAR_CH_REQSEL_SOURCESEL_VDAC0<\/div><div class=\"enum\">ldmaPeripheralSignal_VDAC1CH0REQ = LDMAXBAR_CH_REQSEL_SIGSEL_VDAC1CH0_REQ | LDMAXBAR_CH_REQSEL_SOURCESEL_VDAC1<\/div><div class=\"enum\">ldmaPeripheralSignal_VDAC1CH1REQ = LDMAXBAR_CH_REQSEL_SIGSEL_VDAC1CH1_REQ | LDMAXBAR_CH_REQSEL_SOURCESEL_VDAC1<\/div><div class=\"enum\">ldmaPeripheralSignal_EUSART0_RXFL = LDMAXBAR_CH_REQSEL_SIGSEL_EUSART0RXFL | LDMAXBAR_CH_REQSEL_SOURCESEL_EUSART0<\/div><div class=\"enum\">ldmaPeripheralSignal_EUSART0_TXFL = LDMAXBAR_CH_REQSEL_SIGSEL_EUSART0TXFL | LDMAXBAR_CH_REQSEL_SOURCESEL_EUSART0<\/div><div class=\"enum\">ldmaPeripheralSignal_EUSART1_RXFL = LDMAXBAR_CH_REQSEL_SIGSEL_EUSART1RXFL | LDMAXBAR_CH_REQSEL_SOURCESEL_EUSART1<\/div><div class=\"enum\">ldmaPeripheralSignal_EUSART1_TXFL = LDMAXBAR_CH_REQSEL_SIGSEL_EUSART1TXFL | LDMAXBAR_CH_REQSEL_SOURCESEL_EUSART1<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Peripherals that can trigger LDMA transfers. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"decl-class-section\"><h2>Functions<span id=\"func-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#func-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">void<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-de-init\">LDMA_DeInit<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">De-initialize the LDMA controller. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-enable-channel-request\">LDMA_EnableChannelRequest<\/a>(int ch, bool enable)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Enable or disable an LDMA channel request. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-init\">LDMA_Init<\/a>(const LDMA_Init_t *init)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Initialize the LDMA controller. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-start-transfer\">LDMA_StartTransfer<\/a>(int ch, const LDMA_TransferCfg_t *transfer, const LDMA_Descriptor_t *descriptor)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Start a DMA transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-stop-transfer\">LDMA_StopTransfer<\/a>(int ch)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Stop a DMA transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">bool<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-transfer-done\">LDMA_TransferDone<\/a>(int ch)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Check if a DMA transfer has completed. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-transfer-remaining-count\">LDMA_TransferRemainingCount<\/a>(int ch)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Get the number of items remaining in a transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">bool<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-channel-enabled\">LDMA_ChannelEnabled<\/a>(int ch)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Check if a certain channel is enabled. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-int-clear\">LDMA_IntClear<\/a>(uint32_t flags)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Clear one or more pending LDMA interrupts. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-int-disable\">LDMA_IntDisable<\/a>(uint32_t flags)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Disable one or more LDMA interrupts. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-int-enable\">LDMA_IntEnable<\/a>(uint32_t flags)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Enable one or more LDMA interrupts. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-int-get\">LDMA_IntGet<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Get pending LDMA interrupt flags. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-int-get-enabled\">LDMA_IntGetEnabled<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Get enabled and pending LDMA interrupt flags. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-int-set\">LDMA_IntSet<\/a>(uint32_t flags)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Set one or more pending LDMA interrupts. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"decl-class-section\"><h2>Macros<span id=\"define-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#define-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-non-extend-size-word\">LDMA_DESCRIPTOR_NON_EXTEND_SIZE_WORD<\/a> 4<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Size in words of a non-extended DMA descriptor. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-extend-size-word\">LDMA_DESCRIPTOR_EXTEND_SIZE_WORD<\/a> 7<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Size in words of an extended DMA descriptor. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-init-default\">LDMA_INIT_DEFAULT<\/a> undefined<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Default DMA initialization structure. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-transfer-cfg-memory\">LDMA_TRANSFER_CFG_MEMORY<\/a> ()<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Generic DMA transfer configuration for memory to memory transfers. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-transfer-cfg-memory-loop\">LDMA_TRANSFER_CFG_MEMORY_LOOP<\/a> (loopCnt)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Generic DMA transfer configuration for looped memory to memory transfers. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-transfer-cfg-peripheral\">LDMA_TRANSFER_CFG_PERIPHERAL<\/a> (signal)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Generic DMA transfer configuration for memory to/from peripheral transfers. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-transfer-cfg-peripheral-loop\">LDMA_TRANSFER_CFG_PERIPHERAL_LOOP<\/a> (signal, loopCnt)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Generic DMA transfer configuration for looped memory to/from peripheral transfers. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-single-m2-m-word\">LDMA_DESCRIPTOR_SINGLE_M2M_WORD<\/a> (src, dest, count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for single memory to memory word transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-single-m2-m-half\">LDMA_DESCRIPTOR_SINGLE_M2M_HALF<\/a> (src, dest, count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for single memory to memory half-word transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-single-m2-m-byte\">LDMA_DESCRIPTOR_SINGLE_M2M_BYTE<\/a> (src, dest, count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for single memory to memory byte transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-linkabs-m2-m-word\">LDMA_DESCRIPTOR_LINKABS_M2M_WORD<\/a> (src, dest, count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for linked memory to memory word transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-linkabs-m2-m-half\">LDMA_DESCRIPTOR_LINKABS_M2M_HALF<\/a> (src, dest, count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for linked memory to memory half-word transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-linkabs-m2-m-byte\">LDMA_DESCRIPTOR_LINKABS_M2M_BYTE<\/a> (src, dest, count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for linked memory to memory byte transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-linkrel-m2-m-word\">LDMA_DESCRIPTOR_LINKREL_M2M_WORD<\/a> (src, dest, count, linkjmp)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for linked memory to memory word transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-linkrel-m2-m-half\">LDMA_DESCRIPTOR_LINKREL_M2M_HALF<\/a> (src, dest, count, linkjmp)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for linked memory to memory half-word transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-linkrel-m2-m-byte\">LDMA_DESCRIPTOR_LINKREL_M2M_BYTE<\/a> (src, dest, count, linkjmp)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for linked memory to memory byte transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-single-p2-m-byte\">LDMA_DESCRIPTOR_SINGLE_P2M_BYTE<\/a> (src, dest, count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for byte transfers from a peripheral to memory. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-single-p2-p-byte\">LDMA_DESCRIPTOR_SINGLE_P2P_BYTE<\/a> (src, dest, count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for byte transfers from a peripheral to a peripheral. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-single-m2-p-byte\">LDMA_DESCRIPTOR_SINGLE_M2P_BYTE<\/a> (src, dest, count)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for byte transfers from memory to a peripheral. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-linkrel-p2-m-byte\">LDMA_DESCRIPTOR_LINKREL_P2M_BYTE<\/a> (src, dest, count, linkjmp)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for byte transfers from a peripheral to memory. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-linkrel-p2-m-word\">LDMA_DESCRIPTOR_LINKREL_P2M_WORD<\/a> (src, dest, count, linkjmp)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for word transfers from a peripheral to memory. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-linkrel-m2-p-byte\">LDMA_DESCRIPTOR_LINKREL_M2P_BYTE<\/a> (src, dest, count, linkjmp)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for byte transfers from memory to a peripheral. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-single-write\">LDMA_DESCRIPTOR_SINGLE_WRITE<\/a> (value, address)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for Immediate WRITE transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-linkabs-write\">LDMA_DESCRIPTOR_LINKABS_WRITE<\/a> (value, address)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for Immediate WRITE transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-linkrel-write\">LDMA_DESCRIPTOR_LINKREL_WRITE<\/a> (value, address, linkjmp)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for Immediate WRITE transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-single-sync\">LDMA_DESCRIPTOR_SINGLE_SYNC<\/a> (set, clr, matchValue, matchEnable)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for SYNC transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-linkabs-sync\">LDMA_DESCRIPTOR_LINKABS_SYNC<\/a> (set, clr, matchValue, matchEnable)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for SYNC transfer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#ldma-descriptor-linkrel-sync\">LDMA_DESCRIPTOR_LINKREL_SYNC<\/a> (set, clr, matchValue, matchEnable, linkjmp)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">DMA descriptor initializer for SYNC transfer. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"def-class-section\"><h2>Enumeration Documentation<span id=\"enum-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#enum-definition\">#<\/a><\/span><\/h2><div><h3>LDMA_CtrlBlockSize_t<span id=\"ldma-ctrl-block-size-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-ctrl-block-size-t\">#<\/a><\/span><\/h3><blockquote>LDMA_CtrlBlockSize_t<\/blockquote><p style=\"color:inherit\">Controls the number of unit data transfers per arbitration cycle, providing a means to balance DMA channels' load on the controller. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">ldmaCtrlBlockSizeUnit1<\/td><td class=\"fieldname\"><p style=\"color:inherit\">One transfer per arbitration. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlBlockSizeUnit2<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Two transfers per arbitration. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlBlockSizeUnit3<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Three transfers per arbitration. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlBlockSizeUnit4<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Four transfers per arbitration. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlBlockSizeUnit6<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Six transfers per arbitration. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlBlockSizeUnit8<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Eight transfers per arbitration. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlBlockSizeUnit16<\/td><td class=\"fieldname\"><p style=\"color:inherit\">16 transfers per arbitration. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlBlockSizeUnit32<\/td><td class=\"fieldname\"><p style=\"color:inherit\">32 transfers per arbitration. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlBlockSizeUnit64<\/td><td class=\"fieldname\"><p style=\"color:inherit\">64 transfers per arbitration. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlBlockSizeUnit128<\/td><td class=\"fieldname\"><p style=\"color:inherit\">128 transfers per arbitration. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlBlockSizeUnit256<\/td><td class=\"fieldname\"><p style=\"color:inherit\">256 transfers per arbitration. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlBlockSizeUnit512<\/td><td class=\"fieldname\"><p style=\"color:inherit\">512 transfers per arbitration. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlBlockSizeUnit1024<\/td><td class=\"fieldname\"><p style=\"color:inherit\">1024 transfers per arbitration. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlBlockSizeAll<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Lock arbitration during transfer. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>127<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_CtrlStructType_t<span id=\"ldma-ctrl-struct-type-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-ctrl-struct-type-t\">#<\/a><\/span><\/h3><blockquote>LDMA_CtrlStructType_t<\/blockquote><p style=\"color:inherit\">DMA structure type. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">ldmaCtrlStructTypeXfer<\/td><td class=\"fieldname\"><p style=\"color:inherit\">TRANSFER transfer type. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlStructTypeSync<\/td><td class=\"fieldname\"><p style=\"color:inherit\">SYNCHRONIZE transfer type. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlStructTypeWrite<\/td><td class=\"fieldname\"><p style=\"color:inherit\">WRITE transfer type. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>145<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_CtrlReqMode_t<span id=\"ldma-ctrl-req-mode-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-ctrl-req-mode-t\">#<\/a><\/span><\/h3><blockquote>LDMA_CtrlReqMode_t<\/blockquote><p style=\"color:inherit\">DMA transfer block or cycle selector. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">ldmaCtrlReqModeBlock<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Each DMA request trigger transfer of one block. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlReqModeAll<\/td><td class=\"fieldname\"><p style=\"color:inherit\">A DMA request trigger transfer of a complete cycle. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>152<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_CtrlSrcInc_t<span id=\"ldma-ctrl-src-inc-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-ctrl-src-inc-t\">#<\/a><\/span><\/h3><blockquote>LDMA_CtrlSrcInc_t<\/blockquote><p style=\"color:inherit\">Source address increment unit size. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">ldmaCtrlSrcIncOne<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Increment source address by one unit data size. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlSrcIncTwo<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Increment source address by two unit data sizes. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlSrcIncFour<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Increment source address by four unit data sizes. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlSrcIncNone<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Do not increment source address. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>158<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_CtrlSize_t<span id=\"ldma-ctrl-size-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-ctrl-size-t\">#<\/a><\/span><\/h3><blockquote>LDMA_CtrlSize_t<\/blockquote><p style=\"color:inherit\">DMA transfer unit size. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">ldmaCtrlSizeByte<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Each unit transfer is a byte. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlSizeHalf<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Each unit transfer is a half-word. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlSizeWord<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Each unit transfer is a word. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>166<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_CtrlDstInc_t<span id=\"ldma-ctrl-dst-inc-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-ctrl-dst-inc-t\">#<\/a><\/span><\/h3><blockquote>LDMA_CtrlDstInc_t<\/blockquote><p style=\"color:inherit\">Destination address increment unit size. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">ldmaCtrlDstIncOne<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Increment destination address by one unit data size. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlDstIncTwo<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Increment destination address by two unit data sizes. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlDstIncFour<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Increment destination address by four unit data sizes. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlDstIncNone<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Do not increment destination address. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>173<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_CtrlSrcAddrMode_t<span id=\"ldma-ctrl-src-addr-mode-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-ctrl-src-addr-mode-t\">#<\/a><\/span><\/h3><blockquote>LDMA_CtrlSrcAddrMode_t<\/blockquote><p style=\"color:inherit\">Source addressing mode. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">ldmaCtrlSrcAddrModeAbs<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Address fetched from a linked structure is absolute. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlSrcAddrModeRel<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Address fetched from a linked structure is relative. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>181<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_CtrlDstAddrMode_t<span id=\"ldma-ctrl-dst-addr-mode-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-ctrl-dst-addr-mode-t\">#<\/a><\/span><\/h3><blockquote>LDMA_CtrlDstAddrMode_t<\/blockquote><p style=\"color:inherit\">Destination addressing mode. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">ldmaCtrlDstAddrModeAbs<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Address fetched from a linked structure is absolute. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCtrlDstAddrModeRel<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Address fetched from a linked structure is relative. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>187<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_LinkMode_t<span id=\"ldma-link-mode-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-link-mode-t\">#<\/a><\/span><\/h3><blockquote>LDMA_LinkMode_t<\/blockquote><p style=\"color:inherit\">DMA link load address mode. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">ldmaLinkModeAbs<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Link address is an absolute address value. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaLinkModeRel<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Link address is a two's complement relative address. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>193<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_CfgArbSlots_t<span id=\"ldma-cfg-arb-slots-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-cfg-arb-slots-t\">#<\/a><\/span><\/h3><blockquote>LDMA_CfgArbSlots_t<\/blockquote><p style=\"color:inherit\">Insert extra arbitration slots to increase channel arbitration priority. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">ldmaCfgArbSlotsAs1<\/td><td class=\"fieldname\"><p style=\"color:inherit\">One arbitration slot selected. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCfgArbSlotsAs2<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Two arbitration slots selected. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCfgArbSlotsAs4<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Four arbitration slots selected. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCfgArbSlotsAs8<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Eight arbitration slots selected. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>199<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_CfgSrcIncSign_t<span id=\"ldma-cfg-src-inc-sign-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-cfg-src-inc-sign-t\">#<\/a><\/span><\/h3><blockquote>LDMA_CfgSrcIncSign_t<\/blockquote><p style=\"color:inherit\">Source address increment sign. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">ldmaCfgSrcIncSignPos<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Increment source address. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCfgSrcIncSignNeg<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Decrement source address. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>207<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_CfgDstIncSign_t<span id=\"ldma-cfg-dst-inc-sign-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-cfg-dst-inc-sign-t\">#<\/a><\/span><\/h3><blockquote>LDMA_CfgDstIncSign_t<\/blockquote><p style=\"color:inherit\">Destination address increment sign. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">ldmaCfgDstIncSignPos<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Increment destination address. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaCfgDstIncSignNeg<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Decrement destination address. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>213<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_PeripheralSignal_t<span id=\"ldma-peripheral-signal-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-peripheral-signal-t\">#<\/a><\/span><\/h3><blockquote>LDMA_PeripheralSignal_t<\/blockquote><p style=\"color:inherit\">Peripherals that can trigger LDMA transfers. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_NONE<\/td><td class=\"fieldname\"><p style=\"color:inherit\">No peripheral selected for DMA triggering. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_LDMAXBAR_PRSREQ0<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on PRS REQ0. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_LDMAXBAR_PRSREQ1<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on PRS REQ1. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER0_CC0<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER0_CC0. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER0_CC1<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER0_CC1. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER0_CC2<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER0_CC2. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER0_UFOF<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER0_UFOF. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER1_CC0<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER1_CC0. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER1_CC1<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER1_CC1. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER1_CC2<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER1_CC2. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER1_UFOF<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER1_UFOF. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_USART0_RXDATAV<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on USART0_RXDATAV. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_USART0_RXDATAVRIGHT<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on USART0_RXDATAVRIGHT. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_USART0_TXBL<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on USART0_TXBL. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_USART0_TXBLRIGHT<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on USART0_TXBLRIGHT. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_USART0_TXEMPTY<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on USART0_TXEMPTY. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_I2C0_RXDATAV<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on I2C0_RXDATAV. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_I2C0_TXBL<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on I2C0_TXBL. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_I2C1_RXDATAV<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on I2C1_RXDATAV. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_I2C1_TXBL<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on I2C1_TXBL. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_IADC0_IADC_SCAN<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on IADC0_IADC_SCAN. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_IADC0_IADC_SINGLE<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on IADC0_IADC_SINGLE. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_MSC_WDATA<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on MSC_WDATA. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER2_CC0<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER2_CC0. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER2_CC1<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER2_CC1. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER2_CC2<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER2_CC2. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER2_UFOF<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER2_UFOF. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER3_CC0<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER3_CC0. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER3_CC1<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER3_CC1. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER3_CC2<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER3_CC2. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER3_UFOF<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER3_UFOF. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER4_CC0<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER4_CC0. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER4_CC1<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER4_CC1. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER4_CC2<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER4_CC2. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_TIMER4_UFOF<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on TIMER4_UFOF. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_VDAC0CH0REQ<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on VDAC0_CH0REQ. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_VDAC0CH1REQ<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on VDAC0_CH1REQ. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_VDAC1CH0REQ<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on VDAC1_CH0REQ. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_VDAC1CH1REQ<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on VDAC1_CH1REQ. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_EUSART0_RXFL<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on EUSART0_RXFL. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_EUSART0_TXFL<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on EUSART0_TXFL. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_EUSART1_RXFL<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on EUSART1_RXFL. <\/p><\/td><\/tr><tr><td class=\"fieldname\">ldmaPeripheralSignal_EUSART1_TXFL<\/td><td class=\"fieldname\"><p style=\"color:inherit\">Trigger on EUSART1_TXFL. <\/p><\/td><\/tr><\/tbody><\/table><br><div>Definition at line <code>253<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><\/div><div class=\"def-class-section\"><h2>Function Documentation<span id=\"func-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#func-definition\">#<\/a><\/span><\/h2><div><h3>LDMA_DeInit<span id=\"ldma-de-init\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-de-init\">#<\/a><\/span><\/h3><blockquote>void LDMA_DeInit (void)<\/blockquote><p style=\"color:inherit\">De-initialize the LDMA controller. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">LDMA interrupts are disabled and the LDMA clock is stopped. <\/p><br><div>Definition at line <code>80<\/code> of file <code>platform/emlib/src/em_ldma.c<\/code><\/div><br><\/div><div><h3>LDMA_EnableChannelRequest<span id=\"ldma-enable-channel-request\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-enable-channel-request\">#<\/a><\/span><\/h3><blockquote>void LDMA_EnableChannelRequest (int ch, bool enable)<\/blockquote><p style=\"color:inherit\">Enable or disable an LDMA channel request. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">ch<\/td><td><p style=\"color:inherit\">LDMA channel to enable or disable requests.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">enable<\/td><td><p style=\"color:inherit\">If 'true', the request will be enabled. If 'false', the request will be disabled. <\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Use this function to enable or disable an LDMA channel request. This will prevent the LDMA from proceeding after its current transaction if disabled.<\/p><br><div>Definition at line <code>117<\/code> of file <code>platform/emlib/src/em_ldma.c<\/code><\/div><br><\/div><div><h3>LDMA_Init<span id=\"ldma-init\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-init\">#<\/a><\/span><\/h3><blockquote>void LDMA_Init (const LDMA_Init_t *init)<\/blockquote><p style=\"color:inherit\">Initialize the LDMA controller. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">init<\/td><td><p style=\"color:inherit\">A pointer to the initialization structure used to configure the LDMA. <\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">This function will disable all the LDMA channels and enable the LDMA bus clock in the CMU. This function will also enable the LDMA IRQ in the NVIC and set the LDMA IRQ priority to a user-configurable priority. The LDMA interrupt priority is configured using the <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-emlib-efr32xg24/ldma-init-t\" target=\"_blank\" rel=\"\">LDMA_Init_t<\/a> structure.<\/p><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Since this function enables the LDMA IRQ, always add a custom LDMA_IRQHandler to the application to handle any interrupts from LDMA.<\/p><\/li><\/ul><br><div>Definition at line <code>142<\/code> of file <code>platform/emlib/src/em_ldma.c<\/code><\/div><br><\/div><div><h3>LDMA_StartTransfer<span id=\"ldma-start-transfer\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-start-transfer\">#<\/a><\/span><\/h3><blockquote>void LDMA_StartTransfer (int ch, const LDMA_TransferCfg_t *transfer, const LDMA_Descriptor_t *descriptor)<\/blockquote><p style=\"color:inherit\">Start a DMA transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">ch<\/td><td><p style=\"color:inherit\">A DMA channel.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">transfer<\/td><td><p style=\"color:inherit\">The initialization structure used to configure the transfer.<\/p><\/td><\/tr><tr><td>[in]<\/td><td class=\"paramname\">descriptor<\/td><td><p style=\"color:inherit\">The transfer descriptor, which can be an array of descriptors linked together. Each descriptor's fields stored in RAM will be loaded into the certain hardware registers at the proper time to perform the DMA transfer. <\/p><\/td><\/tr><\/tbody><\/table><\/div><br><div>Definition at line <code>226<\/code> of file <code>platform/emlib/src/em_ldma.c<\/code><\/div><br><\/div><div><h3>LDMA_StopTransfer<span id=\"ldma-stop-transfer\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-stop-transfer\">#<\/a><\/span><\/h3><blockquote>void LDMA_StopTransfer (int ch)<\/blockquote><p style=\"color:inherit\">Stop a DMA transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">ch<\/td><td><p style=\"color:inherit\">A DMA channel to stop. <\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The DMA will complete the current AHB burst transfer before stopping.<\/p><\/li><\/ul><br><div>Definition at line <code>403<\/code> of file <code>platform/emlib/src/em_ldma.c<\/code><\/div><br><\/div><div><h3>LDMA_TransferDone<span id=\"ldma-transfer-done\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-transfer-done\">#<\/a><\/span><\/h3><blockquote>bool LDMA_TransferDone (int ch)<\/blockquote><p style=\"color:inherit\">Check if a DMA transfer has completed. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">ch<\/td><td><p style=\"color:inherit\">A DMA channel to check.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">True if transfer has completed, false if not. <\/p><\/li><\/ul><br><div>Definition at line <code>432<\/code> of file <code>platform/emlib/src/em_ldma.c<\/code><\/div><br><\/div><div><h3>LDMA_TransferRemainingCount<span id=\"ldma-transfer-remaining-count\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-transfer-remaining-count\">#<\/a><\/span><\/h3><blockquote>uint32_t LDMA_TransferRemainingCount (int ch)<\/blockquote><p style=\"color:inherit\">Get the number of items remaining in a transfer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">ch<\/td><td><p style=\"color:inherit\">The channel number of the transfer to check.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">This function does not take into account that a DMA transfer with a chain of linked transfers might be ongoing. It will only check the count for the current transfer.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">A number of items remaining in the transfer. <\/p><\/li><\/ul><br><div>Definition at line <code>471<\/code> of file <code>platform/emlib/src/em_ldma.c<\/code><\/div><br><\/div><div><h3>LDMA_ChannelEnabled<span id=\"ldma-channel-enabled\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-channel-enabled\">#<\/a><\/span><\/h3><blockquote>bool LDMA_ChannelEnabled (int ch)<\/blockquote><p style=\"color:inherit\">Check if a certain channel is enabled. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">ch<\/td><td><p style=\"color:inherit\">LDMA channel to check.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">return true if the LDMA channel is enabled and false if the channel is not enabled. <\/p><\/li><\/ul><br><div>Definition at line <code>2672<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_IntClear<span id=\"ldma-int-clear\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-int-clear\">#<\/a><\/span><\/h3><blockquote>void LDMA_IntClear (uint32_t flags)<\/blockquote><p style=\"color:inherit\">Clear one or more pending LDMA interrupts. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">flags<\/td><td><p style=\"color:inherit\">Pending LDMA interrupt sources to clear. Use one or more valid interrupt flags for the LDMA module. The flags are LDMA_IFC_ERROR and one done flag for each channel. <\/p><\/td><\/tr><\/tbody><\/table><\/div><br><div>Definition at line <code>2695<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_IntDisable<span id=\"ldma-int-disable\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-int-disable\">#<\/a><\/span><\/h3><blockquote>void LDMA_IntDisable (uint32_t flags)<\/blockquote><p style=\"color:inherit\">Disable one or more LDMA interrupts. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">flags<\/td><td><p style=\"color:inherit\">LDMA interrupt sources to disable. Use one or more valid interrupt flags for LDMA module. The flags are LDMA_IEN_ERROR and one done flag for each channel. <\/p><\/td><\/tr><\/tbody><\/table><\/div><br><div>Definition at line <code>2713<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_IntEnable<span id=\"ldma-int-enable\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-int-enable\">#<\/a><\/span><\/h3><blockquote>void LDMA_IntEnable (uint32_t flags)<\/blockquote><p style=\"color:inherit\">Enable one or more LDMA interrupts. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">flags<\/td><td><p style=\"color:inherit\">LDMA interrupt sources to enable. Use one or more valid interrupt flags for LDMA module. The flags are LDMA_IEN_ERROR and one done flag for each channel. <\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Depending on the use, a pending interrupt may already be set prior to enabling the interrupt. To ignore a pending interrupt, consider using <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-emlib-efr32xg24/ldma#ldma-int-clear\" target=\"_blank\" rel=\"\">LDMA_IntClear()<\/a> prior to enabling the interrupt.<\/p><\/li><\/ul><br><div>Definition at line <code>2732<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_IntGet<span id=\"ldma-int-get\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-int-get\">#<\/a><\/span><\/h3><blockquote>uint32_t LDMA_IntGet (void)<\/blockquote><p style=\"color:inherit\">Get pending LDMA interrupt flags. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Event bits are not cleared by the use of this function.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">LDMA interrupt sources pending. Returns one or more valid interrupt flags for LDMA module. The flags are LDMA_IF_ERROR and one flag for each LDMA channel. <\/p><\/li><\/ul><br><div>Definition at line <code>2749<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_IntGetEnabled<span id=\"ldma-int-get-enabled\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-int-get-enabled\">#<\/a><\/span><\/h3><blockquote>uint32_t LDMA_IntGetEnabled (void)<\/blockquote><p style=\"color:inherit\">Get enabled and pending LDMA interrupt flags. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Useful for handling more interrupt sources in the same interrupt handler.<\/p><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Interrupt flags are not cleared by the use of this function.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">Pending and enabled LDMA interrupt sources Return value is the bitwise AND of<\/p><ul><li><p style=\"color:inherit\">the enabled interrupt sources in LDMA_IEN and<\/p><\/li><li><p style=\"color:inherit\">the pending interrupt flags LDMA_IF <\/p><\/li><\/ul><\/li><\/ul><br><div>Definition at line <code>2768<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_IntSet<span id=\"ldma-int-set\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-int-set\">#<\/a><\/span><\/h3><blockquote>void LDMA_IntSet (uint32_t flags)<\/blockquote><p style=\"color:inherit\">Set one or more pending LDMA interrupts. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>[in]<\/td><td class=\"paramname\">flags<\/td><td><p style=\"color:inherit\">LDMA interrupt sources to set to pending. Use one or more valid interrupt flags for LDMA module. The flags are LDMA_IFS_ERROR and one done flag for each LDMA channel. <\/p><\/td><\/tr><\/tbody><\/table><\/div><br><div>Definition at line <code>2785<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><\/div><div class=\"def-class-section\"><h2>Macro Definition Documentation<span id=\"define-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#define-definition\">#<\/a><\/span><\/h2><div><h3>LDMA_DESCRIPTOR_NON_EXTEND_SIZE_WORD<span id=\"ldma-descriptor-non-extend-size-word\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-non-extend-size-word\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_NON_EXTEND_SIZE_WORD<\/blockquote><b>Value:<\/b><pre class=\"macroshort\">4<\/pre><p style=\"color:inherit\">Size in words of a non-extended DMA descriptor. <\/p><br><div>Definition at line <code>1083<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_EXTEND_SIZE_WORD<span id=\"ldma-descriptor-extend-size-word\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-extend-size-word\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_EXTEND_SIZE_WORD<\/blockquote><b>Value:<\/b><pre class=\"macroshort\">7<\/pre><p style=\"color:inherit\">Size in words of an extended DMA descriptor. <\/p><br><div>Definition at line <code>1085<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_INIT_DEFAULT<span id=\"ldma-init-default\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-init-default\">#<\/a><\/span><\/h3><blockquote>#define LDMA_INIT_DEFAULT<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                                                          \\<\/div><div class=\"macro\">    .ldmaInitCtrlNumFixed     = _LDMA_CTRL_NUMFIXED_DEFAULT,/* Fixed priority arbitration.*/ \\<\/div><div class=\"macro\">    .ldmaInitCtrlSyncPrsClrEn = 0,                         /* No PRS Synctrig clear enable*/ \\<\/div><div class=\"macro\">    .ldmaInitCtrlSyncPrsSetEn = 0,                         /* No PRS Synctrig set enable. */ \\<\/div><div class=\"macro\">    .ldmaInitIrqPriority      = 3                          /* IRQ priority level 3.       */ \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">Default DMA initialization structure. <\/p><br><div>Definition at line <code>1092<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_TRANSFER_CFG_MEMORY<span id=\"ldma-transfer-cfg-memory\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-transfer-cfg-memory\">#<\/a><\/span><\/h3><blockquote>#define LDMA_TRANSFER_CFG_MEMORY<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                               \\<\/div><div class=\"macro\">    0, 0, 0, 0, 0,                                \\<\/div><div class=\"macro\">    false, false, ldmaCfgArbSlotsAs1,             \\<\/div><div class=\"macro\">    ldmaCfgSrcIncSignPos, ldmaCfgDstIncSignPos, 0 \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">Generic DMA transfer configuration for memory to memory transfers. <\/p><br><div>Definition at line <code>1113<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_TRANSFER_CFG_MEMORY_LOOP<span id=\"ldma-transfer-cfg-memory-loop\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-transfer-cfg-memory-loop\">#<\/a><\/span><\/h3><blockquote>#define LDMA_TRANSFER_CFG_MEMORY_LOOP<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                             \\<\/div><div class=\"macro\">    0, 0, 0, 0, 0,                              \\<\/div><div class=\"macro\">    false, false, ldmaCfgArbSlotsAs1,           \\<\/div><div class=\"macro\">    ldmaCfgSrcIncSignPos, ldmaCfgDstIncSignPos, \\<\/div><div class=\"macro\">    loopCnt                                     \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">Generic DMA transfer configuration for looped memory to memory transfers. <\/p><br><div>Definition at line <code>1135<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_TRANSFER_CFG_PERIPHERAL<span id=\"ldma-transfer-cfg-peripheral\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-transfer-cfg-peripheral\">#<\/a><\/span><\/h3><blockquote>#define LDMA_TRANSFER_CFG_PERIPHERAL<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                               \\<\/div><div class=\"macro\">    signal, 0, 0, 0, 0,                           \\<\/div><div class=\"macro\">    false, false, ldmaCfgArbSlotsAs1,             \\<\/div><div class=\"macro\">    ldmaCfgSrcIncSignPos, ldmaCfgDstIncSignPos, 0 \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">Generic DMA transfer configuration for memory to/from peripheral transfers. <\/p><br><div>Definition at line <code>1157<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_TRANSFER_CFG_PERIPHERAL_LOOP<span id=\"ldma-transfer-cfg-peripheral-loop\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-transfer-cfg-peripheral-loop\">#<\/a><\/span><\/h3><blockquote>#define LDMA_TRANSFER_CFG_PERIPHERAL_LOOP<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                        \\<\/div><div class=\"macro\">    signal, 0, 0, 0, 0,                                    \\<\/div><div class=\"macro\">    false, false, ldmaCfgArbSlotsAs1,                      \\<\/div><div class=\"macro\">    ldmaCfgSrcIncSignPos, ldmaCfgDstIncSignPos, loopCnt    \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">Generic DMA transfer configuration for looped memory to/from peripheral transfers. <\/p><br><div>Definition at line <code>1178<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_SINGLE_M2M_WORD<span id=\"ldma-descriptor-single-m2-m-word\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-single-m2-m-word\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_SINGLE_M2M_WORD<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                       \\<\/div><div class=\"macro\">    .xfer =                                               \\<\/div><div class=\"macro\">    {                                                     \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,             \\<\/div><div class=\"macro\">      .structReq    = 1,                                  \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                        \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                  \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,             \\<\/div><div class=\"macro\">      .doneIfs      = 1,                                  \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeAll,                 \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                  \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                  \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncOne,                  \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeWord,                   \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncOne,                  \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,             \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,             \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                    \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                   \\<\/div><div class=\"macro\">      .linkMode     = 0,                                  \\<\/div><div class=\"macro\">      .link         = 0,                                  \\<\/div><div class=\"macro\">      .linkAddr     = 0                                   \\<\/div><div class=\"macro\">    }                                                     \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for single memory to memory word transfer. <\/p><br><div>Definition at line <code>1193<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_SINGLE_M2M_HALF<span id=\"ldma-descriptor-single-m2-m-half\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-single-m2-m-half\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_SINGLE_M2M_HALF<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                       \\<\/div><div class=\"macro\">    .xfer =                                               \\<\/div><div class=\"macro\">    {                                                     \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,             \\<\/div><div class=\"macro\">      .structReq    = 1,                                  \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                        \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                  \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,             \\<\/div><div class=\"macro\">      .doneIfs      = 1,                                  \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeAll,                 \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                  \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                  \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncOne,                  \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeHalf,                   \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncOne,                  \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,             \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,             \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                    \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                   \\<\/div><div class=\"macro\">      .linkMode     = 0,                                  \\<\/div><div class=\"macro\">      .link         = 0,                                  \\<\/div><div class=\"macro\">      .linkAddr     = 0                                   \\<\/div><div class=\"macro\">    }                                                     \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for single memory to memory half-word transfer. <\/p><br><div>Definition at line <code>1264<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_SINGLE_M2M_BYTE<span id=\"ldma-descriptor-single-m2-m-byte\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-single-m2-m-byte\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_SINGLE_M2M_BYTE<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                       \\<\/div><div class=\"macro\">    .xfer =                                               \\<\/div><div class=\"macro\">    {                                                     \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,             \\<\/div><div class=\"macro\">      .structReq    = 1,                                  \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                        \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                  \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,             \\<\/div><div class=\"macro\">      .doneIfs      = 1,                                  \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeAll,                 \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                  \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                  \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncOne,                  \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeByte,                   \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncOne,                  \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,             \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,             \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                    \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                   \\<\/div><div class=\"macro\">      .linkMode     = 0,                                  \\<\/div><div class=\"macro\">      .link         = 0,                                  \\<\/div><div class=\"macro\">      .linkAddr     = 0                                   \\<\/div><div class=\"macro\">    }                                                     \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for single memory to memory byte transfer. <\/p><br><div>Definition at line <code>1335<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_LINKABS_M2M_WORD<span id=\"ldma-descriptor-linkabs-m2-m-word\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-linkabs-m2-m-word\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_LINKABS_M2M_WORD<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                        \\<\/div><div class=\"macro\">    .xfer =                                                \\<\/div><div class=\"macro\">    {                                                      \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,              \\<\/div><div class=\"macro\">      .structReq    = 1,                                   \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                         \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                   \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,              \\<\/div><div class=\"macro\">      .doneIfs      = 0,                                   \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeAll,                  \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                   \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                   \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncOne,                   \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeWord,                    \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncOne,                   \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,              \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,              \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                     \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                    \\<\/div><div class=\"macro\">      .linkMode     = ldmaLinkModeAbs,                     \\<\/div><div class=\"macro\">      .link         = 1,                                   \\<\/div><div class=\"macro\">      .linkAddr     = 0 /* Must be set runtime ! */        \\<\/div><div class=\"macro\">    }                                                      \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for linked memory to memory word transfer. <\/p><p style=\"color:inherit\">Link address must be an absolute address. <strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The linkAddr member of the transfer descriptor is not initialized. linkAddr must be initialized by using the proper bits right-shift to get the correct bits from the absolute address. _LDMA_CH_LINK_LINKADDR_SHIFT should be used for that operation: <\/p><pre class=\"language-clike\"><code class=\"language-clike\">desc<span class=\"token punctuation\">.<\/span>linkAddr <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span>int32_t<span class=\"token punctuation\">)<\/span><span class=\"token operator\">&amp;<\/span>next_desc<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span> _LDMA_CH_LINK_LINKADDR_SHIFT<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre><p style=\"color:inherit\"> The opposite bit shift (left) must be done if linkAddr is read. <\/p><\/li><\/ul><br><div>Definition at line <code>1416<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_LINKABS_M2M_HALF<span id=\"ldma-descriptor-linkabs-m2-m-half\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-linkabs-m2-m-half\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_LINKABS_M2M_HALF<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                        \\<\/div><div class=\"macro\">    .xfer =                                                \\<\/div><div class=\"macro\">    {                                                      \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,              \\<\/div><div class=\"macro\">      .structReq    = 1,                                   \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                         \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                   \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,              \\<\/div><div class=\"macro\">      .doneIfs      = 0,                                   \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeAll,                  \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                   \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                   \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncOne,                   \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeHalf,                    \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncOne,                   \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,              \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,              \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                     \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                    \\<\/div><div class=\"macro\">      .linkMode     = ldmaLinkModeAbs,                     \\<\/div><div class=\"macro\">      .link         = 1,                                   \\<\/div><div class=\"macro\">      .linkAddr     = 0 /* Must be set runtime ! */        \\<\/div><div class=\"macro\">    }                                                      \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for linked memory to memory half-word transfer. <\/p><p style=\"color:inherit\">Link address must be an absolute address. <strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The linkAddr member of the transfer descriptor is not initialized. linkAddr must be initialized by using the proper bits right-shift to get the correct bits from the absolute address. _LDMA_CH_LINK_LINKADDR_SHIFT should be used for that operation: <\/p><pre class=\"language-clike\"><code class=\"language-clike\">desc<span class=\"token punctuation\">.<\/span>linkAddr <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span>int32_t<span class=\"token punctuation\">)<\/span><span class=\"token operator\">&amp;<\/span>next_desc<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span> _LDMA_CH_LINK_LINKADDR_SHIFT<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre><p style=\"color:inherit\"> The opposite bit shift (left) must be done if linkAddr is read. <\/p><\/li><\/ul><br><div>Definition at line <code>1507<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_LINKABS_M2M_BYTE<span id=\"ldma-descriptor-linkabs-m2-m-byte\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-linkabs-m2-m-byte\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_LINKABS_M2M_BYTE<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                        \\<\/div><div class=\"macro\">    .xfer =                                                \\<\/div><div class=\"macro\">    {                                                      \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,              \\<\/div><div class=\"macro\">      .structReq    = 1,                                   \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                         \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                   \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,              \\<\/div><div class=\"macro\">      .doneIfs      = 0,                                   \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeAll,                  \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                   \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                   \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncOne,                   \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeByte,                    \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncOne,                   \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,              \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,              \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                     \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                    \\<\/div><div class=\"macro\">      .linkMode     = ldmaLinkModeAbs,                     \\<\/div><div class=\"macro\">      .link         = 1,                                   \\<\/div><div class=\"macro\">      .linkAddr     = 0 /* Must be set runtime ! */        \\<\/div><div class=\"macro\">    }                                                      \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for linked memory to memory byte transfer. <\/p><p style=\"color:inherit\">Link address must be an absolute address. <strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The linkAddr member of the transfer descriptor is not initialized. linkAddr must be initialized by using the proper bits right-shift to get the correct bits from the absolute address. _LDMA_CH_LINK_LINKADDR_SHIFT should be used for that operation: <\/p><pre class=\"language-clike\"><code class=\"language-clike\">desc<span class=\"token punctuation\">.<\/span>linkAddr <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span>int32_t<span class=\"token punctuation\">)<\/span><span class=\"token operator\">&amp;<\/span>next_desc<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span> _LDMA_CH_LINK_LINKADDR_SHIFT<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre><p style=\"color:inherit\"> The opposite bit shift (left) must be done if linkAddr is read. <\/p><\/li><\/ul><br><div>Definition at line <code>1598<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_LINKREL_M2M_WORD<span id=\"ldma-descriptor-linkrel-m2-m-word\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-linkrel-m2-m-word\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_LINKREL_M2M_WORD<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                                    \\<\/div><div class=\"macro\">    .xfer =                                                            \\<\/div><div class=\"macro\">    {                                                                  \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,                          \\<\/div><div class=\"macro\">      .structReq    = 1,                                               \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                                     \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                               \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,                          \\<\/div><div class=\"macro\">      .doneIfs      = 0,                                               \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeAll,                              \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                               \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                               \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncOne,                               \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeWord,                                \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncOne,                               \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,                          \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,                          \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                                 \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                                \\<\/div><div class=\"macro\">      .linkMode     = ldmaLinkModeRel,                                 \\<\/div><div class=\"macro\">      .link         = 1,                                               \\<\/div><div class=\"macro\">      .linkAddr     = (linkjmp) * LDMA_DESCRIPTOR_NON_EXTEND_SIZE_WORD \\<\/div><div class=\"macro\">    }                                                                  \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for linked memory to memory word transfer. <\/p><p style=\"color:inherit\">Link address is a relative address. <strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The linkAddr member of the transfer descriptor is initialized to 4 (regular descriptor) or 7 (extended descriptor), assuming that the next descriptor immediately follows this descriptor (in memory). <\/p><\/li><\/ul><br><div>Definition at line <code>1690<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_LINKREL_M2M_HALF<span id=\"ldma-descriptor-linkrel-m2-m-half\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-linkrel-m2-m-half\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_LINKREL_M2M_HALF<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                                    \\<\/div><div class=\"macro\">    .xfer =                                                            \\<\/div><div class=\"macro\">    {                                                                  \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,                          \\<\/div><div class=\"macro\">      .structReq    = 1,                                               \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                                     \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                               \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,                          \\<\/div><div class=\"macro\">      .doneIfs      = 0,                                               \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeAll,                              \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                               \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                               \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncOne,                               \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeHalf,                                \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncOne,                               \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,                          \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,                          \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                                 \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                                \\<\/div><div class=\"macro\">      .linkMode     = ldmaLinkModeRel,                                 \\<\/div><div class=\"macro\">      .link         = 1,                                               \\<\/div><div class=\"macro\">      .linkAddr     = (linkjmp) * LDMA_DESCRIPTOR_NON_EXTEND_SIZE_WORD \\<\/div><div class=\"macro\">    }                                                                  \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for linked memory to memory half-word transfer. <\/p><p style=\"color:inherit\">Link address is a relative address. <strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The linkAddr member of the transfer descriptor is initialized to 4 (regular descriptor) or 7 (extended descriptor), assuming that the next descriptor immediately follows this descriptor (in memory). <\/p><\/li><\/ul><br><div>Definition at line <code>1783<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_LINKREL_M2M_BYTE<span id=\"ldma-descriptor-linkrel-m2-m-byte\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-linkrel-m2-m-byte\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_LINKREL_M2M_BYTE<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                                    \\<\/div><div class=\"macro\">    .xfer =                                                            \\<\/div><div class=\"macro\">    {                                                                  \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,                          \\<\/div><div class=\"macro\">      .structReq    = 1,                                               \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                                     \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                               \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,                          \\<\/div><div class=\"macro\">      .doneIfs      = 0,                                               \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeAll,                              \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                               \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                               \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncOne,                               \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeByte,                                \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncOne,                               \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,                          \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,                          \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                                 \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                                \\<\/div><div class=\"macro\">      .linkMode     = ldmaLinkModeRel,                                 \\<\/div><div class=\"macro\">      .link         = 1,                                               \\<\/div><div class=\"macro\">      .linkAddr     = (linkjmp) * LDMA_DESCRIPTOR_NON_EXTEND_SIZE_WORD \\<\/div><div class=\"macro\">    }                                                                  \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for linked memory to memory byte transfer. <\/p><p style=\"color:inherit\">Link address is a relative address. <strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The linkAddr member of the transfer descriptor is initialized to 4 (regular descriptor) or 7 (extended descriptor), assuming that the next descriptor immediately follows this descriptor (in memory). <\/p><\/li><\/ul><br><div>Definition at line <code>1876<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_SINGLE_P2M_BYTE<span id=\"ldma-descriptor-single-p2-m-byte\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-single-p2-m-byte\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_SINGLE_P2M_BYTE<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                       \\<\/div><div class=\"macro\">    .xfer =                                               \\<\/div><div class=\"macro\">    {                                                     \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,             \\<\/div><div class=\"macro\">      .structReq    = 0,                                  \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                        \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                  \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,             \\<\/div><div class=\"macro\">      .doneIfs      = 1,                                  \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeBlock,               \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                  \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                  \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncNone,                 \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeByte,                   \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncOne,                  \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,             \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,             \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                    \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                   \\<\/div><div class=\"macro\">      .linkMode     = 0,                                  \\<\/div><div class=\"macro\">      .link         = 0,                                  \\<\/div><div class=\"macro\">      .linkAddr     = 0                                   \\<\/div><div class=\"macro\">    }                                                     \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for byte transfers from a peripheral to memory. <\/p><br><div>Definition at line <code>1958<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_SINGLE_P2P_BYTE<span id=\"ldma-descriptor-single-p2-p-byte\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-single-p2-p-byte\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_SINGLE_P2P_BYTE<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                       \\<\/div><div class=\"macro\">    .xfer =                                               \\<\/div><div class=\"macro\">    {                                                     \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,             \\<\/div><div class=\"macro\">      .structReq    = 0,                                  \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                        \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                  \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,             \\<\/div><div class=\"macro\">      .doneIfs      = 1,                                  \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeBlock,               \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                  \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                  \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncNone,                 \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeByte,                   \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncNone,                 \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,             \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,             \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                    \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                   \\<\/div><div class=\"macro\">      .linkMode     = 0,                                  \\<\/div><div class=\"macro\">      .link         = 0,                                  \\<\/div><div class=\"macro\">      .linkAddr     = 0                                   \\<\/div><div class=\"macro\">    }                                                     \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for byte transfers from a peripheral to a peripheral. <\/p><br><div>Definition at line <code>2029<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_SINGLE_M2P_BYTE<span id=\"ldma-descriptor-single-m2-p-byte\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-single-m2-p-byte\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_SINGLE_M2P_BYTE<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                       \\<\/div><div class=\"macro\">    .xfer =                                               \\<\/div><div class=\"macro\">    {                                                     \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,             \\<\/div><div class=\"macro\">      .structReq    = 0,                                  \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                        \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                  \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,             \\<\/div><div class=\"macro\">      .doneIfs      = 1,                                  \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeBlock,               \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                  \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                  \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncOne,                  \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeByte,                   \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncNone,                 \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,             \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,             \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                    \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                   \\<\/div><div class=\"macro\">      .linkMode     = 0,                                  \\<\/div><div class=\"macro\">      .link         = 0,                                  \\<\/div><div class=\"macro\">      .linkAddr     = 0                                   \\<\/div><div class=\"macro\">    }                                                     \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for byte transfers from memory to a peripheral. <\/p><br><div>Definition at line <code>2062<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_LINKREL_P2M_BYTE<span id=\"ldma-descriptor-linkrel-p2-m-byte\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-linkrel-p2-m-byte\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_LINKREL_P2M_BYTE<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                                    \\<\/div><div class=\"macro\">    .xfer =                                                            \\<\/div><div class=\"macro\">    {                                                                  \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,                          \\<\/div><div class=\"macro\">      .structReq    = 0,                                               \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                                     \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                               \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,                          \\<\/div><div class=\"macro\">      .doneIfs      = 1,                                               \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeBlock,                            \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                               \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                               \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncNone,                              \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeByte,                                \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncOne,                               \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,                          \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,                          \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                                 \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                                \\<\/div><div class=\"macro\">      .linkMode     = ldmaLinkModeRel,                                 \\<\/div><div class=\"macro\">      .link         = 1,                                               \\<\/div><div class=\"macro\">      .linkAddr     = (linkjmp) * LDMA_DESCRIPTOR_NON_EXTEND_SIZE_WORD \\<\/div><div class=\"macro\">    }                                                                  \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for byte transfers from a peripheral to memory. <\/p><br><div>Definition at line <code>2142<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_LINKREL_P2M_WORD<span id=\"ldma-descriptor-linkrel-p2-m-word\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-linkrel-p2-m-word\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_LINKREL_P2M_WORD<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                                    \\<\/div><div class=\"macro\">    .xfer =                                                            \\<\/div><div class=\"macro\">    {                                                                  \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,                          \\<\/div><div class=\"macro\">      .structReq    = 0,                                               \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                                     \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                               \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,                          \\<\/div><div class=\"macro\">      .doneIfs      = 1,                                               \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeBlock,                            \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                               \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                               \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncNone,                              \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeWord,                                \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncOne,                               \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,                          \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,                          \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                                 \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                                \\<\/div><div class=\"macro\">      .linkMode     = ldmaLinkModeRel,                                 \\<\/div><div class=\"macro\">      .link         = 1,                                               \\<\/div><div class=\"macro\">      .linkAddr     = (linkjmp) * LDMA_DESCRIPTOR_NON_EXTEND_SIZE_WORD \\<\/div><div class=\"macro\">    }                                                                  \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for word transfers from a peripheral to memory. <\/p><br><div>Definition at line <code>2223<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_LINKREL_M2P_BYTE<span id=\"ldma-descriptor-linkrel-m2-p-byte\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-linkrel-m2-p-byte\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_LINKREL_M2P_BYTE<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                                    \\<\/div><div class=\"macro\">    .xfer =                                                            \\<\/div><div class=\"macro\">    {                                                                  \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeXfer,                          \\<\/div><div class=\"macro\">      .structReq    = 0,                                               \\<\/div><div class=\"macro\">      .xferCnt      = (count) - 1,                                     \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                               \\<\/div><div class=\"macro\">      .blockSize    = ldmaCtrlBlockSizeUnit1,                          \\<\/div><div class=\"macro\">      .doneIfs      = 1,                                               \\<\/div><div class=\"macro\">      .reqMode      = ldmaCtrlReqModeBlock,                            \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                               \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                               \\<\/div><div class=\"macro\">      .srcInc       = ldmaCtrlSrcIncOne,                               \\<\/div><div class=\"macro\">      .size         = ldmaCtrlSizeByte,                                \\<\/div><div class=\"macro\">      .dstInc       = ldmaCtrlDstIncNone,                              \\<\/div><div class=\"macro\">      .srcAddrMode  = ldmaCtrlSrcAddrModeAbs,                          \\<\/div><div class=\"macro\">      .dstAddrMode  = ldmaCtrlDstAddrModeAbs,                          \\<\/div><div class=\"macro\">      .srcAddr      = (uint32_t)(src),                                 \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(dest),                                \\<\/div><div class=\"macro\">      .linkMode     = ldmaLinkModeRel,                                 \\<\/div><div class=\"macro\">      .link         = 1,                                               \\<\/div><div class=\"macro\">      .linkAddr     = (linkjmp) * LDMA_DESCRIPTOR_NON_EXTEND_SIZE_WORD \\<\/div><div class=\"macro\">    }                                                                  \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for byte transfers from memory to a peripheral. <\/p><br><div>Definition at line <code>2304<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_SINGLE_WRITE<span id=\"ldma-descriptor-single-write\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-single-write\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_SINGLE_WRITE<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                  \\<\/div><div class=\"macro\">    .wri =                                           \\<\/div><div class=\"macro\">    {                                                \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeWrite,       \\<\/div><div class=\"macro\">      .structReq    = 1,                             \\<\/div><div class=\"macro\">      .xferCnt      = 0,                             \\<\/div><div class=\"macro\">      .byteSwap     = 0,                             \\<\/div><div class=\"macro\">      .blockSize    = 0,                             \\<\/div><div class=\"macro\">      .doneIfs      = 1,                             \\<\/div><div class=\"macro\">      .reqMode      = 0,                             \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                             \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                             \\<\/div><div class=\"macro\">      .srcInc       = 0,                             \\<\/div><div class=\"macro\">      .size         = 0,                             \\<\/div><div class=\"macro\">      .dstInc       = 0,                             \\<\/div><div class=\"macro\">      .srcAddrMode  = 0,                             \\<\/div><div class=\"macro\">      .dstAddrMode  = 0,                             \\<\/div><div class=\"macro\">      .immVal       = (value),                       \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(address),           \\<\/div><div class=\"macro\">      .linkMode     = 0,                             \\<\/div><div class=\"macro\">      .link         = 0,                             \\<\/div><div class=\"macro\">      .linkAddr     = 0                              \\<\/div><div class=\"macro\">    }                                                \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for Immediate WRITE transfer. <\/p><br><div>Definition at line <code>2383<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_LINKABS_WRITE<span id=\"ldma-descriptor-linkabs-write\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-linkabs-write\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_LINKABS_WRITE<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                   \\<\/div><div class=\"macro\">    .wri =                                            \\<\/div><div class=\"macro\">    {                                                 \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeWrite,        \\<\/div><div class=\"macro\">      .structReq    = 1,                              \\<\/div><div class=\"macro\">      .xferCnt      = 0,                              \\<\/div><div class=\"macro\">      .byteSwap     = 0,                              \\<\/div><div class=\"macro\">      .blockSize    = 0,                              \\<\/div><div class=\"macro\">      .doneIfs      = 0,                              \\<\/div><div class=\"macro\">      .reqMode      = 0,                              \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                              \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                              \\<\/div><div class=\"macro\">      .srcInc       = 0,                              \\<\/div><div class=\"macro\">      .size         = 0,                              \\<\/div><div class=\"macro\">      .dstInc       = 0,                              \\<\/div><div class=\"macro\">      .srcAddrMode  = 0,                              \\<\/div><div class=\"macro\">      .dstAddrMode  = 0,                              \\<\/div><div class=\"macro\">      .immVal       = (value),                        \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(address),            \\<\/div><div class=\"macro\">      .linkMode     = ldmaLinkModeAbs,                \\<\/div><div class=\"macro\">      .link         = 1,                              \\<\/div><div class=\"macro\">      .linkAddr     = 0 /* Must be set runtime ! */   \\<\/div><div class=\"macro\">    }                                                 \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for Immediate WRITE transfer. <\/p><p style=\"color:inherit\">Link address must be an absolute address. <strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The linkAddr member of the transfer descriptor is not initialized. linkAddr must be initialized by using the proper bits right-shift to get the correct bits from the absolute address. _LDMA_CH_LINK_LINKADDR_SHIFT should be used for that operation: <\/p><pre class=\"language-clike\"><code class=\"language-clike\">desc<span class=\"token punctuation\">.<\/span>linkAddr <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span>int32_t<span class=\"token punctuation\">)<\/span><span class=\"token operator\">&amp;<\/span>next_desc<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span> _LDMA_CH_LINK_LINKADDR_SHIFT<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre><p style=\"color:inherit\"> The opposite bit shift (left) must be done if linkAddr is read. <\/p><\/li><\/ul><br><div>Definition at line <code>2425<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_LINKREL_WRITE<span id=\"ldma-descriptor-linkrel-write\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-linkrel-write\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_LINKREL_WRITE<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                                    \\<\/div><div class=\"macro\">    .wri =                                                             \\<\/div><div class=\"macro\">    {                                                                  \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeWrite,                         \\<\/div><div class=\"macro\">      .structReq    = 1,                                               \\<\/div><div class=\"macro\">      .xferCnt      = 0,                                               \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                               \\<\/div><div class=\"macro\">      .blockSize    = 0,                                               \\<\/div><div class=\"macro\">      .doneIfs      = 0,                                               \\<\/div><div class=\"macro\">      .reqMode      = 0,                                               \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                               \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                               \\<\/div><div class=\"macro\">      .srcInc       = 0,                                               \\<\/div><div class=\"macro\">      .size         = 0,                                               \\<\/div><div class=\"macro\">      .dstInc       = 0,                                               \\<\/div><div class=\"macro\">      .srcAddrMode  = 0,                                               \\<\/div><div class=\"macro\">      .dstAddrMode  = 0,                                               \\<\/div><div class=\"macro\">      .immVal       = (value),                                         \\<\/div><div class=\"macro\">      .dstAddr      = (uint32_t)(address),                             \\<\/div><div class=\"macro\">      .linkMode     = ldmaLinkModeRel,                                 \\<\/div><div class=\"macro\">      .link         = 1,                                               \\<\/div><div class=\"macro\">      .linkAddr     = (linkjmp) * LDMA_DESCRIPTOR_NON_EXTEND_SIZE_WORD \\<\/div><div class=\"macro\">    }                                                                  \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for Immediate WRITE transfer. <\/p><br><div>Definition at line <code>2462<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_SINGLE_SYNC<span id=\"ldma-descriptor-single-sync\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-single-sync\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_SINGLE_SYNC<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                                    \\<\/div><div class=\"macro\">    .sync =                                                            \\<\/div><div class=\"macro\">    {                                                                  \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeSync,                          \\<\/div><div class=\"macro\">      .structReq    = 1,                                               \\<\/div><div class=\"macro\">      .xferCnt      = 0,                                               \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                               \\<\/div><div class=\"macro\">      .blockSize    = 0,                                               \\<\/div><div class=\"macro\">      .doneIfs      = 1,                                               \\<\/div><div class=\"macro\">      .reqMode      = 0,                                               \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                               \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                               \\<\/div><div class=\"macro\">      .srcInc       = 0,                                               \\<\/div><div class=\"macro\">      .size         = 0,                                               \\<\/div><div class=\"macro\">      .dstInc       = 0,                                               \\<\/div><div class=\"macro\">      .srcAddrMode  = 0,                                               \\<\/div><div class=\"macro\">      .dstAddrMode  = 0,                                               \\<\/div><div class=\"macro\">      .syncSet      = (set),                                           \\<\/div><div class=\"macro\">      .syncClr      = (clr),                                           \\<\/div><div class=\"macro\">      .matchVal     = (matchValue),                                    \\<\/div><div class=\"macro\">      .matchEn      = (matchEnable),                                   \\<\/div><div class=\"macro\">      .linkMode     = 0,                                               \\<\/div><div class=\"macro\">      .link         = 0,                                               \\<\/div><div class=\"macro\">      .linkAddr     = 0                                                \\<\/div><div class=\"macro\">    }                                                                  \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for SYNC transfer. <\/p><br><div>Definition at line <code>2496<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_LINKABS_SYNC<span id=\"ldma-descriptor-linkabs-sync\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-linkabs-sync\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_LINKABS_SYNC<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                                     \\<\/div><div class=\"macro\">    .sync =                                                             \\<\/div><div class=\"macro\">    {                                                                   \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeSync,                           \\<\/div><div class=\"macro\">      .structReq    = 1,                                                \\<\/div><div class=\"macro\">      .xferCnt      = 0,                                                \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                                \\<\/div><div class=\"macro\">      .blockSize    = 0,                                                \\<\/div><div class=\"macro\">      .doneIfs      = 0,                                                \\<\/div><div class=\"macro\">      .reqMode      = 0,                                                \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                                \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                                \\<\/div><div class=\"macro\">      .srcInc       = 0,                                                \\<\/div><div class=\"macro\">      .size         = 0,                                                \\<\/div><div class=\"macro\">      .dstInc       = 0,                                                \\<\/div><div class=\"macro\">      .srcAddrMode  = 0,                                                \\<\/div><div class=\"macro\">      .dstAddrMode  = 0,                                                \\<\/div><div class=\"macro\">      .syncSet      = (set),                                            \\<\/div><div class=\"macro\">      .syncClr      = (clr),                                            \\<\/div><div class=\"macro\">      .matchVal     = (matchValue),                                     \\<\/div><div class=\"macro\">      .matchEn      = (matchEnable),                                    \\<\/div><div class=\"macro\">      .linkMode     = ldmaLinkModeAbs,                                  \\<\/div><div class=\"macro\">      .link         = 1,                                                \\<\/div><div class=\"macro\">      .linkAddr     = 0 /* Must be set runtime ! */                     \\<\/div><div class=\"macro\">    }                                                                   \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for SYNC transfer. <\/p><p style=\"color:inherit\">Link address must be an absolute address. <strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The linkAddr member of the transfer descriptor is not initialized. linkAddr must be initialized by using the proper bits right-shift to get the correct bits from the absolute address. _LDMA_CH_LINK_LINKADDR_SHIFT should be used for that operation: <\/p><pre class=\"language-clike\"><code class=\"language-clike\">desc<span class=\"token punctuation\">.<\/span>linkAddr <span class=\"token operator\">=<\/span> <span class=\"token punctuation\">(<\/span><span class=\"token punctuation\">(<\/span>int32_t<span class=\"token punctuation\">)<\/span><span class=\"token operator\">&amp;<\/span>next_desc<span class=\"token punctuation\">)<\/span> <span class=\"token operator\">&gt;<\/span><span class=\"token operator\">&gt;<\/span> _LDMA_CH_LINK_LINKADDR_SHIFT<span class=\"token punctuation\">;<\/span>\n<\/code><\/pre><p style=\"color:inherit\"> The opposite bit shift (left) must be done if linkAddr is read. <\/p><\/li><\/ul><br><div>Definition at line <code>2542<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><div><h3>LDMA_DESCRIPTOR_LINKREL_SYNC<span id=\"ldma-descriptor-linkrel-sync\" class=\"self-anchor\"><a class=\"perm\" href=\"#ldma-descriptor-linkrel-sync\">#<\/a><\/span><\/h3><blockquote>#define LDMA_DESCRIPTOR_LINKREL_SYNC<\/blockquote><b>Value:<\/b><div class=\"fragment\"><div class=\"macro\">  {                                                                              \\<\/div><div class=\"macro\">    .sync =                                                                      \\<\/div><div class=\"macro\">    {                                                                            \\<\/div><div class=\"macro\">      .structType   = ldmaCtrlStructTypeSync,                                    \\<\/div><div class=\"macro\">      .structReq    = 1,                                                         \\<\/div><div class=\"macro\">      .xferCnt      = 0,                                                         \\<\/div><div class=\"macro\">      .byteSwap     = 0,                                                         \\<\/div><div class=\"macro\">      .blockSize    = 0,                                                         \\<\/div><div class=\"macro\">      .doneIfs      = 0,                                                         \\<\/div><div class=\"macro\">      .reqMode      = 0,                                                         \\<\/div><div class=\"macro\">      .decLoopCnt   = 0,                                                         \\<\/div><div class=\"macro\">      .ignoreSrec   = 0,                                                         \\<\/div><div class=\"macro\">      .srcInc       = 0,                                                         \\<\/div><div class=\"macro\">      .size         = 0,                                                         \\<\/div><div class=\"macro\">      .dstInc       = 0,                                                         \\<\/div><div class=\"macro\">      .srcAddrMode  = 0,                                                         \\<\/div><div class=\"macro\">      .dstAddrMode  = 0,                                                         \\<\/div><div class=\"macro\">      .syncSet      = (set),                                                     \\<\/div><div class=\"macro\">      .syncClr      = (clr),                                                     \\<\/div><div class=\"macro\">      .matchVal     = (matchValue),                                              \\<\/div><div class=\"macro\">      .matchEn      = (matchEnable),                                             \\<\/div><div class=\"macro\">      .linkMode     = ldmaLinkModeRel,                                           \\<\/div><div class=\"macro\">      .link         = 1,                                                         \\<\/div><div class=\"macro\">      .linkAddr     = (linkjmp) * LDMA_DESCRIPTOR_NON_EXTEND_SIZE_WORD           \\<\/div><div class=\"macro\">    }                                                                            \\<\/div><div class=\"macro\">  }<\/div><\/div><p style=\"color:inherit\">DMA descriptor initializer for SYNC transfer. <\/p><br><div>Definition at line <code>2583<\/code> of file <code>platform/emlib/inc/em_ldma.h<\/code><\/div><br><\/div><\/div><\/div><\/article><footer class=\"footer-commons-msg\"><\/footer><div ub-in-page=\"6062051aebaf71079a7b414b\" class=\"hidden-lg\"><\/div>","url":"http://docs.silabs.com/gecko-platform/4.3/platform-emlib-efr32xg24/ldma","status":"success"}
