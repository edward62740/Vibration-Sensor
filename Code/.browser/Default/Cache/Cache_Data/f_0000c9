{"html":"<article><div class=\"textblock\"><h1>Sleep Timer<span id=\"sleep-timer\" class=\"self-anchor\"><a class=\"perm\" href=\"#sleep-timer\">#<\/a><\/span><\/h1><p style=\"color:inherit\">Sleep Timer can be used for creating timers which are tightly integrated with power management. The Power Manager requires precision timing to have all clocks ready on time, so that wakeup happens a little bit earlier to prepare the system to be ready at the right time. Sleep Timer uses one Hardware Timer and creates multiple software timer instances. It is important to note that when sleeptimer is used with WTIMER/TIMER, the MCU cannot go to EM2 energy mode because WTIMER/TIMER uses a high frequency clock source which is not retained in low energy mode.<\/p><p style=\"color:inherit\">The sleeptimer.c and sleeptimer.h source files for the SLEEPTIMER device driver library are in the service/sleeptimer folder.<\/p><h2>Introduction<span id=\"introduction\" class=\"self-anchor\"><a class=\"perm\" href=\"#introduction\">#<\/a><\/span><\/h2><p style=\"color:inherit\">The Sleeptimer driver provides software timers, delays, timekeeping and date functionalities using a low-frequency real-time clock peripheral.<\/p><p style=\"color:inherit\">All Silicon Labs microcontrollers equipped with the RTC or RTCC peripheral are currently supported. Only one instance of this driver can be initialized by the application.<\/p><h2>Functionalities overview<span id=\"functionalities-overview\" class=\"self-anchor\"><a class=\"perm\" href=\"#functionalities-overview\">#<\/a><\/span><\/h2><h3>Software Timers<span id=\"software-timers\" class=\"self-anchor\"><a class=\"perm\" href=\"#software-timers\">#<\/a><\/span><\/h3><p style=\"color:inherit\">This functionality allows the user to create periodic and one shot timers. A user callback can be associated with a timer and is called when the timer expires.<\/p><p style=\"color:inherit\">Timer structures must be allocated by the user. The function is called from within an interrupt handler with interrupts enabled.<\/p><h3>Timekeeping<span id=\"timekeeping\" class=\"self-anchor\"><a class=\"perm\" href=\"#timekeeping\">#<\/a><\/span><\/h3><p style=\"color:inherit\">A 64-bits tick counter is accessible through the <\/p><ul><li><p style=\"color:inherit\">uint64_t <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-get-tick-count64\" target=\"_blank\" rel=\"\">sl_sleeptimer_get_tick_count64(void)<\/a> API. It keeps the tick count since the initialization of the driver<\/p><\/li><\/ul><p style=\"color:inherit\">\nThe <code>SL_SLEEPTIMER_WALLCLOCK_CONFIG<\/code> configuration enables a UNIX timestamp (seconds count since January 1, 1970, 00:00:00).<\/p><p style=\"color:inherit\">This timestamp can be retrieved/modified using the following API:<\/p><ul><li><p style=\"color:inherit\">sl_sleeptimer_timestamp_t <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-get-time\" target=\"_blank\" rel=\"\">sl_sleeptimer_get_time(void)<\/a>; <\/p><\/li><li><p style=\"color:inherit\">sl_status_t <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-set-time\" target=\"_blank\" rel=\"\">sl_sleeptimer_set_time(sl_sleeptimer_timestamp_t time)<\/a>;<\/p><\/li><\/ul><p style=\"color:inherit\">\nConvenience conversion functions are provided to convert UNIX timestamp to/from NTP and Zigbee cluster format :<\/p><ul><li><p style=\"color:inherit\">sl_status_t <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-convert-unix-time-to-ntp\" target=\"_blank\" rel=\"\">sl_sleeptimer_convert_unix_time_to_ntp(sl_sleeptimer_timestamp_t time, uint32_t *ntp_time)<\/a>; <\/p><\/li><li><p style=\"color:inherit\">sl_status_t <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-convert-ntp-time-to-unix\" target=\"_blank\" rel=\"\">sl_sleeptimer_convert_ntp_time_to_unix(uint32_t ntp_time, sl_sleeptimer_timestamp_t *time)<\/a>; <\/p><\/li><li><p style=\"color:inherit\">sl_status_t <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-convert-unix-time-to-zigbee\" target=\"_blank\" rel=\"\">sl_sleeptimer_convert_unix_time_to_zigbee(sl_sleeptimer_timestamp_t time, uint32_t *zigbee_time)<\/a>; <\/p><\/li><li><p style=\"color:inherit\">sl_status_t <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-convert-zigbee-time-to-unix\" target=\"_blank\" rel=\"\">sl_sleeptimer_convert_zigbee_time_to_unix(uint32_t zigbee_time, sl_sleeptimer_timestamp_t *time)<\/a>;<\/p><\/li><\/ul><h3>Date<span id=\"date\" class=\"self-anchor\"><a class=\"perm\" href=\"#date\">#<\/a><\/span><\/h3><p style=\"color:inherit\">The previously described internal timestamp can also be retrieved/modified in a date format <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sl-sleeptimer-date-t\" target=\"_blank\" rel=\"\">sl_sleeptimer_date_t<\/a>.<\/p><p style=\"color:inherit\"><strong>API :<\/strong><\/p><ul><li><p style=\"color:inherit\">sl_status_t <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-get-datetime\" target=\"_blank\" rel=\"\">sl_sleeptimer_get_datetime(sl_sleeptimer_date_t *date)<\/a>; <\/p><\/li><li><p style=\"color:inherit\">sl_status_t <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-set-datetime\" target=\"_blank\" rel=\"\">sl_sleeptimer_set_datetime(sl_sleeptimer_date_t *date)<\/a>;<\/p><\/li><\/ul><h3>Frequency Setup and Tick Count<span id=\"frequency-setup-and-tick-count\" class=\"self-anchor\"><a class=\"perm\" href=\"#frequency-setup-and-tick-count\">#<\/a><\/span><\/h3><p style=\"color:inherit\">This driver works with a configurable time unit called tick.<\/p><p style=\"color:inherit\">The frequency of the ticks is based on the clock source and the internal frequency divider.<\/p><p style=\"color:inherit\">WTIMER/TIMER peripherals uses high frequency oscillator. To have a reasonable tick frequency, divider is set to maximum value (1024).<\/p><p style=\"color:inherit\">One of the following clock sources must be enabled before initializing the sleeptimer:<\/p><ul><li><p style=\"color:inherit\">LFXO: external crystal oscillator. Typically running at 32.768 kHz. <\/p><\/li><li><p style=\"color:inherit\">LFRCO: internal oscillator running at 32.768 kHz <\/p><\/li><li><p style=\"color:inherit\">ULFRCO: Ultra low-frequency oscillator running at 1.000 kHz <\/p><\/li><li><p style=\"color:inherit\">HFXO: High Frequency Crystal Oscillator at 39 Mhz. HFXO is only needed when Sleeptimer runs on TIMER or WTIMER.<\/p><\/li><\/ul><p style=\"color:inherit\">\nThe frequency divider is selected with the <code>SL_SLEEPTIMER_FREQ_DIVIDER<\/code> configuration. Its value must be a power of two within the range of 1 to 32. The number of ticks per second (sleeptimer frequency) is dictated by the following formula:<\/p><p style=\"color:inherit\">Tick (seconds) = 1 / (clock_frequency / frequency_divider)<\/p><p style=\"color:inherit\">The highest resolution for a tick is 30.5 us. It is achieved with a 32.768 kHz clock and a divider of 1.<\/p><h2>Getting Started<span id=\"getting-started\" class=\"self-anchor\"><a class=\"perm\" href=\"#getting-started\">#<\/a><\/span><\/h2><h3>Clock Selection<span id=\"clock-selection\" class=\"self-anchor\"><a class=\"perm\" href=\"#clock-selection\">#<\/a><\/span><\/h3><p style=\"color:inherit\">The sleeptimer relies on the hardware timer to operate. The hardware timer peripheral must be properly clocked from the application. Selecting the appropriate timer is crucial for design considerations. Each timer can potentially be used as a sleeptimer and is also available to the user. However, note that if a timer is used by the sleeptimer, it can't be used by the application and vice versa.<\/p><p style=\"color:inherit\">For WTIMER/TIMER peripherals, the user must select the appropriate oscillator if it is not the default wanted clock source.<\/p><p style=\"color:inherit\">When WTIMER/TIMER is selected, sleeptimer uses channel 0 and it is not possible to use other channels of the same instance for other purposes.<\/p><h3>Selection in a Project without Micrium OS<span id=\"selection-in-a-project-without-micrium-os\" class=\"self-anchor\"><a class=\"perm\" href=\"#selection-in-a-project-without-micrium-os\">#<\/a><\/span><\/h3><p style=\"color:inherit\">When RTC, RTCC, or BURTC is selected, the clock source for the peripheral must be configured and enabled in the application before initializing the sleeptimer module or any communication stacks. Most of the time, it consists in enabling the desired oscillators and setting up the clock source for the peripheral, like in the following example:<\/p><pre class=\"language-clike\"><code class=\"language-clike\"><span class=\"token function\">CMU_ClockSelectSet<\/span><span class=\"token punctuation\">(<\/span>cmuClock_LFE<span class=\"token punctuation\">,<\/span> cmuSelect_LFRCO<span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token function\">CMU_ClockEnable<\/span><span class=\"token punctuation\">(<\/span>cmuClock_RTCC<span class=\"token punctuation\">,<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre><h3>Clock Branch Select<span id=\"clock-branch-select\" class=\"self-anchor\"><a class=\"perm\" href=\"#clock-branch-select\">#<\/a><\/span><\/h3><table class=\"doxtable \"><caption><\/caption><thead><tr><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Clock   <\/p><\/th><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Enum   <\/p><\/th><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Description   <\/p><\/th><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Frequency    <\/p><\/th><\/tr><\/thead><tbody><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">LFXO   <\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><strong>cmuSelect_LFXO<\/strong><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Low-frequency crystal oscillator   <\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">32.768 Khz    <\/p><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">LFRCO   <\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><strong>cmuSelect_LFRCO<\/strong><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Low-frequency RC oscillator   <\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">32.768 Khz    <\/p><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">ULFRCO   <\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><strong>cmuSelect_ULFRCO<\/strong><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Ultra low-frequency RC oscillator   <\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">1 Khz   <\/p><\/td><\/tr><\/tbody><\/table><h3>Timer Clock Enable<span id=\"timer-clock-enable\" class=\"self-anchor\"><a class=\"perm\" href=\"#timer-clock-enable\">#<\/a><\/span><\/h3><table class=\"doxtable \"><caption><\/caption><thead><tr><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Module   <\/p><\/th><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Enum   <\/p><\/th><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Description    <\/p><\/th><\/tr><\/thead><tbody><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">RTCC   <\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><strong>cmuClock_RTCC<\/strong><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Real-time counter and calendar clock (LF E branch)    <\/p><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">RTC   <\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><strong>cmuClock_RTC<\/strong><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Real time counter clock (LF A branch)    <\/p><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">BURTC   <\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><strong>cmuClock_BURTC<\/strong><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">BURTC clock (EM4 Group A branch)   <\/p><\/td><\/tr><\/tbody><\/table><p style=\"color:inherit\">When the Radio internal RTC (PRORTC) is selected, it is not necessary to configure the clock source for the peripheral. However, it is important to enable the desired oscillator before initializing the sleeptimer module or any communication stacks. The best oscillator available (LFXO being the first choice) will be used by the sleeptimer at initalization. The following example shows how the desired oscilator should be enabled:<\/p><pre class=\"language-clike\"><code class=\"language-clike\"><span class=\"token function\">CMU_OscillatorEnable<\/span><span class=\"token punctuation\">(<\/span>cmuSelect_LFXO<span class=\"token punctuation\">,<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">,<\/span> <span class=\"token boolean\">true<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n<\/code><\/pre><h3>Clock Selection in a Project with Micrium OS<span id=\"clock-selection-in-a-project-with-micrium-os\" class=\"self-anchor\"><a class=\"perm\" href=\"#clock-selection-in-a-project-with-micrium-os\">#<\/a><\/span><\/h3><p style=\"color:inherit\">When Micrium OS is used, a BSP (all instances) is provided that sets up some parts of the clock tree. The sleeptimer clock source will be enabled by this bsp. However, the desired oscillator remains configurable from the file <strong>bsp_cfg.h<\/strong>.<\/p><p style=\"color:inherit\">The configuration <code>BSP_LF_CLK_SEL<\/code> determines which oscillator will be used by the sleeptimer's hardware timer peripheral. It can take the following values:<\/p><table class=\"doxtable \"><caption><\/caption><thead><tr><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Config   <\/p><\/th><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Description   <\/p><\/th><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Frequency    <\/p><\/th><\/tr><\/thead><tbody><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><strong>BSP_LF_CLK_LFXO<\/strong><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Low-frequency crystal oscillator   <\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">32.768 Khz    <\/p><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><strong>BSP_LF_CLK_LFRCO<\/strong><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Low-frequency RC oscillator   <\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">32.768 Khz    <\/p><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><strong>BSP_LF_CLK_ULFRCO<\/strong><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Ultra low-frequency RC oscillator   <\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">1 Khz   <\/p><\/td><\/tr><\/tbody><\/table><h2>Configuration Options<span id=\"configuration-options\" class=\"self-anchor\"><a class=\"perm\" href=\"#configuration-options\">#<\/a><\/span><\/h2><p style=\"color:inherit\"><code>SL_SLEEPTIMER_PERIPHERAL<\/code> can be set to one of the following values:<\/p><table class=\"doxtable \"><caption><\/caption><thead><tr><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Config   <\/p><\/th><th class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Description    <\/p><\/th><\/tr><\/thead><tbody><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><code>SL_SLEEPTIMER_PERIPHERAL_DEFAULT<\/code><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Selects either RTC or RTCC, depending of what is available on the platform.    <\/p><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><code>SL_SLEEPTIMER_PERIPHERAL_RTCC<\/code><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Selects RTCC    <\/p><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><code>SL_SLEEPTIMER_PERIPHERAL_RTC<\/code><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Selects RTC    <\/p><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><code>SL_SLEEPTIMER_PERIPHERAL_PRORTC<\/code><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Selects Internal radio RTC. Available only on EFR32XG13, EFR32XG14, EFR32XG21 and EFR32XG22 families.    <\/p><\/td><\/tr><tr><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\"><code>SL_SLEEPTIMER_PERIPHERAL_BURTC<\/code><\/p><\/td><td class=\"\" colspan=\"1\" rowspan=\"1\"><p style=\"color:inherit\">Selects BURTC. Not available on Series 0 devices.   <\/p><\/td><\/tr><\/tbody><\/table><p style=\"color:inherit\"><code>SL_SLEEPTIMER_WALLCLOCK_CONFIG<\/code> must be set to 1 to enable timestamp and date functionnalities.<\/p><p style=\"color:inherit\"><code>SL_SLEEPTIMER_FREQ_DIVIDER<\/code> must be a power of 2 within the range 1 to 32. When <code>SL_SLEEPTIMER_PERIPHERAL<\/code> is set to <code>SL_SLEEPTIMER_PERIPHERAL_PRORTC<\/code>, <code>SL_SLEEPTIMER_FREQ_DIVIDER<\/code> must be set to 1.<\/p><p style=\"color:inherit\"><code>SL_SLEEPTIMER_PRORTC_HAL_OWNS_IRQ_HANDLER<\/code> is only meaningful when <code>SL_SLEEPTIMER_PERIPHERAL<\/code> is set to <code>SL_SLEEPTIMER_PERIPHERAL_PRORTC<\/code>. Set to 1 if no communication stack is used in your project. Otherwise, must be set to 0.<\/p><h2>The API<span id=\"the-api\" class=\"self-anchor\"><a class=\"perm\" href=\"#the-api\">#<\/a><\/span><\/h2><p style=\"color:inherit\">This section contains brief descriptions of the API functions. For more information about input and output parameters and return values, click on the hyperlinked function names. Most functions return an error code, <code>SL_STATUS_OK<\/code> is returned on success, see sl_status.h for other error codes.<\/p><p style=\"color:inherit\">The application code must include the <strong>sl_sleeptimer.h<\/strong> header file.<\/p><p style=\"color:inherit\">All API functions can be called from within interrupt handlers.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-init\" target=\"_blank\" rel=\"\">sl_sleeptimer_init()<\/a>\n These functions initialize the sleeptimer driver. Typically, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-init\" target=\"_blank\" rel=\"\">sl_sleeptimer_init()<\/a> is called once in the startup code.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-start-timer\" target=\"_blank\" rel=\"\">sl_sleeptimer_start_timer()<\/a>\n Start a one shot 32 bits timer. When a timer expires, a user-supplied callback function is called. A pointer to this function is passed to <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-start-timer\" target=\"_blank\" rel=\"\">sl_sleeptimer_start_timer()<\/a>. See <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/group-sleeptimer#group-sleeptimer-1callback\" target=\"_blank\" rel=\"\">callback<\/a> for details of the callback prototype.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-restart-timer\" target=\"_blank\" rel=\"\">sl_sleeptimer_restart_timer()<\/a>\n Restart a one shot 32 bits timer. When a timer expires, a user-supplied callback function is called. A pointer to this function is passed to <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-start-timer\" target=\"_blank\" rel=\"\">sl_sleeptimer_start_timer()<\/a>. See <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/group-sleeptimer#group-sleeptimer-1callback\" target=\"_blank\" rel=\"\">callback<\/a> for details of the callback prototype.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-start-periodic-timer\" target=\"_blank\" rel=\"\">sl_sleeptimer_start_periodic_timer()<\/a>\n Start a periodic 32 bits timer. When a timer expires, a user-supplied callback function is called. A pointer to this function is passed to <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-start-timer\" target=\"_blank\" rel=\"\">sl_sleeptimer_start_timer()<\/a>. See <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/group-sleeptimer#group-sleeptimer-1callback\" target=\"_blank\" rel=\"\">callback<\/a> for details of the callback prototype.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-restart-periodic-timer\" target=\"_blank\" rel=\"\">sl_sleeptimer_restart_periodic_timer()<\/a>\n Restart a periodic 32 bits timer. When a timer expires, a user-supplied callback function is called. A pointer to this function is passed to <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-start-timer\" target=\"_blank\" rel=\"\">sl_sleeptimer_start_timer()<\/a>. See <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/group-sleeptimer#group-sleeptimer-1callback\" target=\"_blank\" rel=\"\">callback<\/a> for details of the callback prototype.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-stop-timer\" target=\"_blank\" rel=\"\">sl_sleeptimer_stop_timer()<\/a>\n Stop a timer.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-get-timer-time-remaining\" target=\"_blank\" rel=\"\">sl_sleeptimer_get_timer_time_remaining()<\/a>\n Get the time remaining before the timer expires.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-delay-millisecond\" target=\"_blank\" rel=\"\">sl_sleeptimer_delay_millisecond()<\/a>\n Delay for the given number of milliseconds. This is an \"active wait\" delay function.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-is-timer-running\" target=\"_blank\" rel=\"\">sl_sleeptimer_is_timer_running()<\/a>\n Check if a timer is running.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-get-time\" target=\"_blank\" rel=\"\">sl_sleeptimer_get_time()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-set-time\" target=\"_blank\" rel=\"\">sl_sleeptimer_set_time()<\/a>\n Get or set wallclock time.<\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-ms-to-tick\" target=\"_blank\" rel=\"\">sl_sleeptimer_ms_to_tick()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-ms32-to-tick\" target=\"_blank\" rel=\"\">sl_sleeptimer_ms32_to_tick()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-tick-to-ms\" target=\"_blank\" rel=\"\">sl_sleeptimer_tick_to_ms()<\/a>, <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-tick64-to-ms\" target=\"_blank\" rel=\"\">sl_sleeptimer_tick64_to_ms()<\/a>\n Convert between milliseconds and RTC/RTCC counter ticks.<\/p><p style=\"color:inherit\"><a id=\"group-sleeptimer-1callback\"><\/a><strong>The timer expiry callback function:<\/strong>\n The callback function, prototyped as <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-timer-callback-t\" target=\"_blank\" rel=\"\">sl_sleeptimer_timer_callback_t()<\/a>, is called from within the RTC peripheral interrupt handler on timer expiration. <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-timer-callback-t\" target=\"_blank\" rel=\"\">sl_sleeptimer_timer_callback_t(sl_sleeptimer_timer_handle_t *handle, void *data)<\/a><\/p><h2>Example<span id=\"example\" class=\"self-anchor\"><a class=\"perm\" href=\"#example\">#<\/a><\/span><\/h2><pre class=\"language-clike\"><code class=\"language-clike\">#include <span class=\"token string\">\"sl_sleeptimer.h\"<\/span>\n\nvoid <span class=\"token function\">my_timer_callback<\/span><span class=\"token punctuation\">(<\/span>sl_sleeptimer_timer_handle_t <span class=\"token operator\">*<\/span>handle<span class=\"token punctuation\">,<\/span> void <span class=\"token operator\">*<\/span>data<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">{<\/span>\n  <span class=\"token comment\">//Code executed when the timer expire.<\/span>\n<span class=\"token punctuation\">}<\/span>\n\nint <span class=\"token function\">start_timer<\/span><span class=\"token punctuation\">(<\/span>void<span class=\"token punctuation\">)<\/span>\n<span class=\"token punctuation\">{<\/span>\n  sl_status_t status<span class=\"token punctuation\">;<\/span>\n  sl_sleeptimer_timer_handle_t my_timer<span class=\"token punctuation\">;<\/span>\n  uint32_t timer_timeout <span class=\"token operator\">=<\/span> <span class=\"token number\">300<\/span><span class=\"token punctuation\">;<\/span>\n\n  <span class=\"token comment\">// We assume the sleeptimer is initialized properly<\/span>\n\n  status <span class=\"token operator\">=<\/span> <span class=\"token function\">sl_sleeptimer_start_timer<\/span><span class=\"token punctuation\">(<\/span><span class=\"token operator\">&amp;<\/span>my_timer<span class=\"token punctuation\">,<\/span>\n                                     timer_timeout<span class=\"token punctuation\">,<\/span>\n                                     my_timer_callback<span class=\"token punctuation\">,<\/span>\n                                     <span class=\"token punctuation\">(<\/span>void <span class=\"token operator\">*<\/span><span class=\"token punctuation\">)<\/span>NULL<span class=\"token punctuation\">,<\/span>\n                                     <span class=\"token number\">0<\/span><span class=\"token punctuation\">,<\/span>\n                                     <span class=\"token number\">0<\/span><span class=\"token punctuation\">)<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token keyword\">if<\/span><span class=\"token punctuation\">(<\/span>status <span class=\"token operator\">!=<\/span> SL_STATUS_OK<span class=\"token punctuation\">)<\/span> <span class=\"token punctuation\">{<\/span>\n    <span class=\"token keyword\">return<\/span> <span class=\"token operator\">-<\/span><span class=\"token number\">1<\/span><span class=\"token punctuation\">;<\/span>\n  <span class=\"token punctuation\">}<\/span>\n  <span class=\"token keyword\">return<\/span> <span class=\"token number\">1<\/span><span class=\"token punctuation\">;<\/span>\n<span class=\"token punctuation\">}<\/span>\n<\/code><\/pre><h2>Modules<span id=\"modules\" class=\"self-anchor\"><a class=\"perm\" href=\"#modules\">#<\/a><\/span><\/h2><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sl-sleeptimer-timer-handle\" target=\"_blank\" rel=\"\">sl_sleeptimer_timer_handle<\/a><\/p><p style=\"color:inherit\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sl-sleeptimer-date-t\" target=\"_blank\" rel=\"\">sl_sleeptimer_date_t<\/a><\/p><div class=\"decl-class-section\"><h2>Typedefs<span id=\"typedef-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#typedef-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">typedef uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-timestamp-t\">sl_sleeptimer_timestamp_t<\/a><\/div><div class=\"classdescription\"><p style=\"color:inherit\">Timestamp, wall clock time in seconds. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">typedef uint64_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-timestamp-64-t\">sl_sleeptimer_timestamp_64_t<\/a><\/div><div class=\"classdescription\"><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">typedef int32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-time-zone-offset-t\">sl_sleeptimer_time_zone_offset_t<\/a><\/div><div class=\"classdescription\"><p style=\"color:inherit\">Time zone offset from UTC(second). <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">typedef void(*<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-timer-callback-t\">sl_sleeptimer_timer_callback_t<\/a>)(sl_sleeptimer_timer_handle_t *handle, void *data)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Typedef for the user supplied callback function which is called when a timer expires. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"decl-class-section\"><h2>Functions<span id=\"func-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#func-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\"><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sleeptimer-enum\">SLEEPTIMER_ENUM<\/a>(sl_sleeptimer_month_t)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Month enum. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sleeptimer-enum-1\">SLEEPTIMER_ENUM<\/a>(sl_sleeptimer_weekDay_t)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Week Day enum. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-init\">sl_sleeptimer_init<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Initializes the Sleeptimer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-start-timer\">sl_sleeptimer_start_timer<\/a>(sl_sleeptimer_timer_handle_t *handle, uint32_t timeout, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Starts a 32 bits timer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-restart-timer\">sl_sleeptimer_restart_timer<\/a>(sl_sleeptimer_timer_handle_t *handle, uint32_t timeout, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Restarts a 32 bits timer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-start-periodic-timer\">sl_sleeptimer_start_periodic_timer<\/a>(sl_sleeptimer_timer_handle_t *handle, uint32_t timeout, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Starts a 32 bits periodic timer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-restart-periodic-timer\">sl_sleeptimer_restart_periodic_timer<\/a>(sl_sleeptimer_timer_handle_t *handle, uint32_t timeout, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Restarts a 32 bits periodic timer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-stop-timer\">sl_sleeptimer_stop_timer<\/a>(sl_sleeptimer_timer_handle_t *handle)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Stops a timer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-is-timer-running\">sl_sleeptimer_is_timer_running<\/a>(sl_sleeptimer_timer_handle_t *handle, bool *running)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets the status of a timer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-get-timer-time-remaining\">sl_sleeptimer_get_timer_time_remaining<\/a>(sl_sleeptimer_timer_handle_t *handle, uint32_t *time)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets remaining time until timer expires. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-get-remaining-time-of-first-timer\">sl_sleeptimer_get_remaining_time_of_first_timer<\/a>(uint16_t option_flags, uint32_t *time_remaining)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets the time remaining until the first timer with the matching set of flags expires. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-get-tick-count\">sl_sleeptimer_get_tick_count<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets current 32 bits global tick count. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint64_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-get-tick-count64\">sl_sleeptimer_get_tick_count64<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets current 64 bits global tick count. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-get-timer-frequency\">sl_sleeptimer_get_timer_frequency<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Get timer frequency. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-convert-time-to-date\">sl_sleeptimer_convert_time_to_date<\/a>(sl_sleeptimer_timestamp_t time, sl_sleeptimer_time_zone_offset_t time_zone, sl_sleeptimer_date_t *date)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Converts a Unix timestamp into a date. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-convert-time-to-date-64\">sl_sleeptimer_convert_time_to_date_64<\/a>(sl_sleeptimer_timestamp_64_t time, sl_sleeptimer_time_zone_offset_t time_zone, sl_sleeptimer_date_t *date)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Converts a 64 bit Unix timestamp into a date. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-convert-date-to-time\">sl_sleeptimer_convert_date_to_time<\/a>(sl_sleeptimer_date_t *date, sl_sleeptimer_timestamp_t *time)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Converts a date into a Unix timestamp. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-convert-date-to-time-64\">sl_sleeptimer_convert_date_to_time_64<\/a>(sl_sleeptimer_date_t *date, sl_sleeptimer_timestamp_64_t *time)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Converts a date into a 64 bit timestamp. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-convert-date-to-str\">sl_sleeptimer_convert_date_to_str<\/a>(char *str, size_t size, const uint8_t *format, sl_sleeptimer_date_t *date)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Convert date to string. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-set-tz\">sl_sleeptimer_set_tz<\/a>(sl_sleeptimer_time_zone_offset_t offset)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Sets time zone offset. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-time-zone-offset-t\" target=\"_blank\" rel=\"\">sl_sleeptimer_time_zone_offset_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-get-tz\">sl_sleeptimer_get_tz<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets time zone offset. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-timestamp-t\" target=\"_blank\" rel=\"\">sl_sleeptimer_timestamp_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-get-time\">sl_sleeptimer_get_time<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Retrieves current 32 bit time. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_sleeptimer_timestamp_64_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-get-time-64\">sl_sleeptimer_get_time_64<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Retrieves current 64 bit time. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-set-time\">sl_sleeptimer_set_time<\/a>(sl_sleeptimer_timestamp_t time)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Sets current time. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-set-time-64\">sl_sleeptimer_set_time_64<\/a>(sl_sleeptimer_timestamp_64_t time)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Sets current time. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-get-datetime\">sl_sleeptimer_get_datetime<\/a>(sl_sleeptimer_date_t *date)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets current date. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-set-datetime\">sl_sleeptimer_set_datetime<\/a>(sl_sleeptimer_date_t *date)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Sets current time, in date format. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-build-datetime\">sl_sleeptimer_build_datetime<\/a>(sl_sleeptimer_date_t *date, uint16_t year, sl_sleeptimer_month_t month, uint8_t month_day, uint8_t hour, uint8_t min, uint8_t sec, sl_sleeptimer_time_zone_offset_t tzOffset)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Builds a date time structure based on the provided parameters, where the maximum supported date is 10:14:07 PM 01/18/2038. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-build-datetime-64\">sl_sleeptimer_build_datetime_64<\/a>(sl_sleeptimer_date_t *date, uint16_t year, sl_sleeptimer_month_t month, uint8_t month_day, uint8_t hour, uint8_t min, uint8_t sec, sl_sleeptimer_time_zone_offset_t tzOffset)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Builds a date time structure based on the provided parameters, where the maximum supported date is 11:59:59 PM 12/31/11899. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-convert-unix-time-to-ntp\">sl_sleeptimer_convert_unix_time_to_ntp<\/a>(sl_sleeptimer_timestamp_t time, uint32_t *ntp_time)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Converts Unix timestamp into NTP timestamp. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-convert-ntp-time-to-unix\">sl_sleeptimer_convert_ntp_time_to_unix<\/a>(uint32_t ntp_time, sl_sleeptimer_timestamp_t *time)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Converts NTP timestamp into Unix timestamp. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-convert-unix-time-to-zigbee\">sl_sleeptimer_convert_unix_time_to_zigbee<\/a>(sl_sleeptimer_timestamp_t time, uint32_t *zigbee_time)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Converts Unix timestamp into Zigbee timestamp. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-convert-zigbee-time-to-unix\">sl_sleeptimer_convert_zigbee_time_to_unix<\/a>(uint32_t zigbee_time, sl_sleeptimer_timestamp_t *time)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Converts Zigbee timestamp into Unix timestamp. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-time-zone-offset-t\" target=\"_blank\" rel=\"\">sl_sleeptimer_time_zone_offset_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-set-tz-ahead-utc\">sl_sleeptimer_set_tz_ahead_utc<\/a>(uint8_t hours, uint8_t minutes)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Calculates offset for time zone after UTC-0. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\"><a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-time-zone-offset-t\" target=\"_blank\" rel=\"\">sl_sleeptimer_time_zone_offset_t<\/a><\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-set-tz-behind-utc\">sl_sleeptimer_set_tz_behind_utc<\/a>(uint8_t hours, uint8_t minutes)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Calculates offset for time zone before UTC-0. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">void<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-delay-millisecond\">sl_sleeptimer_delay_millisecond<\/a>(uint16_t time_ms)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Active delay. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-ms-to-tick\">sl_sleeptimer_ms_to_tick<\/a>(uint16_t time_ms)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Converts milliseconds in ticks. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-ms32-to-tick\">sl_sleeptimer_ms32_to_tick<\/a>(uint32_t time_ms, uint32_t *tick)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Converts 32-bits milliseconds in ticks. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-get-max-ms32-conversion\">sl_sleeptimer_get_max_ms32_conversion<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets the maximum value that can be passed to the functions that have a 32-bits time or timeout argument expressed in milliseconds. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint32_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-tick-to-ms\">sl_sleeptimer_tick_to_ms<\/a>(uint32_t tick)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Converts ticks in milliseconds. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-tick64-to-ms\">sl_sleeptimer_tick64_to_ms<\/a>(uint64_t tick, uint64_t *ms)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Converts 64-bit ticks in milliseconds. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">bool<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-is-power-manager-early-restore-timer-latest-to-expire\">sl_sleeptimer_is_power_manager_early_restore_timer_latest_to_expire<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Allow sleep after ISR exit. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-start-timer-ms\">sl_sleeptimer_start_timer_ms<\/a>(sl_sleeptimer_timer_handle_t *handle, uint32_t timeout_ms, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Starts a 32 bits timer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-restart-timer-ms\">sl_sleeptimer_restart_timer_ms<\/a>(sl_sleeptimer_timer_handle_t *handle, uint32_t timeout_ms, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Restarts a 32 bits timer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-start-periodic-timer-ms\">sl_sleeptimer_start_periodic_timer_ms<\/a>(sl_sleeptimer_timer_handle_t *handle, uint32_t timeout_ms, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Starts a 32 bits periodic timer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-restart-periodic-timer-ms\">sl_sleeptimer_restart_periodic_timer_ms<\/a>(sl_sleeptimer_timer_handle_t *handle, uint32_t timeout_ms, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Restarts a 32 bits periodic timer. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">uint16_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-sleeptimer-get-clock-accuracy\">sl_sleeptimer_get_clock_accuracy<\/a>(void)<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Gets the precision (in PPM) of the sleeptimer's clock. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"def-class-section\"><h2>Typedef Documentation<span id=\"typedef-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#typedef-definition\">#<\/a><\/span><\/h2><div><h3>sl_sleeptimer_timestamp_t<span id=\"sl-sleeptimer-timestamp-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-timestamp-t\">#<\/a><\/span><\/h3><blockquote>typedef uint32_t sl_sleeptimer_timestamp_t <\/blockquote><p style=\"color:inherit\">Timestamp, wall clock time in seconds. <\/p><br><div>Definition at line <code>53<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_timestamp_64_t<span id=\"sl-sleeptimer-timestamp-64-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-timestamp-64-t\">#<\/a><\/span><\/h3><blockquote>typedef uint64_t sl_sleeptimer_timestamp_64_t <\/blockquote><br><div>Definition at line <code>56<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_time_zone_offset_t<span id=\"sl-sleeptimer-time-zone-offset-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-time-zone-offset-t\">#<\/a><\/span><\/h3><blockquote>typedef int32_t sl_sleeptimer_time_zone_offset_t <\/blockquote><p style=\"color:inherit\">Time zone offset from UTC(second). <\/p><br><div>Definition at line <code>59<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_timer_callback_t<span id=\"sl-sleeptimer-timer-callback-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-timer-callback-t\">#<\/a><\/span><\/h3><blockquote>typedef void(* sl_sleeptimer_timer_callback_t) (sl_sleeptimer_timer_handle_t *handle, void *data) )(sl_sleeptimer_timer_handle_t *handle, void *data)<\/blockquote><p style=\"color:inherit\">Typedef for the user supplied callback function which is called when a timer expires. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">The timer handle.<\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">data<\/td><td><p style=\"color:inherit\">An extra parameter for the user application. <\/p><\/td><\/tr><\/tbody><\/table><\/div><br><div>Definition at line <code>72<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><\/div><div class=\"def-class-section\"><h2>Function Documentation<span id=\"func-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#func-definition\">#<\/a><\/span><\/h2><div><h3>SLEEPTIMER_ENUM<span id=\"sleeptimer-enum\" class=\"self-anchor\"><a class=\"perm\" href=\"#sleeptimer-enum\">#<\/a><\/span><\/h3><blockquote>SLEEPTIMER_ENUM (sl_sleeptimer_month_t)<\/blockquote><p style=\"color:inherit\">Month enum. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><br><div>Definition at line <code>89<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>SLEEPTIMER_ENUM<span id=\"sleeptimer-enum-1\" class=\"self-anchor\"><a class=\"perm\" href=\"#sleeptimer-enum-1\">#<\/a><\/span><\/h3><blockquote>SLEEPTIMER_ENUM (sl_sleeptimer_weekDay_t)<\/blockquote><p style=\"color:inherit\">Week Day enum. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><br><div>Definition at line <code>105<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_init<span id=\"sl-sleeptimer-init\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-init\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_init (void)<\/blockquote><p style=\"color:inherit\">Initializes the Sleeptimer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>137<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_start_timer<span id=\"sl-sleeptimer-start-timer\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-start-timer\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_start_timer (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/blockquote><p style=\"color:inherit\">Starts a 32 bits timer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to handle to timer. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">timeout<\/td><td><p style=\"color:inherit\">Timer timeout, in timer ticks. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">Callback function that will be called when initial/periodic timeout expires. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback_data<\/td><td><p style=\"color:inherit\">Pointer to user data that will be passed to callback. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">priority<\/td><td><p style=\"color:inherit\">Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">option_flags<\/td><td><p style=\"color:inherit\">Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<\/p><ul><li><p style=\"color:inherit\">SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG<\/p><\/li><\/ul><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>155<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_restart_timer<span id=\"sl-sleeptimer-restart-timer\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-restart-timer\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_restart_timer (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/blockquote><p style=\"color:inherit\">Restarts a 32 bits timer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to handle to timer. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">timeout<\/td><td><p style=\"color:inherit\">Timer timeout, in timer ticks. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">Callback function that will be called when initial/periodic timeout expires. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback_data<\/td><td><p style=\"color:inherit\">Pointer to user data that will be passed to callback. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">priority<\/td><td><p style=\"color:inherit\">Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">option_flags<\/td><td><p style=\"color:inherit\">Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<\/p><ul><li><p style=\"color:inherit\">SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG or 0 for not flags.<\/p><\/li><\/ul><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>179<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_start_periodic_timer<span id=\"sl-sleeptimer-start-periodic-timer\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-start-periodic-timer\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_start_periodic_timer (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/blockquote><p style=\"color:inherit\">Starts a 32 bits periodic timer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to handle to timer. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">timeout<\/td><td><p style=\"color:inherit\">Timer periodic timeout, in timer ticks. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">Callback function that will be called when initial/periodic timeout expires. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback_data<\/td><td><p style=\"color:inherit\">Pointer to user data that will be passed to callback. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">priority<\/td><td><p style=\"color:inherit\">Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">option_flags<\/td><td><p style=\"color:inherit\">Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<\/p><ul><li><p style=\"color:inherit\">SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG or 0 for not flags.<\/p><\/li><\/ul><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>203<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_restart_periodic_timer<span id=\"sl-sleeptimer-restart-periodic-timer\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-restart-periodic-timer\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_restart_periodic_timer (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/blockquote><p style=\"color:inherit\">Restarts a 32 bits periodic timer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to handle to timer. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">timeout<\/td><td><p style=\"color:inherit\">Timer periodic timeout, in timer ticks. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">Callback function that will be called when initial/periodic timeout expires. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback_data<\/td><td><p style=\"color:inherit\">Pointer to user data that will be passed to callback. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">priority<\/td><td><p style=\"color:inherit\">Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">option_flags<\/td><td><p style=\"color:inherit\">Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<\/p><ul><li><p style=\"color:inherit\">SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG or 0 for not flags.<\/p><\/li><\/ul><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>227<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_stop_timer<span id=\"sl-sleeptimer-stop-timer\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-stop-timer\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_stop_timer (sl_sleeptimer_timer_handle_t *handle)<\/blockquote><p style=\"color:inherit\">Stops a timer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to handle to timer.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><\/li><\/ul><br><div>Definition at line <code>241<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_is_timer_running<span id=\"sl-sleeptimer-is-timer-running\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-is-timer-running\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_is_timer_running (sl_sleeptimer_timer_handle_t *handle, bool *running)<\/blockquote><p style=\"color:inherit\">Gets the status of a timer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to handle to timer. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">running<\/td><td><p style=\"color:inherit\">Pointer to the status of the timer.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">A non periodic timer is considered not running during its callback.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>253<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_get_timer_time_remaining<span id=\"sl-sleeptimer-get-timer-time-remaining\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-get-timer-time-remaining\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_get_timer_time_remaining (sl_sleeptimer_timer_handle_t *handle, uint32_t *time)<\/blockquote><p style=\"color:inherit\">Gets remaining time until timer expires. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to handle to timer. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">time<\/td><td><p style=\"color:inherit\">Time left in timer ticks.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>264<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_get_remaining_time_of_first_timer<span id=\"sl-sleeptimer-get-remaining-time-of-first-timer\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-get-remaining-time-of-first-timer\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_get_remaining_time_of_first_timer (uint16_t option_flags, uint32_t *time_remaining)<\/blockquote><p style=\"color:inherit\">Gets the time remaining until the first timer with the matching set of flags expires. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">option_flags<\/td><td><p style=\"color:inherit\">Set of flags to match.<\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">time_remaining<\/td><td><p style=\"color:inherit\">Time left in timer ticks.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>277<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_get_tick_count<span id=\"sl-sleeptimer-get-tick-count\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-get-tick-count\">#<\/a><\/span><\/h3><blockquote>uint32_t sl_sleeptimer_get_tick_count (void)<\/blockquote><p style=\"color:inherit\">Gets current 32 bits global tick count. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">Current tick count. <\/p><\/li><\/ul><br><div>Definition at line <code>285<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_get_tick_count64<span id=\"sl-sleeptimer-get-tick-count64\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-get-tick-count64\">#<\/a><\/span><\/h3><blockquote>uint64_t sl_sleeptimer_get_tick_count64 (void)<\/blockquote><p style=\"color:inherit\">Gets current 64 bits global tick count. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">Current tick count. <\/p><\/li><\/ul><br><div>Definition at line <code>292<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_get_timer_frequency<span id=\"sl-sleeptimer-get-timer-frequency\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-get-timer-frequency\">#<\/a><\/span><\/h3><blockquote>uint32_t sl_sleeptimer_get_timer_frequency (void)<\/blockquote><p style=\"color:inherit\">Get timer frequency. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>299<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_convert_time_to_date<span id=\"sl-sleeptimer-convert-time-to-date\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-convert-time-to-date\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_convert_time_to_date (sl_sleeptimer_timestamp_t time, sl_sleeptimer_time_zone_offset_t time_zone, sl_sleeptimer_date_t *date)<\/blockquote><p style=\"color:inherit\">Converts a Unix timestamp into a date. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">time<\/td><td><p style=\"color:inherit\">32 bit Unix timestamp to convert. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">time_zone<\/td><td><p style=\"color:inherit\">Offset from UTC in second. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">date<\/td><td><p style=\"color:inherit\">Pointer to converted date.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Time is in Standard Time.<\/p><\/li><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>315<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_convert_time_to_date_64<span id=\"sl-sleeptimer-convert-time-to-date-64\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-convert-time-to-date-64\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_convert_time_to_date_64 (sl_sleeptimer_timestamp_64_t time, sl_sleeptimer_time_zone_offset_t time_zone, sl_sleeptimer_date_t *date)<\/blockquote><p style=\"color:inherit\">Converts a 64 bit Unix timestamp into a date. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">time<\/td><td><p style=\"color:inherit\">64 bit Unix timestamp to convert. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">time_zone<\/td><td><p style=\"color:inherit\">Offset from UTC in second. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">date<\/td><td><p style=\"color:inherit\">Pointer to converted date.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Time is in Standard Time.<\/p><\/li><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>333<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_convert_date_to_time<span id=\"sl-sleeptimer-convert-date-to-time\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-convert-date-to-time\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_convert_date_to_time (sl_sleeptimer_date_t *date, sl_sleeptimer_timestamp_t *time)<\/blockquote><p style=\"color:inherit\">Converts a date into a Unix timestamp. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">date<\/td><td><p style=\"color:inherit\">Pointer to date to convert. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">time<\/td><td><p style=\"color:inherit\">Pointer to converted 32 bit Unix timestamp.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Dates are based on the Unix time representation. Range of dates supported :<\/p><ul><li><p style=\"color:inherit\">January 1, 1970, 00:00:00 to January 19, 2038, 03:14:00<\/p><\/li><\/ul><\/li><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1. <\/p><\/li><\/ul><br><div>Definition at line <code>352<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_convert_date_to_time_64<span id=\"sl-sleeptimer-convert-date-to-time-64\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-convert-date-to-time-64\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_convert_date_to_time_64 (sl_sleeptimer_date_t *date, sl_sleeptimer_timestamp_64_t *time)<\/blockquote><p style=\"color:inherit\">Converts a date into a 64 bit timestamp. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">date<\/td><td><p style=\"color:inherit\">Pointer to date to convert. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">time<\/td><td><p style=\"color:inherit\">Pointer to converted 64 bit Unix timestamp.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Dates are based on the 64 bit Unix time representation. Range of dates supported :<\/p><ul><li><p style=\"color:inherit\">January 1, 1900, 00:00:00 to December 31, 11899 23:59:59.<\/p><\/li><\/ul><\/li><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1. <\/p><\/li><\/ul><br><div>Definition at line <code>370<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_convert_date_to_str<span id=\"sl-sleeptimer-convert-date-to-str\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-convert-date-to-str\">#<\/a><\/span><\/h3><blockquote>uint32_t sl_sleeptimer_convert_date_to_str (char *str, size_t size, const uint8_t *format, sl_sleeptimer_date_t *date)<\/blockquote><p style=\"color:inherit\">Convert date to string. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">str<\/td><td><p style=\"color:inherit\">Output string. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">size<\/td><td><p style=\"color:inherit\">Size of the input array. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">format<\/td><td><p style=\"color:inherit\">The format specification character. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">date<\/td><td><p style=\"color:inherit\">Pointer to date structure.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if error. Number of character in the output string.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Refer strftime() from UNIX. <a href=\"http://man7.org/linux/man-pages/man3/strftime.3.html\" target=\"_blank\" rel=\"noopener noreferrer\">http://man7.org/linux/man-pages/man3/strftime.3.html<\/a><\/p><\/li><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1. <\/p><\/li><\/ul><br><div>Definition at line <code>389<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_set_tz<span id=\"sl-sleeptimer-set-tz\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-set-tz\">#<\/a><\/span><\/h3><blockquote>void sl_sleeptimer_set_tz (sl_sleeptimer_time_zone_offset_t offset)<\/blockquote><p style=\"color:inherit\">Sets time zone offset. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">offset<\/td><td><p style=\"color:inherit\">Time zone offset, in seconds.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1. <\/p><\/li><\/ul><br><div>Definition at line <code>403<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_get_tz<span id=\"sl-sleeptimer-get-tz\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-get-tz\">#<\/a><\/span><\/h3><blockquote>sl_sleeptimer_time_zone_offset_t sl_sleeptimer_get_tz (void)<\/blockquote><p style=\"color:inherit\">Gets time zone offset. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">Time zone offset, in seconds. <\/p><\/li><\/ul><br><div>Definition at line <code>410<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_get_time<span id=\"sl-sleeptimer-get-time\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-get-time\">#<\/a><\/span><\/h3><blockquote>sl_sleeptimer_timestamp_t sl_sleeptimer_get_time (void)<\/blockquote><p style=\"color:inherit\">Retrieves current 32 bit time. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">Current timestamps in Unix format. <\/p><\/li><\/ul><br><div>Definition at line <code>420<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_get_time_64<span id=\"sl-sleeptimer-get-time-64\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-get-time-64\">#<\/a><\/span><\/h3><blockquote>sl_sleeptimer_timestamp_64_t sl_sleeptimer_get_time_64 (void)<\/blockquote><p style=\"color:inherit\">Retrieves current 64 bit time. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">Current timestamps in Unix format. <\/p><\/li><\/ul><br><div>Definition at line <code>430<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_set_time<span id=\"sl-sleeptimer-set-time\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-set-time\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_set_time (sl_sleeptimer_timestamp_t time)<\/blockquote><p style=\"color:inherit\">Sets current time. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">time<\/td><td><p style=\"color:inherit\">bit time to set.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>442<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_set_time_64<span id=\"sl-sleeptimer-set-time-64\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-set-time-64\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_set_time_64 (sl_sleeptimer_timestamp_64_t time)<\/blockquote><p style=\"color:inherit\">Sets current time. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">time<\/td><td><p style=\"color:inherit\">bit time to set.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>454<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_get_datetime<span id=\"sl-sleeptimer-get-datetime\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-get-datetime\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_get_datetime (sl_sleeptimer_date_t *date)<\/blockquote><p style=\"color:inherit\">Gets current date. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">date<\/td><td><p style=\"color:inherit\">Pointer to a <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sl-sleeptimer-date-t\" target=\"_blank\" rel=\"\">sl_sleeptimer_date_t<\/a> structure.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Time is in Standard Time.<\/p><\/li><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>468<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_set_datetime<span id=\"sl-sleeptimer-set-datetime\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-set-datetime\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_set_datetime (sl_sleeptimer_date_t *date)<\/blockquote><p style=\"color:inherit\">Sets current time, in date format. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">date<\/td><td><p style=\"color:inherit\">Pointer to current date.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>480<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_build_datetime<span id=\"sl-sleeptimer-build-datetime\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-build-datetime\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_build_datetime (sl_sleeptimer_date_t *date, uint16_t year, sl_sleeptimer_month_t month, uint8_t month_day, uint8_t hour, uint8_t min, uint8_t sec, sl_sleeptimer_time_zone_offset_t tzOffset)<\/blockquote><p style=\"color:inherit\">Builds a date time structure based on the provided parameters, where the maximum supported date is 10:14:07 PM 01/18/2038. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">date<\/td><td><p style=\"color:inherit\">Pointer to the structure to be populated. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">year<\/td><td><p style=\"color:inherit\">Current year. May be provided based on a 0 Epoch or a 1900 Epoch. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">month<\/td><td><p style=\"color:inherit\">Months since January. Expected value: 0-11. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">month_day<\/td><td><p style=\"color:inherit\">Day of the month. Expected value: 1-31. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">hour<\/td><td><p style=\"color:inherit\">Hours since midnight. Expected value: 0-23. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">min<\/td><td><p style=\"color:inherit\">Minutes after the hour. Expected value: 0-59. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">sec<\/td><td><p style=\"color:inherit\">Seconds after the minute. Expected value: 0-59. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">tzOffset<\/td><td><p style=\"color:inherit\">Offset, in seconds, from UTC.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>500<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_build_datetime_64<span id=\"sl-sleeptimer-build-datetime-64\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-build-datetime-64\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_build_datetime_64 (sl_sleeptimer_date_t *date, uint16_t year, sl_sleeptimer_month_t month, uint8_t month_day, uint8_t hour, uint8_t min, uint8_t sec, sl_sleeptimer_time_zone_offset_t tzOffset)<\/blockquote><p style=\"color:inherit\">Builds a date time structure based on the provided parameters, where the maximum supported date is 11:59:59 PM 12/31/11899. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">date<\/td><td><p style=\"color:inherit\">Pointer to the structure to be populated. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">year<\/td><td><p style=\"color:inherit\">Current year based on 0 Epoch. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">month<\/td><td><p style=\"color:inherit\">Months since January. Expected value: 0-11. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">month_day<\/td><td><p style=\"color:inherit\">Day of the month. Expected value: 1-31. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">hour<\/td><td><p style=\"color:inherit\">Hours since midnight. Expected value: 0-23. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">min<\/td><td><p style=\"color:inherit\">Minutes after the hour. Expected value: 0-59. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">sec<\/td><td><p style=\"color:inherit\">Seconds after the minute. Expected value: 0-59. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">tzOffset<\/td><td><p style=\"color:inherit\">Offset, in seconds, from UTC.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Resulting date structure's year will be based on 1900 epoch<\/p><\/li><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>529<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_convert_unix_time_to_ntp<span id=\"sl-sleeptimer-convert-unix-time-to-ntp\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-convert-unix-time-to-ntp\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_convert_unix_time_to_ntp (sl_sleeptimer_timestamp_t time, uint32_t *ntp_time)<\/blockquote><p style=\"color:inherit\">Converts Unix timestamp into NTP timestamp. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">time<\/td><td><p style=\"color:inherit\">Unix timestamp. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">ntp_time<\/td><td><p style=\"color:inherit\">Pointer to NTP Timestamp.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Unix timestamp range supported : 0x0 to 0x7C55 817F ie. January 1, 1970, 00:00:00 to February 07, 2036, 06:28:15<\/p><\/li><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>552<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_convert_ntp_time_to_unix<span id=\"sl-sleeptimer-convert-ntp-time-to-unix\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-convert-ntp-time-to-unix\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_convert_ntp_time_to_unix (uint32_t ntp_time, sl_sleeptimer_timestamp_t *time)<\/blockquote><p style=\"color:inherit\">Converts NTP timestamp into Unix timestamp. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">ntp_time<\/td><td><p style=\"color:inherit\">NTP Timestamp. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">time<\/td><td><p style=\"color:inherit\">Pointer to Unix timestamp.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">NTP timestamp range supported : 0x83AA 7E80 to 0xFFFF FFFF ie. January 1, 1970, 00:00:00 to February 07, 2036, 06:28:15<\/p><\/li><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>569<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_convert_unix_time_to_zigbee<span id=\"sl-sleeptimer-convert-unix-time-to-zigbee\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-convert-unix-time-to-zigbee\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_convert_unix_time_to_zigbee (sl_sleeptimer_timestamp_t time, uint32_t *zigbee_time)<\/blockquote><p style=\"color:inherit\">Converts Unix timestamp into Zigbee timestamp. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">time<\/td><td><p style=\"color:inherit\">Unix timestamp.<\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">zigbee_time<\/td><td><p style=\"color:inherit\">Pointer to NTP Timestamp.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">Unix timestamp range supported : 0x386D 4380 to 0x7FFF FFFF ie. January 1, 2000, 00:00:0 to January 19, 2038, 03:14:00<\/p><\/li><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>587<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_convert_zigbee_time_to_unix<span id=\"sl-sleeptimer-convert-zigbee-time-to-unix\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-convert-zigbee-time-to-unix\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_convert_zigbee_time_to_unix (uint32_t zigbee_time, sl_sleeptimer_timestamp_t *time)<\/blockquote><p style=\"color:inherit\">Converts Zigbee timestamp into Unix timestamp. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">zigbee_time<\/td><td><p style=\"color:inherit\">NTP Timestamp. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">time<\/td><td><p style=\"color:inherit\">Pointer to Unix timestamp.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">ZIGBEE timestamp range supported : 0x0 to 0x4792 BC7F ie. January 1, 2000, 00:00:00 to January 19, 2038, 03:14:00<\/p><\/li><li><p style=\"color:inherit\">Function definition is accessible only when SL_SLEEPTIMER_WALLCLOCK_CONFIG is set to 1.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>604<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_set_tz_ahead_utc<span id=\"sl-sleeptimer-set-tz-ahead-utc\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-set-tz-ahead-utc\">#<\/a><\/span><\/h3><blockquote>sl_sleeptimer_time_zone_offset_t sl_sleeptimer_set_tz_ahead_utc (uint8_t hours, uint8_t minutes)<\/blockquote><p style=\"color:inherit\">Calculates offset for time zone after UTC-0. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">hours<\/td><td><p style=\"color:inherit\">Number of hours from UTC-0. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">minutes<\/td><td><p style=\"color:inherit\">Number of minutes from UTC-0.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">The time zone offset in seconds. <\/p><\/li><\/ul><br><div>Definition at line <code>615<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_set_tz_behind_utc<span id=\"sl-sleeptimer-set-tz-behind-utc\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-set-tz-behind-utc\">#<\/a><\/span><\/h3><blockquote>sl_sleeptimer_time_zone_offset_t sl_sleeptimer_set_tz_behind_utc (uint8_t hours, uint8_t minutes)<\/blockquote><p style=\"color:inherit\">Calculates offset for time zone before UTC-0. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">hours<\/td><td><p style=\"color:inherit\">Number of hours to UTC-0. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">minutes<\/td><td><p style=\"color:inherit\">Number of minutes to UTC-0.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">The time zone offset in seconds. <\/p><\/li><\/ul><br><div>Definition at line <code>629<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_delay_millisecond<span id=\"sl-sleeptimer-delay-millisecond\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-delay-millisecond\">#<\/a><\/span><\/h3><blockquote>void sl_sleeptimer_delay_millisecond (uint16_t time_ms)<\/blockquote><p style=\"color:inherit\">Active delay. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">time_ms<\/td><td><p style=\"color:inherit\">Delay duration in milliseconds. <\/p><\/td><\/tr><\/tbody><\/table><\/div><br><div>Definition at line <code>640<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_ms_to_tick<span id=\"sl-sleeptimer-ms-to-tick\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-ms-to-tick\">#<\/a><\/span><\/h3><blockquote>uint32_t sl_sleeptimer_ms_to_tick (uint16_t time_ms)<\/blockquote><p style=\"color:inherit\">Converts milliseconds in ticks. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">time_ms<\/td><td><p style=\"color:inherit\">Number of milliseconds.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">Corresponding ticks number.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The result is \"rounded\" to the superior tick number. This function is light and cannot fail so it should be privilegied to perform a millisecond to tick conversion. <\/p><\/li><\/ul><br><div>Definition at line <code>653<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_ms32_to_tick<span id=\"sl-sleeptimer-ms32-to-tick\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-ms32-to-tick\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_ms32_to_tick (uint32_t time_ms, uint32_t *tick)<\/blockquote><p style=\"color:inherit\">Converts 32-bits milliseconds in ticks. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">time_ms<\/td><td><p style=\"color:inherit\">Number of milliseconds. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">tick<\/td><td><p style=\"color:inherit\">Pointer to the converted tick number.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The result is \"rounded\" to the superior tick number. If possible the <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-ms-to-tick\" target=\"_blank\" rel=\"\">sl_sleeptimer_ms_to_tick()<\/a> function should be used.<\/p><\/li><li><p style=\"color:inherit\">This function converts the delay expressed in milliseconds to timer ticks (represented on 32 bits). This means that the value that can be passed to the argument 'time_ms' is limited. The maximum timeout value that can be passed to this function can be retrieved by calling <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-get-max-ms32-conversion\" target=\"_blank\" rel=\"\">sl_sleeptimer_get_max_ms32_conversion()<\/a>. If the value passed to 'time_ms' is too large, SL_STATUS_INVALID_PARAMETER will be returned. <\/p><\/li><\/ul><br><div>Definition at line <code>674<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_get_max_ms32_conversion<span id=\"sl-sleeptimer-get-max-ms32-conversion\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-get-max-ms32-conversion\">#<\/a><\/span><\/h3><blockquote>uint32_t sl_sleeptimer_get_max_ms32_conversion (void)<\/blockquote><p style=\"color:inherit\">Gets the maximum value that can be passed to the functions that have a 32-bits time or timeout argument expressed in milliseconds. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">Maximum time or timeout value in milliseconds. <\/p><\/li><\/ul><br><div>Definition at line <code>683<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_tick_to_ms<span id=\"sl-sleeptimer-tick-to-ms\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-tick-to-ms\">#<\/a><\/span><\/h3><blockquote>uint32_t sl_sleeptimer_tick_to_ms (uint32_t tick)<\/blockquote><p style=\"color:inherit\">Converts ticks in milliseconds. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">tick<\/td><td><p style=\"color:inherit\">Number of tick.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">Corresponding milliseconds number.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The result is rounded to the inferior millisecond. <\/p><\/li><\/ul><br><div>Definition at line <code>694<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_tick64_to_ms<span id=\"sl-sleeptimer-tick64-to-ms\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-tick64-to-ms\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_tick64_to_ms (uint64_t tick, uint64_t *ms)<\/blockquote><p style=\"color:inherit\">Converts 64-bit ticks in milliseconds. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">tick<\/td><td><p style=\"color:inherit\">Number of tick. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">ms<\/td><td><p style=\"color:inherit\">Pointer to the converted milliseconds number.<\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">The result is rounded to the inferior millisecond. <\/p><\/li><\/ul><br><div>Definition at line <code>706<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_is_power_manager_early_restore_timer_latest_to_expire<span id=\"sl-sleeptimer-is-power-manager-early-restore-timer-latest-to-expire\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-is-power-manager-early-restore-timer-latest-to-expire\">#<\/a><\/span><\/h3><blockquote>bool sl_sleeptimer_is_power_manager_early_restore_timer_latest_to_expire (void)<\/blockquote><p style=\"color:inherit\">Allow sleep after ISR exit. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">true if sleep is allowed after ISR exit. False otherwise. <\/p><\/li><\/ul><br><div>Definition at line <code>714<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_start_timer_ms<span id=\"sl-sleeptimer-start-timer-ms\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-start-timer-ms\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_start_timer_ms (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout_ms, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/blockquote><p style=\"color:inherit\">Starts a 32 bits timer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to handle to timer. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">timeout_ms<\/td><td><p style=\"color:inherit\">Timer timeout, in milliseconds. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">Callback function that will be called when initial/periodic timeout expires. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback_data<\/td><td><p style=\"color:inherit\">Pointer to user data that will be passed to callback. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">priority<\/td><td><p style=\"color:inherit\">Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">option_flags<\/td><td><p style=\"color:inherit\">Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<\/p><ul><li><p style=\"color:inherit\">SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG or 0 for not flags.<\/p><\/li><\/ul><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">This function converts the delay expressed in milliseconds to timer ticks (represented on 32 bits). This means that the value that can be passed to the argument 'timeout_ms' is limited. The maximum timeout value that can be passed to this function can be retrieved by calling <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-get-max-ms32-conversion\" target=\"_blank\" rel=\"\">sl_sleeptimer_get_max_ms32_conversion()<\/a>. If the value passed to 'timeout_ms' is too large, SL_STATUS_INVALID_PARAMETER will be returned. <\/p><\/li><\/ul><br><div>Definition at line <code>741<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_restart_timer_ms<span id=\"sl-sleeptimer-restart-timer-ms\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-restart-timer-ms\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_restart_timer_ms (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout_ms, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/blockquote><p style=\"color:inherit\">Restarts a 32 bits timer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to handle to timer. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">timeout_ms<\/td><td><p style=\"color:inherit\">Timer timeout, in milliseconds. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">Callback function that will be called when initial/periodic timeout expires. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback_data<\/td><td><p style=\"color:inherit\">Pointer to user data that will be passed to callback. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">priority<\/td><td><p style=\"color:inherit\">Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">option_flags<\/td><td><p style=\"color:inherit\">Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<\/p><ul><li><p style=\"color:inherit\">SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG or 0 for not flags.<\/p><\/li><\/ul><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">This function converts the delay expressed in milliseconds to timer ticks (represented on 32 bits). This means that the value that can be passed to the argument 'timeout_ms' is limited. The maximum timeout value that can be passed to this function can be retrieved by calling <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-get-max-ms32-conversion\" target=\"_blank\" rel=\"\">sl_sleeptimer_get_max_ms32_conversion()<\/a>. If the value passed to 'timeout_ms' is too large, SL_STATUS_INVALID_PARAMETER will be returned. <\/p><\/li><\/ul><br><div>Definition at line <code>784<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_start_periodic_timer_ms<span id=\"sl-sleeptimer-start-periodic-timer-ms\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-start-periodic-timer-ms\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_start_periodic_timer_ms (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout_ms, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/blockquote><p style=\"color:inherit\">Starts a 32 bits periodic timer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to handle to timer. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">timeout_ms<\/td><td><p style=\"color:inherit\">Timer periodic timeout, in milliseconds. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">Callback function that will be called when initial/periodic timeout expires. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback_data<\/td><td><p style=\"color:inherit\">Pointer to user data that will be passed to callback. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">priority<\/td><td><p style=\"color:inherit\">Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">option_flags<\/td><td><p style=\"color:inherit\">Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<\/p><ul><li><p style=\"color:inherit\">SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG or 0 for not flags.<\/p><\/li><\/ul><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">This function converts the delay expressed in milliseconds to timer ticks (represented on 32 bits). This means that the value that can be passed to the argument 'timeout_ms' is limited. The maximum timeout value that can be passed to this function can be retrieved by calling <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-get-max-ms32-conversion\" target=\"_blank\" rel=\"\">sl_sleeptimer_get_max_ms32_conversion()<\/a>. If the value passed to 'timeout_ms' is too large, SL_STATUS_INVALID_PARAMETER will be returned. <\/p><\/li><\/ul><br><div>Definition at line <code>827<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_restart_periodic_timer_ms<span id=\"sl-sleeptimer-restart-periodic-timer-ms\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-restart-periodic-timer-ms\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_sleeptimer_restart_periodic_timer_ms (sl_sleeptimer_timer_handle_t *handle, uint32_t timeout_ms, sl_sleeptimer_timer_callback_t callback, void *callback_data, uint8_t priority, uint16_t option_flags)<\/blockquote><p style=\"color:inherit\">Restarts a 32 bits periodic timer. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\">handle<\/td><td><p style=\"color:inherit\">Pointer to handle to timer. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">timeout_ms<\/td><td><p style=\"color:inherit\">Timer periodic timeout, in milliseconds. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback<\/td><td><p style=\"color:inherit\">Callback function that will be called when initial/periodic timeout expires. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">callback_data<\/td><td><p style=\"color:inherit\">Pointer to user data that will be passed to callback. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">priority<\/td><td><p style=\"color:inherit\">Priority of callback. Useful in case multiple timer expire at the same time. 0 = highest priority. <\/p><\/td><\/tr><tr><td>N/A<\/td><td class=\"paramname\">option_flags<\/td><td><p style=\"color:inherit\">Bit array of option flags for the timer. Valid bit-wise OR of one or more of the following:<\/p><ul><li><p style=\"color:inherit\">SL_SLEEPTIMER_NO_HIGH_PRECISION_HF_CLOCKS_REQUIRED_FLAG or 0 for not flags.<\/p><\/li><\/ul><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">0 if successful. Error code otherwise.<\/p><\/li><\/ul><p style=\"color:inherit\"><strong>Note<\/strong><\/p><ul><li><p style=\"color:inherit\">This function converts the delay expressed in milliseconds to timer ticks (represented on 32 bits). This means that the value that can be passed to the argument 'timeout_ms' is limited. The maximum timeout value that can be passed to this function can be retrieved by calling <a href=\"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer#sl-sleeptimer-get-max-ms32-conversion\" target=\"_blank\" rel=\"\">sl_sleeptimer_get_max_ms32_conversion()<\/a>. If the value passed to 'timeout_ms' is too large, SL_STATUS_INVALID_PARAMETER will be returned. <\/p><\/li><\/ul><br><div>Definition at line <code>859<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><div><h3>sl_sleeptimer_get_clock_accuracy<span id=\"sl-sleeptimer-get-clock-accuracy\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-sleeptimer-get-clock-accuracy\">#<\/a><\/span><\/h3><blockquote>uint16_t sl_sleeptimer_get_clock_accuracy (void)<\/blockquote><p style=\"color:inherit\">Gets the precision (in PPM) of the sleeptimer's clock. <\/p><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><tbody><tr><td>N/A<\/td><td class=\"paramname\"><\/td><td><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul><li><p style=\"color:inherit\">Clock accuracy, in PPM. <\/p><\/li><\/ul><br><div>Definition at line <code>873<\/code> of file <code>platform/service/sleeptimer/inc/sl_sleeptimer.h<\/code><\/div><br><\/div><\/div><\/div><\/article><footer class=\"footer-commons-msg\"><\/footer><div ub-in-page=\"6062051aebaf71079a7b414b\" class=\"hidden-lg\"><\/div>","url":"http://docs.silabs.com/gecko-platform/4.3/platform-service/sleeptimer","status":"success"}
